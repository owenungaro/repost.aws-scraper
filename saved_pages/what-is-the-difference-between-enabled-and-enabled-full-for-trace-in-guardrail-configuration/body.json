{
  "body": "GuardrailConfiguration\nhas a\ntrace\nfield with three valid values:\nenabled | disabled | enabled_full\n. What is the difference between\nenabled\nand\nenabled_full\n? Specifically, what is the difference in the\nConverse Response\nformat for each of those options?\n\nWhen configuring trace behavior in Amazon Bedrock Guardrails, there are three options: enabled, disabled, and enabled_full. While the documentation doesn't explicitly detail the differences between enabled and enabled_full, we can understand their general purposes:\nWhen trace is set to \"enabled\", the API response includes basic trace information in the amazon-bedrock-trace field. This provides insights into how the guardrail evaluated the input and output, including detected violations of content policies, denied topics, or other configured filters. The trace contains information about content that was blocked by the guardrail.\nThe enabled_full option likely provides more comprehensive trace data compared to the standard enabled setting, potentially including additional details about the guardrail's decision-making process or more verbose information about all evaluations performed.\nIn the response format, when a guardrail is enabled with tracing, you'll receive:\namazon-bedrock-guardrailAction: Indicates whether the guardrail \"INTERVENED\" or \"NONE\"\namazon-bedrock-trace: Contains a list of traces with information about blocked content\nThe trace information includes:\nmodelOutput: Contains the outputs from the model that were blocked\ninput: Details about the guardrail's assessment of the prompt, including topicPolicy information with names of violated topic policies, their types, and actions taken\nWhile the exact difference in response format between enabled and enabled_full isn't specified in the available documentation, enabled_full presumably provides more extensive trace data for more detailed analysis and debugging of guardrail behavior.\nSources\nSafeguard your generative AI workloads from prompt injections | AWS Security Blog\nGuardrailConfiguration - Amazon Bedrock\nTest a guardrail - Amazon Bedrock\nGuardrailStreamConfiguration - Amazon Bedrock\n\nHello,\nIn Amazon Bedrock's GuardrailConfiguration, the trace field values\nENABLED\nand\nENABLED_FULL\ndiffer in the level of detail provided in the response:\nENABLED:\nProvides basic tracing information\nShows whether guardrails were triggered\nIncludes high-level evaluation results\nReturns a simplified trace output\nExample Response Format:\n{\n\"trace\"\n:\n{\n\"guardrailsEvaluated\"\n:\ntrue\n,\n\"guardrailsTriggered\"\n:\n[\n\"rule1\"\n,\n\"rule2\"\n]\n,\n\"evaluationResult\"\n:\n\"allowed\"\n}\n}\nENABLED_FULL:\nProvides comprehensive tracing information\nShows detailed evaluation steps\nIncludes complete rule matching information\nReturns the full trace output with all intermediate steps\nShows exactly how each guardrail rule was evaluated\nIncludes more detailed context about why specific rules were triggered\nExample Response Format:\n{\n\"trace\"\n:\n{\n\"guardrailsEvaluated\"\n:\ntrue\n,\n\"guardrailsTriggered\"\n:\n[\n\"rule1\"\n,\n\"rule2\"\n]\n,\n\"evaluationResult\"\n:\n\"allowed\"\n,\n\"evaluationSteps\"\n:\n[\n{\n\"ruleId\"\n:\n\"rule1\"\n,\n\"evaluation\"\n:\n\"detailed_matching_info\"\n,\n\"context\"\n:\n\"full_context_information\"\n}\n,\n{\n\"ruleId\"\n:\n\"rule2\"\n,\n\"evaluation\"\n:\n\"detailed_matching_info\"\n,\n\"context\"\n:\n\"full_context_information\"\n}\n]\n,\n\"intermediateResults\"\n:\n[\n// Detailed evaluation steps\n]\n}\n}\nENABLED_FULL is useful for debugging and understanding exactly how guardrails are being applied, while ENABLED provides a simpler overview suitable for basic monitoring.\nI hope this is helpful. If yes, please upvote/accept my answer. Thank you."
}