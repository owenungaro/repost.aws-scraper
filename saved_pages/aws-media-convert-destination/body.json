{
  "body": "I have a usecase in which i want to store the output of the AWS elemental media convert via a put presigned url rather than giving the s3 path, could it be achieved?\n\nYes, you can use presigned URLs with AWS Elemental MediaConvert, but with some important considerations.\nAWS Elemental MediaConvert typically works with S3 destinations where you specify the S3 bucket path for your output files. The service has specific settings associated with S3 destinations, including options for access control, encryption, and storage class.\nFor your use case of using a presigned PUT URL instead of a direct S3 path, this isn't directly supported as a built-in feature of MediaConvert. MediaConvert is designed to work with S3 buckets as destinations where it has permissions to write the output files.\nHowever, you could implement a workflow where:\nMediaConvert outputs to an S3 bucket\nA Lambda function is triggered by the completion of the MediaConvert job\nThe Lambda function generates presigned URLs for the output files\nYour application uses these presigned URLs to access or move the files as needed\nAlternatively, if you need to upload files to S3 using presigned URLs as part of your workflow before or after the MediaConvert processing, you can generate presigned URLs programmatically using the AWS SDK. This would allow temporary, secure access for uploading content to S3 without requiring AWS credentials.\nPresigned URLs can be created with specific permissions (like PUT) and an expiration time, giving you control over how and when the URLs can be used to interact with your S3 objects.\nSources\nSearch - AWS Elemental MediaConvert API Reference\nAmazon S3 examples using SDK for JavaScript (v3) - AWS SDK Code Examples\nCreate a presigned URL for Amazon S3 using an AWS SDK - AWS SDK Code Examples\n\nHello,\nCurrently, AWS MediaConvert does not directly support using presigned URLs as output destinations. The service requires an S3 bucket as the destination for processed media files.\nHere are your available options:\nStandard S3 Output Approach\n:\n{\n\"Settings\"\n:\n{\n\"OutputGroups\"\n:\n[\n{\n\"OutputGroupSettings\"\n:\n{\n\"Type\"\n:\n\"FILE_GROUP_SETTINGS\"\n,\n\"FileGroupSettings\"\n:\n{\n\"Destination\"\n:\n\"s3://your-bucket/output/\"\n}\n}\n}\n]\n}\n}\nWorkaround Solution\n:\nIf you absolutely need to use presigned URLs, you can:\nimport\nboto3\nfrom\ndatetime\nimport\ndatetime\n,\ntimedelta\ndef\ncreate_workflow\n(\n)\n:\n# 1. Set up MediaConvert job with temporary S3 location\ns3_temp_location\n=\n\"s3://your-bucket/temp/\"\n# Create MediaConvert job\nmediaconvert_job\n=\n{\n\"Settings\"\n:\n{\n\"OutputGroups\"\n:\n[\n{\n\"OutputGroupSettings\"\n:\n{\n\"Type\"\n:\n\"FILE_GROUP_SETTINGS\"\n,\n\"FileGroupSettings\"\n:\n{\n\"Destination\"\n:\ns3_temp_location\n}\n}\n}\n]\n}\n}\n# 2. Set up S3 event notification for job completion\ns3_client\n=\nboto3\n.\nclient\n(\n's3'\n)\n# 3. Create Lambda function to handle the completed file\ndef\nhandle_completed_file\n(\nevent\n,\ncontext\n)\n:\n# Get file details from event\nbucket\n=\nevent\n[\n'Records'\n]\n[\n0\n]\n[\n's3'\n]\n[\n'bucket'\n]\n[\n'name'\n]\nkey\n=\nevent\n[\n'Records'\n]\n[\n0\n]\n[\n's3'\n]\n[\n'object'\n]\n[\n'key'\n]\n# Generate presigned URL for PUT\npresigned_url\n=\ns3_client\n.\ngenerate_presigned_url\n(\n'put_object'\n,\nParams\n=\n{\n'Bucket'\n:\n'destination-bucket'\n,\n'Key'\n:\nkey\n}\n,\nExpiresIn\n=\n3600\n# URL valid for 1 hour\n)\n# Copy file using presigned URL\nresponse\n=\nrequests\n.\nput\n(\npresigned_url\n,\ndata\n=\ns3_client\n.\nget_object\n(\nBucket\n=\nbucket\n,\nKey\n=\nkey\n)\n[\n'Body'\n]\n.\nread\n(\n)\n)\nAlternative Approach - API Gateway Integration\n:\ndef\ncreate_api_workflow\n(\n)\n:\n# 1. Create API Gateway endpoint\n# 2. Set up MediaConvert job as before\n# 3. Create Lambda function to handle API requests\ndef\napi_handler\n(\nevent\n,\ncontext\n)\n:\n# Generate presigned URL\npresigned_url\n=\ngenerate_presigned_url\n(\n)\n# Return URL in response\nreturn\n{\n'statusCode'\n:\n200\n,\n'body'\n:\njson\n.\ndumps\n(\n{\n'presigned_url'\n:\npresigned_url\n}\n)\n}\nBest Practices\n:\na.\nIAM Role Configuration\n:\n{\n\"Version\"\n:\n\"2012-10-17\"\n,\n\"Statement\"\n:\n[\n{\n\"Effect\"\n:\n\"Allow\"\n,\n\"Action\"\n:\n[\n\"s3:PutObject\"\n,\n\"s3:GetObject\"\n]\n,\n\"Resource\"\n:\n[\n\"arn:aws:s3:::your-bucket/*\"\n]\n}\n,\n{\n\"Effect\"\n:\n\"Allow\"\n,\n\"Action\"\n:\n[\n\"mediaconvert:CreateJob\"\n]\n,\n\"Resource\"\n:\n\"*\"\n}\n]\n}\nb.\nError Handling\n:\ndef\nhandle_mediaconvert_job\n(\njob_id\n)\n:\ntry\n:\n# Monitor job status\nmediaconvert\n=\nboto3\n.\nclient\n(\n'mediaconvert'\n)\nresponse\n=\nmediaconvert\n.\nget_job\n(\nId\n=\njob_id\n)\nif\nresponse\n[\n'Job'\n]\n[\n'Status'\n]\n==\n'COMPLETE'\n:\n# Handle successful completion\nprocess_output\n(\n)\nelif\nresponse\n[\n'Job'\n]\n[\n'Status'\n]\n==\n'ERROR'\n:\n# Handle error\nhandle_error\n(\nresponse\n[\n'Job'\n]\n[\n'ErrorMessage'\n]\n)\nexcept\nException\nas\ne\n:\nlogger\n.\nerror\n(\nf\"Error processing MediaConvert job:\n{\nstr\n(\ne\n)\n}\n\"\n)\nraise\nMonitoring and Cleanup\n:\ndef\ncleanup_temp_files\n(\n)\n:\ntry\n:\ns3_client\n=\nboto3\n.\nclient\n(\n's3'\n)\n# Delete temporary files older than 24 hours\nresponse\n=\ns3_client\n.\nlist_objects_v2\n(\nBucket\n=\n'your-bucket'\n,\nPrefix\n=\n'temp/'\n)\nfor\nobj\nin\nresponse\n[\n'Contents'\n]\n:\nif\n(\ndatetime\n.\nnow\n(\n)\n-\nobj\n[\n'LastModified'\n]\n.\nreplace\n(\ntzinfo\n=\nNone\n)\n)\n.\ndays\n>=\n1\n:\ns3_client\n.\ndelete_object\n(\nBucket\n=\n'your-bucket'\n,\nKey\n=\nobj\n[\n'Key'\n]\n)\nexcept\nException\nas\ne\n:\nlogger\n.\nerror\n(\nf\"Error cleaning up temp files:\n{\nstr\n(\ne\n)\n}\n\"\n)\nWhile direct presigned URL output isn't supported, these workarounds can help achieve similar functionality. Consider the additional complexity and maintenance requirements when implementing these solutions.\nI hope you find this helpful. If yes, please accept/upvote my answer. Thank you!"
}