{
  "body": "Hi all,\nI\u2019m running a basic NetworkPolicy test on EKS and it\u2019s not behaving as expected. I applied a deny-all ingress policy in the frontend namespace, but the pod is still accessible from another namespace.\nCreated namespaces:\n~/p/eks_network | 1 \u2771 kubectl create namespace frontend\n~/p/eks_network | 1 \u2771  kubectl create namespace backend\nnamespace/frontend created\nnamespace/backend created\nCreated Pods:\n~/p/eks_network \u2771 kubectl run nginx --image=nginx --restart=Never -n frontend\npod/nginx created\n~/p/eks_network \u2771 kubectl run busybox --image=busybox --restart=Never -n backend -- /bin/sh -c \"sleep 3600\"\npod/busybox created\n~/p/eks_network \u2771 kubectl get pod -o wide -n frontend\nNAME    READY   STATUS    RESTARTS   AGE   IP            NODE                                        NOMINATED NODE   READINESS GATES\nnginx   1/1     Running   0          19s   172.18.4.31   ip-172-18-4-62.us-west-2.compute.internal\n<none>\n<none>\n~/p/eks_network 3.9s \u2771 cat deny-all-ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\nname: deny-all\nnamespace: frontend\nspec:\npodSelector: {}\npolicyTypes:\nIngress\n~/p/eks_network \u2771 kubectl exec -n backend busybox -- wget -qO-\nhttp://172.18.4.31\n<title>Welcome to nginx!</title>\n~/p/eks_network 10.3s \u2771 kubectl apply -f deny-all-ingress.yaml\nnetworkpolicy.networking.k8s.io/deny-all created\n~/p/eks_network \u2771 kubectl exec -n backend busybox -- wget -qO-\nhttp://172.18.4.31\n<title>Welcome to nginx!</title>\nI made sure NETWORK_POLICY is enabled:\n~/p/eks_network \u2771 kubectl -n kube-system get daemonset aws-node -o json | jq '.spec.template.spec.containers[0].env' | grep -C 5 ENABLE_NETWORK\n{\n\"name\": \"ENABLE_NETWORK_POLICY\",\n\"value\": \"true\"\n}\nI also tried deploying using 'Deployments' and that didnt work either.\nI followed these:\nhttps://docs.aws.amazon.com/eks/latest/userguide/cni-network-policy.html\nhttps://docs.aws.amazon.com/eks/latest/best-practices/network-security.html#_service_mesh_policy_enforcement_or_kubernetes_network_policy\nThanks\n\nTo enforce Netwrok Policy on EKS , you must install a compatible CNI/network policy provider and the most common one is Calico\n\nBased on your description, it appears that network policies aren't working properly despite having ENABLE_NETWORK_POLICY set to \"true\" in your EKS cluster.\nThere are a few things to check when troubleshooting network policies in EKS:\nFirst, ensure you're using the correct configuration format for enabling network policies. For VPC CNI v1.18 and newer, the recommended approach is to use a configuration schema like this:\n{\n\"enableNetworkPolicy\": \"true\",\n\"nodeAgent\": {\n\"healthProbeBindAddr\": \"8163\",\n\"metricsBindAddr\": \"8162\"\n}\n}\nVerify that the network policy CRD is installed by checking if the CRD\npolicyendpoints.networking.k8s.aws\nexists.\nCheck the logs of the network policy agent on your worker nodes. These logs are typically found at\n/var/log/aws-routed-eni/network-policy-agent.log\n.\nMake sure your network policy syntax is correct. The policy you've defined looks correct for denying all ingress traffic.\nConsider upgrading your VPC CNI version. There have been issues with network policies in older versions that were fixed in newer releases. For example, some users have reported success after upgrading from v1.18.1 to v1.18.3.\nIf you've verified all these points and network policies still don't work, you might need to update your VPC CNI addon to a newer version. Network policy support has been improved in recent releases of the VPC CNI plugin.\nSources\nEKS v1.30 VPC-CNI v1.18.1 Network Policies are not working | AWS re:Post\nIssue with EKS VPC CNI Addon: Pods Can Still Communicate with Internet Despite Deny All Egress Network Policy | AWS re:Post\n\nThis still doesnt work and you havent added much."
}