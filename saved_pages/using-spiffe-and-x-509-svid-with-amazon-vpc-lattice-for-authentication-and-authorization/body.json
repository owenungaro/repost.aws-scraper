{
  "body": "This article shows a step by step example of how to use SPIFFE-SVID with VPC Lattice for AuthN/Z\n\nCo-authored with Mohak Kohli, Sr. SDE, VPC Lattice\nIntroduction\nAs applications grow more distributed, managing how services identify and trust each other becomes more challenging. Amazon VPC Lattice helps with routing and access control across services, but it still needs a way to verify the identity of a client. That\u2019s where SPIFFE comes in. It defines a standard way to issue strong, workload-based identities that do not rely on IPs or shared secrets. In this post, we show how you can use SPIFFE-issued identities with VPC Lattice to control which services can talk to each other. We\u2019ll walk through how to plug SPIRE (SPIFFE Runtime Identity) into your environment, map identities to Lattice policies, and build a setup that\u2019s simple, scalable, and secure.\nSPIFFE\nSPIFFE (Secure Production Identity Framework for Everyone) is a set of open-source standards for securely identifying software systems in dynamic and heterogeneous environments.  And today, many systems have already adopted SPIFFE for their workloads running in Kubernetes platforms or on EC2. The workload can obtain a SPIFFE ID which is a string that uniquely and specifically identifies the workload.  Workload can authenticate itself with other systems through SVID - SPIFFE Verifiable Identity Document.\nThere are 2 forms of SVID:\nX.509-SVID\nJWT-SVID\nHere is an example of X.509-SVID, workload identity\nCertificate:\n  Data:\n    Version: 3 (0x2)\n    Serial Number:\n      ...\n  Signature Algorithm: ecdsa-with-SHA256\n    Issuer: C=US, O=SPIFFE\n    Subject: C=us, O=SPIFFE\n  X509v3 extensions:\n    ...\n    X509v3 Subject Alternative Name:\n      URI:spiffe://example.org/service/orders\nCheck out the SPIFFE documentation for details on the SPIFFE-SVID X509:\nhttps://github.com/spiffe/spiffe/blob/main/standards/X509-SVID.md\nAmazon VPC Lattice auth policies\nVPC Lattice auth policies are IAM policy documents that you attach to service networks or services to control whether a specified principal has access to a group of services or specific service. You can attach one auth policy to each service network or service that you want to control access to. Auth policies are different from IAM identity-based policies. IAM identity-based policies are attached to IAM users, groups, or roles and define what actions those identities can do on which resources. Auth policies are attached to services and service networks. VPC Lattice auth policies are specified using the same syntax as IAM policies. For more information, see\nIdentity-based policies and resource-based policies in the IAM User Guide\n.\nAn auth policy contains the following elements:\nPrincipal\n\u2013 The person or application who is allowed access to the actions and resources in the statement. In an auth policy, the principal is the IAM entity who is the recipient of this permission. The principal is authenticated as an IAM entity to make requests to a specific resource, or group of resources as in the case of services in a service network. You must specify a principal in a resource-based policy. Principals can include accounts, users, roles, federated users, or AWS services. For more information, see\nAWS JSON policy elements: Principal in the IAM User Guide\n.\nEffect\n\u2013 The effect when the specified principal requests the specific action. This can be either Allow or Deny. By default, when you enable access control on a service or service network using IAM, principals have no permissions to make requests to the service or service network.\nActions\n\u2013 The specific API action for which you are granting or denying permission. VPC Lattice supports actions that use the vpc-lattice-svcs prefix. For more information, see\nActions defined by Amazon VPC Lattice Services in the Service Authorization Reference\n.\nResources\n\u2013 The services that are affected by the action.\nCondition\n\u2013 Conditions are optional. You can use them to control when your policy is in effect. For more information, see\nCondition keys for Amazon VPC Lattice Services in the Service Authorization Reference.\nFor more information, see\nControl access to VPC Lattice services using auth policies in the VPC Lattice User Guide\n.\nUsing X.509-SVID and AWS IAM Roles Anywhere\nAWS IAM Roles Anywhere\nallow your workloads to get temporary AWS credentials using X.509 Certificates issued by your own Public Key Infrastructure (PKI).\nHere are the high-level steps:\nSPIRE issues X.509-SVIDs to your workloads.\nThese certificates follow the\nSPIFFE spec\nand include identities like: spiffe://example.org/service/\nExport your SPIFFE CA (the CA key pair used by SPIRE) and import it into AWS ACM as a trusted source.\nCreate a trust anchor in IAM Roles Anywhere pointing to that ACM CA.\nCreate IAM Role and policy that allows VPC Lattice services invocation: vpc-lattice:InvokeService.\nCreate IAM Roles Anywhere profile that maps SPIFFE identity SANs (Subject Alternative Names) to the Role.\nYour workloads call AWS STS via IAM Roles Anywhere and present their SPIFFE X.509-SVID. If it matches the trust policy, they get temporary credentials.\nUsing the temporary credentials, workloads sign their requests using SIGv4 and invoke Services through VPC Lattice\nSetup\nLet\u2019s assume two VPC Lattice services, \u201cBilling\u201d and \u201cRates\u201d. These services need to be securely accessed by \u201cOrders\u2019 and \u201dReviews\u201c services. I use multiple accounts and VPCs just to showcase the possibility of using this setup, but they are not required.\nHere is the security policy and identities setup:\n\u201cOrders\u201d has X.509 Certificate which contains SPIFFE ID URI:spiffe://example.org/service/orders\n\u201cReviews\u201d has X.509 Certificate which contains SPIFFE ID URI:spiffe://example.org/service/reviews\nVPC Lattice Auth policy has the following rules:\nworkload \u201cOrders\u201d is able to access \u201cRates\u201d and  \u201cBilling\u201d\nworkload \u201cReviews\u201d is only able to access \u201cRates\u201d, and not \u201cBilling\u201d\nother workloads not under \u201cspiffe/example.org\u201d cannot access \u201cBilling\u201d or \u201cRates\u201d\nService-owner steps\nStep 1: Create Lambda functions representing \u201cBilling\u201d and \u201cRates\u201d services\n\u201cBilling\u201d lambda function for VPC Lattice service \u201cBilling\u201d target group\nFor demo purpose, we create a lambda target group for \u201cBilling\u201d service.  So, when client invoke \u201cBilling\u201d service using path \u201c/lambda\u201d, the following function is called. Recently, we have enhanced VPC Lattice to pass along caller\u2019s identity to backend, such as the workload X.509-SVID.  In the lambda use case, all of them are encoded in the lambda event structure\nimport json\n\ndef lambda_handler(event, context):\n    \n    response = {\n      \"statusCode\": 200,\n      \"statusDescription\": \"200 OK\",\n      \"isBase64Encoded\": False,\n      \"headers\": {\n        \"Content-Type\": \"text/html; charset=utf-8\",\n        \"Server\": \"Lambda\"\n      }\n    }\n    response['body'] = json.dumps({\n        \"message\": \"HelloWorld from Billing Lambda\",\n        \"event\": event,\n    })\n \n    return response\n\u201cRates\u201d Lambda Function for Lattice \u201cRates\u201d Service\nWe also created a lambda target group for \u201cRates\u201d VPC Lattice service.  So, when a client invokes \u201cRates\u201d service using path \u201c/lambda\u201d, the following function is called.\nimport json\n\ndef lambda_handler(event, context):\n  \n    response = {\n      \"statusCode\": 200,\n      \"statusDescription\": \"200 OK\",\n      \"isBase64Encoded\": False,\n      \"headers\": {\n        \"Content-Type\": \"text/html; charset=utf-8\",\n        \"Server\": \"Lambda\"\n      }\n    }\n    response['body'] = json.dumps({\n        \"message\": \"HelloWorld from Rates Lambda\",\n        \"event\": event,\n    })\n    \n    return response\nStep 2: Create VPC Lattice services \u201cBilling\u201d and \u201cRates\u201d, with the respective Lambda functions as targets\nVPC Lattice service \u201cBilling\u201d\nHere is the VPC Lattice service definition for \u201cBilling\u201d\nVPC Lattice service \u201cRates\u201d\nHere is the VPC Lattice service definition for \u201cRates\u201d\nStep 3: Configure VPC Lattice Auth Policies for \u201cBilling\u201d and \u201cRates\u201c\nFor this post we are using VPC Lattice service-level Auth policies. You can also configure these at the VPC Lattice service network level, if you want.\nBilling can only be accessed by \u201cOrders\u201d\n{\n    \"Statement\": {\n        \"Effect\": \"Allow\",\n        \"Principal\": \"*\",\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"StringEquals\": {\n                \"aws: PrincipalTag/x509SAN/URI\": \"spiffe://example.org/service/orders\",\n                \"aws: PrincipalARN\": \"arn:aws:iam::ACCOUNT-ID:role/spiffe-workload-roleanywhere\"\n            }\n        },\n        \"Action\": \"vpc-lattice-svcs:Invoke\"\n    }\n}\nRates can be accessed by Orders and Reviews\n{\n    \"Statement\": {\n        \"Effect\": \"Allow\",\n        \"Principal\": \"*\",\n        \"Resource\": \"*\",\n        \"Condition\": {\n            \"StringEquals\": {\n                \"aws: PrincipalTag/x509SAN/URI\": [\n                        \"spiffe://example.org/service/orders\",\n                        \"spiffe://example.org/service/reviews\"\n                ],\n                \"aws: PrincipalARN\": \"arn:aws:iam::ACCOUNT-ID:role/spiffe-workload-roleanywhere\"\n            }\n        },\n        \"Action\": \"vpc-lattice-svcs:Invoke\"\n    }\n}\nSecurity-owner steps\nStep 4: Create Trust Anchor Using external root CA\nCreate IAM anywhere Trust Anchor using an external Certificate Authority (CA):\nStep 5: Create and configure IAM Role for Roles Anywhere\nCreate an IAM Anywhere Role\nFor permissions, we selected\nVPCLatticeServicesInvokeAccess\nStep 6: Create an IAM Anywhere Profile that maps the X509-SVID SAN (Subject Alternative Name) to the IAM Role\nStep 7: Assign X509-SVID certificates to \u201cOrders\u201d and \u201cReviews\u201d\nCertificate for \u201cOrders\u201d\nopenssl x509 -text -in ./orders.pem \nCertificate:\n Data:\n Version: 3 (0x2)\n Serial Number:\n [Output omitted]\n Signature Algorithm: [Output omitted]\n Issuer: C=US, ST=WA, L=Seattle, O=Exmaple, OU=IAM, CN=Roles Anywhere CA\n Validity\n [Output omitted]\n Subject: C=US, ST=WA, L=Seattle, O=Example, OU=IAM, CN=Roles Anywhere Client\n Subject Public Key Info:\n Public Key Algorithm: id-ecPublicKey\n Public-Key: (384 bit)\n pub: \n[Output omitted]\n ASN1 OID: secp384r1\n NIST CURVE: P-384\n X509v3 extensions:\n X509v3 Subject Key Identifier: \n [Output omitted]\n X509v3 Authority Key Identifier: \n keyid:[Output omitted]\n\n X509v3 Basic Constraints: critical\n CA:FALSE\n X509v3 Key Usage: critical\n Digital Signature\n X509v3 Extended Key Usage: \n TLS Web Client Authentication\n X509v3 Subject Alternative Name: \n URI:spiffe/example.org/service/orders\n Signature Algorithm: ecdsa-with-SHA512\n [Output omitted]\n-----BEGIN CERTIFICATE-----\n[Output omitted]\n-----END CERTIFICATE-----\nCertificate for \u201cReviews\u201c\nopenssl x509 -text -in ./reviews.pem \nCertificate:\n Data:\n Version: 3 (0x2)\n Serial Number:\n [Output omitted]\nSignature Algorithm: [Output omitted]\n Issuer: C=US, ST=WA, L=Seattle, O=Example, OU=IAM, CN=Roles Anywhere CA\n Validity\n [Output omitted]\n Subject: C=US, ST=WA, L=Seattle, O=Example, OU=IAM, CN=Roles Anywhere Client\n Subject Public Key Info:\n Public Key Algorithm: id-ecPublicKey\n Public-Key: (384 bit)\n pub: \n [Output omitted]\n ASN1 OID: secp384r1\n NIST CURVE: P-384\n X509v3 extensions:\n X509v3 Subject Key Identifier: \n [Output omitted]\n X509v3 Authority Key Identifier: \n keyid:[Output omitted]\n\n X509v3 Basic Constraints: critical\n CA:FALSE\n X509v3 Key Usage: critical\n Digital Signature\n X509v3 Extended Key Usage: \n TLS Web Client Authentication\n X509v3 Subject Alternative Name: \n URI:spiffe/example.org/service/reviews\n Signature Algorithm: ecdsa-with-SHA512\n [Output omitted]\n-----BEGIN CERTIFICATE-----\n[Output omitted]\n-----END CERTIFICATE-----\nClient-side steps\nStep 8: Get temporary security credentials from IAM Roles Anywhere\nTo obtain temporary security credentials from AWS Identity and Access Management Roles Anywhere, use the credential helper tool that IAM Roles Anywhere provides. This tool is compatible with the credential_process feature available across the language SDKs. When used with an AWS SDK, these credentials automatically refresh before they expire, requiring no additional implementation for credential renewal. The helper manages the process of creating a signature with the certificate and calling the endpoint to obtain session credentials; it returns the credentials to the calling process in a standard JSON format. More details\nhere\n.\n../aws_signing_helper credential-process \\\n--certificate ./orders.pem \\\n--private-key ./client.key \\\n--profile-arn <ARN of the IAM ROLES ANYWHERE PROFILE YOU CREATED> \\\n--role-arn <ARN of the IAM ROLE FOR ROLES ANYWHERE YOU CREATED> \\\n--trust-anchor-arn <ARN OF TRUST ANCHOR YOU CREATED>\n../aws_signing_helper credential-process \\\n--certificate ./reviews.pem \\\n--private-key ./client.key \\\n--profile-arn <ARN of the IAM ROLES ANYWHERE PROFILE YOU CREATED> \\\n--role-arn <ARN of the IAM ROLE FOR ROLES ANYWHERE YOU CREATED> \\\n--trust-anchor-arn <ARN OF TRUST ANCHOR YOU CREATED>\nStep 9: Test access\nNote: I use some basic client code to sign requests using SIGv4. You can find examples here:\nhttps://github.com/aws-samples/sigv4-signing-examples\nRequest from Orders to Billing - AUTHORIZED\n./sigv4_client --http-method GET \\\n--lattice-dns http://billing-default-038ac14ba[Output omitted]6.7d67968.vpc-lattice-svcs.us-west-2.on.aws/lambda\n\n# Response from Billing Lambda \n############## response ####################\n{\n...\n \"method\": \"GET\",\n \"path\": \"/lambda\",\n \"requestContext\": {\n \"identity\": {\n \"principal\": \"arn:aws:sts::[Output omitted]:assumed-role/spiffe-workload-roleanywhere/[Output omitted]\",\n \"sessionName\": \"[Output omitted]\",\n \"sourceVpcArn\": \"arn:aws:ec2:us-west-2:[Output omitted]:vpc/vpc-05c7[Output omitted]\",\n \"type\": \"AWS_IAM\",\n \"x509IssuerOu\": \"IAM\",\n \"x509SanUri\": \"spiffe://example.org/service/orders\",\n \"x509SubjectCn\": \"Roles Anywhere Client\"\n },\n \"region\": \"us-west-2\",\n \"serviceArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:service/svc-038a[Output omitted]\",\n \"serviceNetworkArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:servicenetwork/sn-0df021[Output omitted]\",\n \"targetGroupArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:targetgroup/tg-0b3f71[Output omitted]\",\n \"timeEpoch\": \"[Output omitted]\"\n },\n \"version\": \"2.0\"\n },\n \"message\": \"HelloWorld from Billing Lambda\"\n}\nRequest from Orders to Rates - AUTHORIZED\n./sigv4_client --http-method GET \\\n --lattice-dns http://rates-default-02a0f6dbe800130d5.7d67968.vpc-lattice-svcs.us-west-2.on.aws/lambda\n \n# Response from Rates Lambda\n{\n... \n\"method\": \"GET\",\n \"path\": \"/lambda\",\n \"requestContext\": {\n \"identity\": {\n \"principal\": \"arn:aws:sts::[Output omitted]:assumed-role/spiffe-workload-roleanywhere/[Output omitted]\",\n \"sessionName\": \"[Output omitted]\",\n \"sourceVpcArn\": \"arn:aws:ec2:us-west-2:[Output omitted]:vpc/vpc-05c7322a3[Output omitted]\",\n \"type\": \"AWS_IAM\",\n \"x509IssuerOu\": \"IAM\",\n \"x509SanUri\": \"spiffe://example.org/service/orders\",\n \"x509SubjectCn\": \"Roles Anywhere Client\"\n },\n \"region\": \"us-west-2\",\n \"serviceArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:service/svc-02a0f6d[Output omitted]\",\n \"serviceNetworkArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:servicenetwork/sn-0df021[Output omitted]\",\n \"targetGroupArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:targetgroup/tg-06d1d[Output omitted]\",\n \"timeEpoch\": \"[Output omitted]\"\n },\n \"version\": \"2.0\"\n },\n \"message\": \"HelloWorld from Rates Lambda\"\n}\nRequest from Reviews to Rates - AUTHORIZED\n./sigv4_client --http-method GET \\\n --lattice-dns http://rates-default-02a0f6dbe800130d5.7d67968.vpc-lattice-svcs.us-west-2.on.aws/lambda\n\n# response\n{\n \"event\": {\n...\n \"method\": \"GET\",\n \"path\": \"/lambda\",\n \"requestContext\": {\n \"identity\": {\n \"principal\": \"arn:aws:sts::[Output omitted]:assumed-role/spiffe-workload-roleanywhere/00d9fa[Output omitted]\",\n \"sessionName\": \"[Output omitted]\",\n \"sourceVpcArn\": \"arn:aws:ec2:us-west-2:[Output omitted]:vpc/vpc-05c7322a[Output omitted]\",\n \"type\": \"AWS_IAM\",\n \"x509IssuerOu\": \"IAM\",\n \"x509SanUri\": \"spiffe://example.org/service/reviews\",\n \"x509SubjectCn\": \"Roles Anywhere Client\"\n },\n \"region\": \"us-west-2\",\n \"serviceArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:service/svc-02a0f[Output omitted]\",\n \"serviceNetworkArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:servicenetwork/sn-0df0[Output omitted]\",\n \"targetGroupArn\": \"arn:aws:vpc-lattice:us-west-2:[Output omitted]:targetgroup/tg-06d[Output omitted]\",\n \"timeEpoch\": \"[Output omitted]\"\n },\n \"version\": \"2.0\"\n },\n \"message\": \"HelloWorld from Rates Lambda\"\n}\n#\nRequest from Reviews to Billing - NOT AUTHORIZED\n./sigv4_client --http-method GET \\\n> --lattice-dns http://billing-default-038ac1[Output omitted].7d67968.vpc-lattice-svcs.us-west-2.on.aws/lambda\n\n############## response ####################\nAccessDeniedException: User: arn:aws:sts::[Output omitted]:assumed-role/spiffe-workload-roleanywhere/[Output omitted] is not authorized to perform: vpc-lattice-svcs:Invoke on resource: arn:aws:vpc-lattice:us-west-2:[Output omitted]:service/svc-038ac14[Output omitted]/lambda because no service-based policy allows the vpc-lattice-svcs:Invoke action"
}