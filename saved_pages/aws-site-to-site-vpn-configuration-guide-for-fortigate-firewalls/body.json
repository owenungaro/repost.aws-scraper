{
  "body": "This guides users through the process of configuring a Site-to-Site VPN connection between an AWS Transit Gateway and a FortiGate firewall.\n\nIntroduction\nThis article guides you through configuring a\nSite-to-Site VPN\nbetween an\nAWS Transit Gateway\nwith a VPN attachment and a\nFortinet FortiGate firewall\n. It will also cover exchanging IPv4 routes using BGP to minimize manual effort and control routing advertising using BGP policies. We recommend you use BGP-capable devices, when available, because the BGP protocol offers robust capabilities to assist failover to the second VPN tunnel if the first tunnel goes down.\nThis guide covers:\nCreating a Customer Gateway on AWS\nCreating a Site-to-Site VPN connection\nCreating a Site-to-Site VPN connection on a Fortinet FortiGate firewall\nCreating policy rules that are required to establish a Site-to-Site VPN connection to AWS\nEstablishing BGP sessions between your Transit Gateway (TGW) and a FortiGate firewall\nVerifying the connectivity between AWS and the FortiGate firewall across the VPN tunnel\nPre-requisites\nFamiliarity with\nAWS Virtual Private Cloud (VPC)\n, Transit Gateway, as well as VPC and TGW route tables.\nA TGW configured in your AWS account.\nVPCs attached to the TGW.\nFamiliarity with BGP. For more information on BGP, please visit this\nguide\n.\nA Fortinet FortiGate firewall running FortiOS. This guide was written using FortiGate firewalls running FortiOS v7.4.7.\nOne FortiGate firewall interface that is configured with a static and publicly routable IPv4 address.\nA default route configured on the FortiGate firewall pointing to the internet.\nNote: the outside IPv4 address can be private if it is behind a Network Address Translation (NAT) device. In that case, the VPN traffic will use UDP port 4500 instead of the traditional UDP port 500. Further configuration will be required to\nsupport using a private IP address\nthat is not covered in this guide.\nGuide Architecture Overview\nFigure 1: Guide architecture overview\nThe above diagram summarizes the architecture used in this guide. In the guide, we have 3 VPCs configured with IPv4 CIDRs. The 3 VPCs are attached to the transit gateway. Each VPC has applications running on port 80 with no access to the internet. The VPC CIDR blocks are configured as follows: VPC A - 10.50.0.0/16, VPC B - 10.60.0.0/16, VPC C - 10.70.0.0/16. The on-premises subnet is configured with a CIDR of 10.1.4.0/22.\nPart 1: Configure the Customer Gateway on the AWS console\nNavigate to\nVPC > Virtual Private Network > Customer Gateways\nSelect\nCreate customer gateway\n:\nEnter the customer gateway\nName\ntag.\nEnter a\nBGP ASN\n(autonomous system number). We are using ASN\n65501\nfor the FortiGate Firewall (Customer Gateway) and\n64512\nfor the Transit gateway. For more details about using a BGP ASN on with an AWS Site-to-Site VPN, please refer to this\nguide\n.\nEnter the\nPublic\nIP address\nof the FortiGate firewall. In this guide, we are using interface Ethernet 1/1 on the FortiGate firewall.\nIn this guide, we will use the pre-shared key method for authentication. Do not select a certificate ARN if you are following this guide. For more details about using certificate-based authentication with a Site-to-Site VPN, please refer to this\nguide\n.\nWhen finished, select\nCreate customer gateway.\nFigure 2: Creating the customer gateway\nPart 2: Configure the AWS Site-to-Site VPN connection and associate it with the Transit Gateway\nIn this section, we will configure the VPN tunnels. AWS recommends using Internet Key Exchange version 2 (IKEv2) where possible, because of the lower overhead in establishing a tunnel and enhanced health check functionality, as compared to IKEv1. For more information on the benefits of IKEv2 with FortiGate, refer to this\nguide\n.\nNavigate to\nVPC > Virtual Private Network (VPN) > Site-to-Site VPN connections\nSelect\nCreate VPN Connection\n:\nEnter the VPN connection\nName\nSelect\nTransit gateway\nin\nTarget gateway type\nand select the desired transit gateway.\nIn the\nCustomer gateway\nsection, choose\nexisting\nand select the customer gateway that was created in Part 1.\nIn the\nRouting options\nsection, choose\nDynamic (require BGP)\n.\nIn the\nTunnel inside IP version,\nselect\nIPv4\n.\nUsing an Accelerated Site-to-Site VPN connection is out of scope for this guide. For more details,\nrefer to the User Guide\n.\nFigure 3: Specifying the VPN connection details\nExpand the Tunnel 1 and Tunnel 2 options section.\nFor the\nLocal and Remote IPv4 network CIDR\nsections, leave the default 0.0.0.0/0. This will be controlled by firewall policy and routing advertisements, addressed in a later section of this guide.\nEnable the tunnel activity log and tunnel endpoint lifecycle control.\nAWS Site-to-Site VPN logs\nprovide you with deeper visibility into your Site-to-Site VPN deployments. Site-to-Site VPN connection logs that provide details on IP Security (IPsec) tunnel establishment, IKE negotiations, and dead peer detection (DPD) protocol messages.\nTunnel endpoint lifecycle control\nprovides control over the schedule of endpoint replacements.\nFigure 4: Enable VPN tunnel logging\nWe recommend being more selective with IKE Phase 1 and Phase 2 parameters. These options can be modified by selecting \"Edit tunnel (#) options\". Your decisions will depend on your specific compliance and security requirements. For a list of supported parameters, please refer to the\nVPN tunnel options documentation.\nEnsure modifications in this section are applied to\nboth\nVPN tunnels.\nFigure 5: Specify advanced VPN tunnel IKEv2 and IPSEC options\nEncryption algorithms\nAWS supports both AES128-GCM-16 and AES256-GCM-16. We recommend AES256-GCM-16 where supported and within requirements.\nIntegrity algorithms\nIntegrity algorithms ensure the sender\u2019s identity and also ensure that the message has not been modified in transit. Select your SHA algorithm based on your customer gateway device support and security requirements. If you don\u2019t have specific requirements, then we recommend using SHA-384 because of its performance and security characteristics.\nDH group numbers\nA Diffie-Hellman (DH) group determines how key material is generated for encryption. As with SHA, we recommend you pick DH groups based on compatibility with your customer gateway device and your security requirements. If you don\u2019t have specific requirements, then we recommend using DH group 20 because of its security characteristics.\nIKE version\nTo establish an IPsec tunnel, the IKE protocol is used. IKE has two iterations: IKEv1 and IKEv2. We recommend using IKEv2, as it gives some key performance optimizations over IKEv1.\nFor more details on how AWS secures the IPsec tunnel and the shared responsibility model, please refer to this blog post,\nAWS Site-to-Site VPN, choosing the right options to optimize performance\n.\nAfter the tunnel creation, a VPN connection summary will be displayed.\nFigure 6: VPN connection summary\nPart 3: Configure the Site-to-Site VPN connection on the FortiGate firewall\nIn this section, we will guide you on how to configure the FortiGate tunnel.\nIf you are using a virtual FortiGate firewall, all of the configuration in this section\nmust\nbe performed from the root Virtual Domain (VDOM).\nFor more information on VDOM types,\nvisit this guide\n.\nThe VPN IP address and PSK details can be found in the downloadable sample configuration file available in the AWS console. The configuration file can be downloaded by navigating to\nVPC > Site-to-Site VPN Connections\n. After selecting the correct VPN tunnel from the list, navigate to the\nTunnel details\ntab. You will need to make note of the following information for each VPN tunnel:\nOutside IP address\nInside IPv4 CIDR details (available in the downloadable configuration file)\nLocal IP: 169.254.x.x/30\nRemote IP: 169.254.x.x/30\nPre-shared authentication (available in the downloadable configuration file).\nFigure 7: VPN connection inside IPv4 CIDR blocks\nIn the FortiGate firewall, navigate to\nVPN > IPsec Wizard\n.\nEnter a name for the VPN tunnel, and under Template type, select\nCustom.\nTake note of the VPN tunnel name as it will be used later in the configuration.\nFigure 8: FortiGate VPN Creation Wizard\nIn the\nRemote Gateway\nfield, select\nStatic IP Address\nand enter the outside IP address of the AWS VPN tunnel. Set the\nInterface\nto the physical interface used as WAN interface (wan1 in the example below).\nEnsure the remaining settings are configured in the Network section as follows:\nNAT Traversal: Disabled\nDead Peer Detection: On Idle\nFigure 9: FortiGate New VPN Tunnel\nIn the\nAuthentication\nsection, enter the pre-shared key value for Tunnel 1 and select IKE Version 2.\nFigure 10: FortiGate VPN connection authentication\nFor the Phase 1 proposal configuration settings, ensure that they match the supported encryption and authentication algorithms that you selected during the AWS Site-to-site VPN setup configuration.\nIn the Diffie-Hellman Group field, select 20.\nSet the value of the Key Lifetime (seconds) to 28800.\nFigure 11: FortiGate advanced phase 1 encryption settings\nFor the phase two configuration, we will need to set the phase 2 selectors. Since we are using a dynamic Site-to-Site VPN, we will be using a broad traffic selector to ensure coverage for all IP prefixes. To accomplish this, we will be configuring the following parameters for local address and remote address:\nLocal Address: 0.0.0.0.0/0\nRemote Address: 0.0.0.0/0\nTraffic can be limited using dynamic routing, and by setting firewall policies to restrict access.\nIn the\nPhase 2 Proposal\nsection, expand the\nAdvanced\nsection and set the following parameters:\nEncryption and Authentication should match the settings configured on the AWS VPN tunnel (AES256 and SHA256 in this example)\nSelect \u2018Enable Replay Detection\u2019\nSelect \u2018Enable Perfect Forward Secrecy (PFS)\u2019\nDiffie-Hellman Group: select \u201820\u2019 (in this example)\nSelect \u2018Auto-negotiate\u2019\nKey Lifetime: 3600 seconds\nSelect\nOK\nto exit the New VPN Tunnel section.\nFigure 12: FortiGate phase 2 settings\nRepeat these same steps to configure the second VPN tunnel.\nPart 4: Create firewall objects and firewall policies on the FortiGate\nIn this section we will be configuring firewall objects on the FortiGate. These firewall objects will then be referenced in the FortiGate firewall policies. The firewall policy is required to allow for the VPN to be established and to allow traffic into the tunnel.\nIn the\nPolicy & Objects\nsection, select Addresses and create a new firewall object and specify the AWS VPC CIDR, under interface select \"any\" (default value), then select OK. Please note that this guide uses a summary prefix (10.0.0.0/9) that includes all 3 of the AWS VPCs CIDRs for simplicity. Please make sure you review and follow your organization\u2019s security standards.\nFigure 13: FortiGate address object creation\nCreate a firewall policy for the outgoing traffic. Go to\nPolicy & Objects > Firewall Policy\n, and create a new policy. Enter a name for the policy and select the appropriate incoming/outgoing interfaces, source/destination address objects, and service objects. For the destination object we will be referencing the firewall object we had previously created. FortiOS will use the specified source and destination values to decide if traffic is allowed or denied. This configuration uses BGP to exchange routing information between on-premises and AWS. In this case, disabling NAT is required to avoid any routing issues.\nFigure 14: FortiGate new policy creation\nAdd the second VPN tunnel interface to this firewall policy. Under\nPolicy & Objects > Firewall Policy\n, select the policy that was just created, choose \"More\" and select \"Edit in CLI\" to bring up the terminal session.\nFigure 15: Choosing the \"Edit in CLI\" option for the FortiGate firewall policy\nModify the firewall policy by adding both VPN tunnel names to the dstintf statement. Note: You must enter the \"end\" command in order for changes to be committed.\nset dstinf \"aws-vpn-1\" \"aws-vpn-2\"\nFigure 16: Editing the FortiGate firewall policy using the CLI\nFollow the same steps to create another firewall policy for incoming traffic, mirroring the outgoing firewall policy configuration.\nset srcint \"aws-vpn-1\" \"aws-vpn-2\"\nFigure 17: Setting the source interface for the FortiGate firewall policy\nYour policy should be similar to the screenshot below\nFigure 18:\nConfirmation of the FortiGate firewall policy settings\nPart 5: Tunnel Interface Configuration\nConfiguring the Tunnel interfaces\nIn this section we will configure the tunnel interface. All VPN traffic will be routed through the tunnel interfaces.\nNavigate to\nNetwork > Interfaces\n. Expand the Physical Interface section, then expand the section for your WAN port.\nFigure 19: Selecting the wan1 interface on the FortiGate firewall\nConfigure the tunnel interface using the Inside IPv4 CIDR details that were previously gathered in Part 3 of this guide. This information is available in the VPN configuration file, and in the AWS Console under\nVPC > Site-to-Site VPN Connections\nin the\nTunnel Details\ntab**.**\nSelect PING in the Administrative Access section to allow for troubleshooting and validation during the testing phase. Consider disabling this afterwards and follow your organization\u2019s security standards.\nFigure 20: Configuring the inside tunnel IP address on the FortiGate firewall\nRepeat the same steps to configure the tunnel interface for the second VPN tunnel.\nPart 6: BGP Routing Configuration\nIn this guide, we have enabled equal-cost multi-path routing (ECMP) allowing the ForiGate to utilize two VPN tunnel simultaneously. This configuration offers two key benefits:\nIncreased network throughput by using both tunnels at the same time\nBetter resource utilization by distributing traffic across both paths\nFor details on configuring ECMP on your FortiGate firewall, please refer to\nthis guide\n. For more information on AWS Site-to-Site VPN bandwidth and throughput specifications, review this\ndocumentation\n.\nStep 1: Enable ECMP on the Transit Gateway (optional)\nIf using the ECMP feature, you must also enable ECMP on your transit gateway by selecting the\nVPN ECMP support\noption, as shown below.\nFigure 21: Configuring the VPN ECMP support option on the TGW\nStep 2: Configure BGP on the FortiGate\nThis guide uses BGP within the tunnel to exchange prefixes between the Transit Gateway and the FortiGate VM. Note that the local BGP ASN of the Customer Gateway is configured with a value of 65501 by default. We will configure two BGP peering sessions, one for each tunnel interface.\nNavigate to\nNetwork > BGP\n, enter the BGP ASN and a Router ID. In this guide, we are using the IP address of the customer gateway as the Router ID. You may select your own, as long as it is uniquely assigned to your FortiGate device. In the\nNeighbors\nsection, select\nCreate New\n.\nFigure 22: Configuring the Local AS and Router ID on the FortiGate firewall\nIn the\nAdd Neighbor\nsection, enter the IP address for the remote tunnel interface and the \"Remote AS\" as specified in the Inside IPv4 CIDR details that were gathered in Step 3. Choose Apply to go back to the Local BGP Options section.\nNotes:\nWe are not entering a value for \"Local AS\" here as we have already set a value for \"Local AS\" at the global BGP level. The local AS under a BGP neighbor is primarily used to handle complex peering scenarios (such as AS number conflicts or multi-homing requirements). Review this\ntechnical article\nfor additional details.\nAWS Site-to-Site VPN does not offer an option to add BGP password authentication as the BGP session is being established over an authenticated and encrypted VPN tunnel. Review this\nRe:Post article\nfor additional details.\nRepeat these steps for the remaining tunnel interface.\nFigure 23: Configuring the BGP neighbor on the Fortigate firewall\nIn the\nNetworks\nsection, we will add the CIDRs that we want to advertise to the AWS TGW. In this guide, we are going to advertise the subnet for the LAN interface, 10.1.4.0/22. Please follow the security policy and standards for your organization. When finished, choose Apply. This route will be advertised to the AWS Transit Gateway BGP peers.\nFigure 24: Configuring the local networks to advertise across the AWS VPN\nWe will use the CLI to configure eBGP multipath for increased throughput and load balancing across the two VPN tunnel interfaces. To launch a CLI session from the FortiOS web interface, select the CLI icon (>_).\nFigure 25: Selecting the CLI icon in the FortiGate firewall\nRun these commands to enable eBGP multipath.\nconfig router bgp\nset ebgp-multipath enable\nend\nFigure 26: FortiGate BGP configuration statements\nPart 7: Verification & Testing\nStep 1: AWS Console Checks\nNow that the VPN connections are configured, we must verify connectivity. In the AWS console, navigate to\nVPC > Transit Gateways > Transit Gateway Route Tables\n.\nSelect your route table. If the VPN and BGP are functioning properly, the routes advertised via the FortiGate VPN will be listed in the TGW route table.\nFigure 27: Viewing the TGW route table details\nThe AWS VPN tunnel status will show as\nUp\n, with the number of BGP routes received also displayed.\nFigure 28: Viewing the AWS VPN tunnel status\nValidate the heath of the VPN connection by viewing the CloudWatch Logs log entries. In the AWS Console, navigate to\nCloudWatch > Logs > Log groups\n> <your VPN log group name>\n. The logs will show various details indicating the status of the VPN connection, including IKE phase states. These logs are useful during troubleshooting or validation.\nFigure 29: Viewing the VPN logs in CloudWatch Logs\nStep 2: FortiGate Checks\nOn the FortiGate, navigate to\nVPN > IPsec Tunnels\n. The status of both tunnels will be\n\"Up\"\n.\nFigure 30: Validating the VPN tunnel status in the FortiGate firewall\nUse the CLI to verify routing table information. To launch a CLI session from the FortiOS web interface, select the CLI icon (>_). Then issue the following commands:\nget router info bgp summary\nThis command displays BGP neighbor status, and a detailed breakdown of BGP metrics.\nget router info routing-table all\nThis command displays prefixes present in all route tables. The routes received from the Transit Gateway will appear as BGP prefixes.\nFigure 31: Viewing the BGP route table using the FortiGate CLI\nPart 8: Connectivity Test\nTo test our setup, we will be performing ICMP ping and HTTP requests from a server in the on-premises network.\nThe on-premises server IP is in the 10.1.4.0/22 network\nDevelopment VPC endpoint: 10.50.1.59\nStaging VPC endpoint: 10.60.6.181\nProduction VPC endpoint: 10.70.2.117\nRun a ping command with the syntax: ping <your IP address in a VPC> -c 1 to send an ICMP packet. Repeat this process for any other networks advertised from the Transit Gateway.\nIn this guide, we have web servers running in a VPC that are accessible over port 80. To test, run curl <your HTTP server IP address in a VPC> and observe the output.\nFigure 32: Validating traffic from an Amazon EC2 instance to an on-premises server using ICMP and curl\nFor more information on curl, please refer to\nthe documentation\n.\nPart 9: Cleanup\nThe intention of this guide was to assist you in configuring a Site-to-Site VPN connection in a production environment. If this was created for temporary purposes, follow these steps to clean up your AWS environment so that you do not incur unnecessary costs.\nClean up AWS resources.\nDelete the VPN connection.\nVPC > Virtual Private Network (VPN) > Site-to-Site VPN connections\n>\nSelect the VPN connection > from Actions Menu > Select Delete VPN connection.\nDelete the customer gateway\nVPC > Virtual Private Network (VPN) > Customer gateways > Select the customer gateway > from Actions Menu > Delete customer gateway\nClean up the FortiGate firewall configuration.\nDelete the BGP configuration\nDelete both BGP peers by navigating to\nNetwork > BGP > select the peer and then delete each of them\nDelete the BGP Networks\nNetwork > BGP > Networks\ndelete each of the prefixes\nDelete the firewall policies\nUnder\nPolicy & Objects > Firewall Policy\ndelete each of the policies associated with the VPN tunnel interfaces\nDelete the IPsec Tunnels by navigating to\nVPN > IPSec Tunnels.\nConclusion\nIn this guide, we have covered detailed best practices for configuring a Site-to-Site VPN connection between a FortiGate firewall and an AWS Transit Gateway with a VPN attachment, and validated connectivity.\nWhen configuring security settings between a FortiGate firewall and AWS, always refer to the latest\nAWS Well-Architected Framework Security Pillar documentation\n, as well as\nFortiGate\u2019s Key Firewall Best Practices\n.\nPlease see\nthis related re:Post article\nto accomplish the same task but using IPv6 connectivity.\nAuthors\n: Carlos Bauer, Sreyansh Bhupal, Tyler Applebaum\nSpecial thanks to:\nPablo Sanchez Carmona, Nikesh Preethapal"
}