{
  "body": "I have a DynamoDB table in my CDK stack with a fixed name and removalPolicy set to RETAIN. After deleting the stack and attempting to redeploy it, the deployment fails with the error: \"Table already exists\".\nI want to implement Conditional Creation:\nIf the DynamoDB table does not exist, it should be created.\nIf the table already exists, the stack should reference the existing table instead of trying to create a new one.\nWhat is the best way to check whether a DynamoDB table already exists in AWS CDK (TypeScript)?\n\nTo implement conditional creation of a DynamoDB table in AWS CDK using TypeScript, you can use a combination of the\nTableV2\nconstruct and the\nfromTableName\nmethod. Here's an approach you can take:\nFirst, use the\nTableV2.fromTableName\nmethod to attempt to reference an existing table. This method creates a reference to an existing table without actually creating a new one.\nIf the table doesn't exist, this reference will be undefined, and you can then create a new table using the\nTableV2\nconstruct.\nHere's an example of how you might implement this:\nimport\n*\nas\ndynamodb\nfrom\n'aws-cdk-lib/aws-dynamodb'\n;\nimport\n*\nas\ncdk\nfrom\n'aws-cdk-lib'\n;\n// ... in your stack definition\nconst\ntableName\n=\n'YourTableName'\n;\n// Try to reference an existing table\nconst\nexistingTable\n=\ndynamodb\n.\nTableV2\n.\nfromTableName\n(\nthis\n,\n'ExistingTable'\n,\ntableName\n)\n;\nlet\ntable\n:\ndynamodb\n.\nTableV2\n;\nif\n(\nexistingTable\n===\nundefined\n)\n{\n// Table doesn't exist, create a new one\ntable\n=\nnew\ndynamodb\n.\nTableV2\n(\nthis\n,\n'NewTable'\n,\n{\ntableName\n:\ntableName\n,\npartitionKey\n:\n{\nname\n:\n'id'\n,\ntype\n:\ndynamodb\n.\nAttributeType\n.\nSTRING\n}\n,\nremovalPolicy\n:\ncdk\n.\nRemovalPolicy\n.\nRETAIN\n,\n// ... other table properties\n}\n)\n;\n}\nelse\n{\n// Table exists, use the reference\ntable\n=\nexistingTable\n;\n}\n// Now you can use 'table' in the rest of your stack\nThis approach allows you to conditionally create the table or reference an existing one. The\nfromTableName\nmethod will not throw an error if the table doesn't exist, it will simply return undefined.\nRemember that when you're referencing an existing table, you won't be able to modify its properties through CDK. Any changes to the table structure would need to be done outside of this stack.\nAlso, keep in mind that this approach doesn't guarantee atomicity. There's a small chance that the table could be created between the check and the creation step. If this is a concern, you might need to implement additional error handling or use a more robust strategy.\nLastly, ensure that your IAM permissions allow for describing DynamoDB tables, as the\nfromTableName\nmethod will attempt to describe the table to check its existence.\nSources\naws-cdk-lib.aws_dynamodb module \u00b7 AWS CDK\nCDK Typescript check if S3 already exists | AWS re:Post\n\nI implemented the solution as suggested above. The stack is created successfully, but the DynamoDB table is not created. It seems that the method dynamodb.TableV2.fromTableName does not return undefined if the table does not exist in AWS.\n(Instead, it always assumes the table exists and creates a reference to it, even if the table is not present in AWS.)\nCould you please suggest a solution to conditionally create the DynamoDB table only if it does not already exist, and otherwise reference the existing table?\n\nHI Team / Leeroy Hannigan,\nCould you please suggest solution here ??"
}