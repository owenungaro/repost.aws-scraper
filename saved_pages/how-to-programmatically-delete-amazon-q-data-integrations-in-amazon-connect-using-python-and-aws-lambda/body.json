{
  "body": "This article demonstrates how to use Python and AWS Lambda to automate the deletion of Amazon Q data integrations in Amazon Connect. Using Python's boto3 library to call Amazon Connect APIs, this solution efficiently manages the cleanup of knowledge bases, assistant associations, and data integration resources in your Connect instance.\n\nPrerequisites\nAn AWS account with access to AWS Lambda, Amazon Connect, and Amazon Q services`\nBasic understanding of AWS Lambda and Python\nAWS CLI configured with appropriate permissions\nSolution Overview\nKey Components\nAWS Lambda Function: Orchestrates the deletion process\nAmazon Connect Instance: Contains the data integration configurations\nApp Integrations Service: Manages data integration resources\nAmazon Q Connect Service: Handles knowledge bases and assistant associations\nEventBridge: Manages associated rules and targets created by Amazon Q\nMain Workflow Steps\nParameter validation and client initialization\nData integration association discovery\nKnowledge base and assistant association cleanup\nFinal data integration removal\nRequired IAM Permissions\nThe Lambda execution role requires the following permission policies :\nAWSLambdaBasicExecutionRole for CloudWatch logging\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"logs:CreateLogGroup\",\n            \"Resource\": \"arn:aws:logs:<REGION>:<ACCOUNT_ID>:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n            ],\n            \"Resource\": [\n                \"arn:aws:logs:<REGION>:<ACCOUNT_ID>:log-group:/aws/lambda/DeleteConnectDataIntegrations:*\"\n            ]\n        }\n    ]\n}\nConnect permissions for managing integrations and associations\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n    {\n        \"Sid\": \"VisualEditor0\",\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"wisdom:ListAssistantAssociations\",\n            \"app-integrations:DeleteDataIntegration\",\n            \"wisdom:DeleteKnowledgeBase\",\n            \"app-integrations:ListDataIntegrations\",\n            \"app-integrations:ListDataIntegrationAssociations\",\n            \"connect:ListIntegrationAssociations\",\n            \"wisdom:DeleteAssistantAssociation\",\n            \"connect:DeleteIntegrationAssociation\",\n            \"wisdom:ListKnowledgeBases\",\n            \"app-integrations:DeleteDataIntegrationAssociation\"\n        ],\n        \"Resource\": [\n            \"arn:aws:connect:<REGION>:<ACCOUNT_ID>:instance/*\",\n            \"arn:aws:connect:<REGION>:<ACCOUNT_ID>:instance/*/integration-association/*\",\n            \"arn:aws:app-integrations:<REGION>:<ACCOUNT_ID>:data-integration/*\",\n            \"arn:aws:wisdom:<REGION>:<ACCOUNT_ID>:association/*/*\",\n            \"arn:aws:wisdom:<REGION>:<ACCOUNT_ID>:knowledge-base/*\",\n            \"arn:aws:wisdom:<REGION>:<ACCOUNT_ID>:assistant/*\",\n            \"arn:aws:app-integrations:<REGION>:<ACCOUNT_ID>:data-integration-association/*/*\"\n        ]\n    }\n]\n}\nEventBridge permissions for managing rules and targets created by Wisdom\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Statement1\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"events:ListTargetsByRule\",\n                \"events:RemoveTargets\",\n                \"events:DeleteRule\"\n            ],\n            \"Resource\": [\n                \"arn:aws:events:<REGION>:<ACCOUNT_ID>:rule/*\"\n            ]\n        }\n    ]\n}\nIAM permissions for updates on Connect Service Linked Role\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:GetRole\",\n                \"iam:UpdateRole\",\n                \"iam:PutRolePolicy\",\n                \"iam:DeleteRolePolicy\"\n            ],\n            \"Resource\": \"arn:aws:iam::<ACCOUNT_ID>:role/aws-service-role/connect.amazonaws.com/*\"\n        }\n    ]\n}\nEnsure to replace '<ACCOUNT_ID>' and '<REGION>' placeholders with your account and region specific values.\nImplementation Steps\nCreate a new Lambda function :\nNavigate to AWS Lambda console in the same region as your Amazon Connect instance\nClick \"Create function\" and select \"Author from scratch\"\nConfigure basic settings:\n- Runtime: Python 3.13\n- Architecture: x86_64 (default)\nConfigure execution role:\n- Select \"Create a new role with basic Lambda permissions\"\n- After creation, update the role with the permissions specified in the IAM Permissions section\nConfigure function settings:\n- Memory: 128 MB (minimum recommended)\n- Timeout: 10 seconds\nConfigure Environment Variables (Optional) :\nINSTANCE_ID:  Your Amazon Connect instance ID\nDATA_INTEGRATION_NAME:  Name of the data integration to delete\nDeploy the Lambda Code :\nCopy the below provided Python code into the Lambda function's code editor and deploy the function..\nimport boto3\nimport json\nimport os\nimport logging\nimport uuid\n\n# Configure logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ndef generate_request_id():\n    \"\"\"Generate a unique request ID for tracking\"\"\"\n    return str(uuid.uuid4())\n\ndef get_parameters(event, context):\n    \"\"\"Get parameters from both environment variables and event payload\"\"\"\n    region = context.invoked_function_arn.split(\":\")[3]\n    logger.info(f\"Lambda is running in region: {region}\")\n    \n    params = {\n        'instance_id': event.get('instance_id') or os.environ.get('INSTANCE_ID') or os.environ.get('instance_id'),\n        'data_integration_name': event.get('data_integration_name') or os.environ.get('DATA_INTEGRATION_NAME') or os.environ.get('data_integration_name'),\n        'region': region\n    }\n    return params\n\ndef initialize_clients(region):\n    \"\"\"Initialize AWS service clients\"\"\"\n    try:\n        return {\n            'appintegrations': boto3.client('appintegrations', region_name=region),\n            'connect': boto3.client('connect', region_name=region),\n            'qconnect': boto3.client('qconnect', region_name=region)\n        }\n    except Exception as e:\n        logger.error(f\"Error initializing AWS clients: {str(e)}\")\n        raise\n\ndef list_data_integrations(client):\n    \"\"\"List all available data integrations\"\"\"\n    try:\n        response = client.list_data_integrations()\n        integration_names = [integration['Name'] for integration in response.get('DataIntegrations', [])]\n        return integration_names\n    except Exception as e:\n        logger.error(f\"Error listing data integrations: {str(e)}\")\n        raise\n\ndef delete_data_integration(clients, data_integration_name, instance_id, request_id):\n    \"\"\"Delete data integration and associated resources\"\"\"\n    try:\n        # Log request parameters with request_id\n        logger.info(f\"RequestId: {request_id} - Starting deletion process for Data Integration: {data_integration_name}\")\n        \n        # Step 1: Check data integration associations\n        data_integration_assocs = clients['appintegrations'].list_data_integration_associations(\n            DataIntegrationIdentifier=data_integration_name\n        )\n        logger.info(f\"Data integration associations check completed for: {data_integration_name}\")\n\n        # Step 2: List integration associations\n        integration_assocs = clients['connect'].list_integration_associations(\n            InstanceId=instance_id\n        )\n        \n        # Step 3: Handle WISDOM_KNOWLEDGE_BASE association\n        kb_association_id = None\n        assistant_arn = None\n        \n        for assoc in integration_assocs.get('IntegrationAssociationSummaryList', []):\n            if assoc['IntegrationType'] == 'WISDOM_KNOWLEDGE_BASE':\n                kb_association_id = assoc['IntegrationAssociationId']\n            elif assoc['IntegrationType'] == 'WISDOM_ASSISTANT':\n                assistant_arn = assoc['IntegrationArn']\n\n        if kb_association_id:\n            logger.info(f\"Deleting QCONNECT_KNOWLEDGE_BASE association: {kb_association_id}\")\n            clients['connect'].delete_integration_association(\n                InstanceId=instance_id,\n                IntegrationAssociationId=kb_association_id\n            )\n\n        # Step 4 & 5: Handle WISDOM_ASSISTANT associations\n        if assistant_arn:\n            assistant_id = assistant_arn.split('/')[-1]\n            assistant_assocs = clients['qconnect'].list_assistant_associations(\n                assistantId=assistant_id\n            )\n            \n            for assoc in assistant_assocs.get('assistantAssociationSummaries', []):\n                logger.info(f\"Deleting qconnect assistant association: {assoc['assistantAssociationId']}\")\n                clients['qconnect'].delete_assistant_association(\n                    assistantId=assistant_id,\n                    assistantAssociationId=assoc['assistantAssociationId']\n                )\n\n        # Step 6 & 7: Handle WISDOM knowledge bases\n        knowledge_bases = clients['qconnect'].list_knowledge_bases()\n        \n        for kb in knowledge_bases.get('knowledgeBaseSummaries', []):\n            if kb['name'] == data_integration_name:\n                logger.info(f\"Deleting qconnect knowledge base: {kb['knowledgeBaseId']}\")\n                clients['qconnect'].delete_knowledge_base(\n                    knowledgeBaseId=kb['knowledgeBaseId']\n                )\n\n        # Step 8 & 9: Final verification and deletion of data-integrations\n        verify_assocs = clients['appintegrations'].list_data_integration_associations(\n            DataIntegrationIdentifier=data_integration_name\n        )\n        \n        if not verify_assocs.get('DataIntegrationAssociations'):\n            clients['appintegrations'].delete_data_integration(\n                DataIntegrationIdentifier=data_integration_name\n            )\n            logger.info(f\"Successfully deleted data integration: {data_integration_name}\")\n            return True\n        else:\n            logger.warning(\"Data integration associations still exist\")\n            return False\n\n    except Exception as e:\n        logger.error(f\"RequestId: {request_id} - Error during deletion process: {str(e)}\")\n        logger.error(f\"RequestId: {request_id} - Failed operation details - Data Integration: {data_integration_name}\")\n        raise\n\ndef get_error_details(error):\n    \"\"\"Extract error type and operation from boto3 exception\"\"\"\n    error_message = str(error)\n    if hasattr(error, 'operation_name'):\n        return f\"An error occurred ({error.__class__.__name__}) when calling the {error.operation_name} operation\"\n    return error_message\n\ndef lambda_handler(event, context):\n    request_id = generate_request_id()\n    try:\n        # Get parameters\n        params = get_parameters(event, context)\n        \n        # Initialize clients\n        clients = initialize_clients(params['region'])\n\n        # Check if parameters are available\n        if not params['instance_id'] or not params['data_integration_name']:\n            integration_names = list_data_integrations(clients['appintegrations'])\n            missing_params = []\n            if not params['instance_id']:\n                missing_params.append('instance_id')\n            if not params['data_integration_name']:\n                missing_params.append('data_integration_name')\n                \n            logger.error(f\"RequestId: {request_id} - Missing required parameters: {missing_params}\")\n            return {\n                'statusCode': 400,\n                'body': json.dumps({\n                    'error': 'Missing required parameters',\n                    'message': 'Please provide all required parameters. Check logs for details.',\n                    'requestId': request_id\n                }, separators=(',', ':'))  # Remove extra whitespace\n            }\n\n        # Proceed with deletion\n        success = delete_data_integration(\n            clients,\n            params['data_integration_name'],\n            params['instance_id'],\n            request_id\n        )\n\n        return {\n            'statusCode': 200 if success else 400,\n            'body': json.dumps({\n                'success': success,\n                'message': f\"Data integration: {params['data_integration_name']} deleted successfully\" if success else f\"Failed to delete data integration: {params['data_integration_name']}\",\n                'requestId': request_id\n            }, separators=(',', ':'))\n        }\n\n    except Exception as e:\n        logger.error(f\"RequestId: {request_id} - Lambda execution error: {str(e)}\")\n        error_message = get_error_details(e)\n        \n        return {\n            'statusCode': 500,\n            'body': json.dumps({\n                'error': 'Internal server error',\n                'message': f\"{error_message}. Check logs for details.\",\n                'requestId': request_id\n            }, separators=(',', ':'))\n        }\nThe code handles the below\n- Parameter validation\n- AWS service client initialization\n- Connect Data integration association cleanup\n- QConnect knowledge base and assistant association removal\n- Final data integration deletion\n- Includes proper error handling and logging mechanisms to ensure reliable execution and troubleshooting capabilities.\nExecute the Function :\nYou can provide the input parameters in either of the two ways :\nEnvironment variables (as mentioned in step 2)  or\nJSON event format:\n{\n\"instance_id\"\n:\n\"your-instance-id\"\n,\n\"data_integration_name\"\n:\n\"your-integration-name\"\n}\nTesting and Validation\nSample Test Cases\nBasic deletion test event:\n{\n\"instance_id\"\n:\n\"your-instance-id\"\n,\n\"data_integration_name\"\n:\n\"test-integration\"\n}\nExpected Outputs\n{\n\"statusCode\"\n:\n200\n,\n\"body\"\n:\n{\n\"success\"\n:\ntrue\n,\n\"message\"\n:\n\"Data integration: test-integration deleted successfully\"\n,\n\"requestId\"\n:\n\"uuid-value\"\n}\n}\nCommon Error Scenario\nMissing Parameters:\n{\n\"statusCode\"\n:\n400\n,\n\"body\"\n:\n{\n\"error\"\n:\n\"Missing required parameters\"\n,\n\"message\"\n:\n\"Please provide all required parameters. Check logs for details.\"\n,\n\"requestId\"\n:\n\"uuid-value\"\n}\n}\nBest Practices\nSecurity\nFollow least privilege principle for IAM roles\nEncrypt sensitive environment variables\nPerformance\nImplement concurrent deletion where possible\nUse proper timeout settings\nImplement pagination for large resource lists\nLimitations\nKnowledge bases: hard limit of 10\nData integrations: soft limit of 10 (can be increased via Service Quotas console)\nRegion availability depends on Amazon Q service availability\nTroubleshooting\nCommon Issues\nPermission errors\nSolution: Verify IAM role permissions\nResource not found\nSolution: Check resource existence and region\nDeletion failures\nSolution: Check cloudwatch logs and resource dependencies\nDebug Procedures\nEnable DEBUG level logging if required.\nCheck CloudWatch logs for detailed error messages.\nVerify AWS service health status.\nConfirm resource state before deletion.\nClean-up Steps\nVerify resource deletion using AWS CLI or AWS CloudShell\naws appintegrations list-data-integrations\naws qconnect list-knowledge-bases\nDelete Lambda function if no longer needed.\nReview and clean up IAM roles.\nReference Documentation\nAWS Lambda Developer Guide :\nhttps://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html\nAmazon Connect Service API Reference :\nhttps://docs.aws.amazon.com/connect/latest/APIReference/API_Operations_Amazon_Connect_Service.html\nAmazon AppIntegrations Service API Reference :\nhttps://docs.aws.amazon.com/connect/latest/APIReference/API_Operations_Amazon_AppIntegrations_Service.html\nAmazon Q Connect API Reference :\nhttps://docs.aws.amazon.com/connect/latest/APIReference/API_Operations_Amazon_Q_Connect.html\nAWS CLI Installation Guide :\nhttps://docs.aws.amazon.com/cli/v1/userguide/cli-chap-install.html\nAmazon Connect Appintegrations CLI reference :\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/appintegrations/index.html\nAmazon Q in Connect CLI reference :\nhttps://awscli.amazonaws.com/v2/documentation/api/latest/reference/qconnect/index.html\nAWS CloudShell reference :\nhttps://docs.aws.amazon.com/cloudshell/latest/userguide/getting-started.html"
}