{
  "body": "Hello together,\nas of the official documentation for AWS Amplify Generation 2 (\nhttps://docs.amplify.aws/react/build-a-backend/functions/configure-client-library/\n), I shall be able to connect to Amplify from my custom function with the following code.\n`import { getAmplifyDataClientConfig } from '@aws-amplify/backend/function/runtime';\nimport { env } from '$amplify/env/say-hello';\nconst { resourceConfig, libraryOptions } = await getAmplifyDataClientConfig(env);`\nUnfortunately already for sandbox as well as for actual deployment it tells me:\nArgument of type 'LambdaProvidedEnvVars' is not assignable to parameter of type 'DataClientEnv'.\nProperty 'AMPLIFY_DATA_DEFAULT_NAME' is missing in type 'LambdaProvidedEnvVars' but required in type '{ AWS_ACCESS_KEY_ID: string; AWS_SECRET_ACCESS_KEY: string; AWS_SESSION_TOKEN: string; AWS_REGION: string; AMPLIFY_DATA_DEFAULT_NAME: string; }'.ts(2345)\nget_amplify_clients_configuration.d.ts(7, 5): 'AMPLIFY_DATA_DEFAULT_NAME' is declared here.\nLooking into the autogenerated env file, there is no AMPLIFY_DATA_DEFAULT_NAME.\nAnd also in the entire documentation, I don't find anything about that.\nExperiencing this with\n\"@aws-amplify/backend\": \"^1.16.1\",\n\"@aws-amplify/backend-cli\": \"^1.7.2\",\n\"aws-cdk-lib\": \"^2.189.1\",\nin the \"get_amplify_clients_configuration.d.ts\" a comment states:\nYour function needs to be granted resource access on your schema for this to work\na.schema(...).authorization((allow) => [a.resource(myFunction)])\n...\nBut that doesn't work.\nUPDATE:\nSo while the original documentation misses to mention that you need to grant access to the scheme for the functions and only links in a side note to a wrong article (\nhttps://docs.amplify.aws/react/build-a-backend/functions/grant-access-to-other-resources/#using-the-access-property\n) ...\nThrough another article I found the solution:\nAs of\nhttps://docs.amplify.aws/react/build-a-backend/data/customize-authz/grant-lambda-function-access-to-api/\nit would have to be\na.schema(...).authorization(allow => [allow.resource(functionWithDataAccess)]);\nAfter authorizing my function that way, I finally got the Amplify-client in my custom function to work.\nDear AWS Amplify Team - please review your documentations...\nIt took me 2 days to figure this simple thing out and searching the internet for the error-message didn't gave any details. I wonder how many potential customers and revenue you loose because of bad documentation.\nSo I posted this for other people that might run into the same problem.\n\nTo configure the Amplify client library for custom functions in AWS Amplify Gen 2, you need to properly grant your function access to the data resources it needs to interact with.\n\nThe error you encountered about `AMPLIFY_DATA_DEFAULT_NAME` being missing occurs because your function hasn't been granted access to interact with your Amplify Data resource. When a function is properly authorized to access your data resources, Amplify's backend tooling generates the necessary environment variables, including `AMPLIFY_DATA_DEFAULT_NAME`.\n\nThe solution is to grant your function access to your data schema by adding an authorization rule in your schema definition:\n\n```typescript\na.schema(...).authorization(allow => [allow.resource(yourFunctionName)]);\n```\n\nThis authorization step is crucial because it:\n1. Grants the appropriate IAM permissions to your function\n2. Ensures the necessary environment variables are generated\n3. Allows the `getAmplifyDataClientConfig` function to properly configure the client\n\nOnce you've added this authorization, the `getAmplifyDataClientConfig` function will be able to read from the generated `env` object to produce the configuration for the resources your function has access to interact with. This function generates both the resource configuration and specifies how the client library should behave, particularly where it should read credentials from.\n\nAfter making this change, your original code should work as expected:\n\n```typescript\nimport { getAmplifyDataClientConfig } from '@aws-amplify/backend/function/runtime';\nimport { env } from '$amplify/env/your-function-name';\n\nconst { resourceConfig, libraryOptions } = await getAmplifyDataClientConfig(env);\n```\nSources\nConfigure client library - AWS Amplify Gen 2 Documentation\nEnvironment variables and secrets - AWS Amplify Gen 2 Documentation\nCustom functions - React - AWS Amplify Gen 2 Documentation"
}