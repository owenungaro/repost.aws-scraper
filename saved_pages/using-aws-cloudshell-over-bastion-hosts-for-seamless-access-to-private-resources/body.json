{
  "body": "This article explains how AWS CloudShell enables secure access to private VPC resources, offering a simpler, more secure alternative to bastion hosts with zero infrastructure management.\n\nWhen accessing private resources in AWS, organizations traditionally rely on bastion hosts to establish secure connections. While effective, bastion hosts introduce operational overhead, require ongoing maintenance, and pose potential security risks if not managed correctly. AWS CloudShell VPC offers a modern alternative, providing seamless access to private resources without the need to manage infrastructure.\nAWS CloudShell allows users to run a browser-based shell to interact with AWS resources. By default, CloudShell runs in a managed environment, but with CloudShell VPC, you can launch CloudShell instances inside your Virtual Private Cloud (VPC), enabling secure access to private resources.\nEach CloudShell VPC environment allows you to:\nAssign a VPC \u2013 Run CloudShell inside a selected VPC.\nDefine Subnets \u2013 Choose a subnet where CloudShell will operate.\nAssociate Security Groups \u2013 Up to five security groups can be attached.\nBecause CloudShell VPC inherits the network configuration of your VPC, it can seamlessly connect to other private resources within the same subnet\u2014just like a bastion host, but without the management burden.\nTo create a CloudShell VPC environment [1]\nOn the CloudShell console page, choose the + icon and then choose Create VPC environment from the dropdown menu.\nOn the Create a VPC environment page, enter a name for your VPC environment in the Name box.\nFrom the Virtual private cloud (VPC) dropdown list, choose a VPC.\nFrom the Subnet dropdown list, choose a subnet.\nFrom the Security group dropdown list, choose one or more security groups that you want to assign to your VPC environment. You can choose a maximum of five security groups.\nChoose Create to create your VPC environment.\nKey Benefits of Using AWS CloudShell Over Bastion Hosts\nZero Infrastructure Maintenance\nOne of the biggest advantages of CloudShell VPC is that AWS fully manages the underlying infrastructure. You no longer have to worry about:\nOS patching and updates\nAMI lifecycle management\nSecurity group configurations\nCosts associated with running dedicated EC2 instances\nWith CloudShell, AWS takes care of everything, ensuring your shell environment is always up to date and secure.\nEnhanced Security\nCloudShell VPC eliminates several security risks associated with bastion hosts:\nIAM-controlled access \u2013 No need to manage SSH keys or passwords.\nBuilt-in security controls \u2013 CloudShell adheres to AWS security best practices.\nZero Trust Compatible \u2013 Fine-grained IAM policies control access.\nNo public access exposure \u2013 Unlike bastion hosts, which often require a public IP, CloudShell remains fully private within your VPC.\nSince CloudShell sessions expire after inactivity, there\u2019s also no risk of persistent access that could be exploited.\nSeamless Access to Private Resources\nWith CloudShell VPC, you can directly connect to private AWS resources without additional networking setup:\nAccess RDS databases in private subnets for debugging.\nRun CLI commands on EC2 instances inside your VPC.\nNo need for a public subnet, reducing attack surfaces.\nUnlike bastion hosts, which require opening inbound security group rules and managing SSH access, CloudShell VPC provides a secure, direct connection to your private resources.\nKey Requirements for Using CloudShell VPC\nBefore using CloudShell VPC, ensure you meet the following requirements:\nIAM Permissions: Attach the AWSCloudShellFullAccess policy to your IAM user or role. [2]\nVPC and Subnet Configuration: The VPC must have private subnets with necessary route table entries.\nCloudShell Region Support: CloudShell VPC is available in specific AWS regions\u2014confirm that your desired region [3]\nReferences:\n[1]\nhttps://docs.aws.amazon.com/cloudshell/latest/userguide/creating-vpc-environment.html\n[2]\nhttps://docs.aws.amazon.com/cloudshell/latest/userguide/sec-auth-with-identities.html\n[3]\nhttps://docs.aws.amazon.com/cloudshell/latest/userguide/supported-aws-regions.html"
}