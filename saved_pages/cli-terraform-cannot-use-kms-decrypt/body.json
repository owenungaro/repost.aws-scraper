{
  "body": "Goal: Create Lambda functions with environment variables using Terraform or CLI\nI get an error that I am not authorized to perform kms:Decrypt on an aws managed key with an explicit deny in an identity based policy\nthe only policies attached to my user are AdministratorAccess and a require mfa one included here for completeness.\n\"Sid\": \"DenyAllExceptListedIfNoMFA\",\n\"Effect\": \"Deny\",\n\"NotAction\": [\n\"iam:CreateVirtualMFADevice\",\n\"iam:EnableMFADevice\",\n\"iam:GetUser\",\n\"iam:ListUsers\",\n\"iam:ListMFADevices\",\n\"iam:ListVirtualMFADevices\",\n\"iam:ResyncMFADevice\",\n\"iam:CreateLoginProfile\",\n\"iam:GetLoginProfile\",\n\"iam:UpdateLoginProfile\",\n\"iam:GetSessionToken\",\n\"iam:ChangePassword\"\n],\n\"Resource\": \"*\",\n\"Condition\": {\n\"Bool\": {\n\"aws:MultiFactorAuthPresent\": \"false\"\nIn my experience this policy only allows you to set up mfa and nothing else until you do so within the console. But that only applies to the console. Once you set up mfa and create long-term credentials for cli access; the cli does not require an mfa token.\nI created several lambda functions using terraform. However they fail when trying to add environment variables with\n\"Lambda was unable to decrypt your environment variables because the KMS access was denied. Please check your KMS permissions. KMS Exception: AccessDeniedException KMS Message: User:$MyUserARN is not authorized to perform: kms:Decrypt on resource: $AWSManagedKeyArn with an explicit deny in an identity-based policy\".\nSimilarly I cannot update or even list the environment variables using aws lambda get-function-configuration.  It lists the entire configuration except for the environment variables. It shows that error message in the environment block and continues describing the rest of the function configuration.\nI can destroy the functions and recreate them using cli; as well as countless other actions (vpc, ec2, ecr, ecs, iam, etc..) without hindrance. The IAM Policy simulator shows that i can do all kms actions (if i ignore the multifactorauthpresent field).  It is my understanding the policy simulator simulates api/cli usage and not console usage.\n\nThe issue you're experiencing is related to how AWS KMS permissions work, which is different from most other AWS services. KMS is one of the few services that requires permissions to be explicitly granted in both identity-based policies (attached to your user) and resource-based policies (the KMS key policy).\nEven though you have the AdministratorAccess policy, which generally grants permissions to all AWS services, KMS requires explicit permissions in the key policy as well. This is why you're seeing the \"explicit deny\" message - it's not necessarily that there's an explicit deny statement, but rather that there's no explicit allow in the key policy for your user.\nTo resolve this issue, you have several options:\nModify the KMS key policy to explicitly allow your user ARN to perform the necessary actions (kms:Decrypt, kms:DescribeKey) on the key.\nIf you're using a customer-managed KMS key, try switching to the default AWS-managed key for Lambda (aws/lambda).\nCreate an IAM policy that explicitly grants your user or role the necessary KMS permissions and attach it to your user:\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": [\"kms:Decrypt\", \"kms:GenerateDataKey\"],\n\"Resource\": \"arn-of-the-kms-key\"\n}\n]\n}\nIf you're using Terraform, you might need to reapply your configuration after making these changes.\nRemember that the MFA policy you mentioned shouldn't affect CLI operations once you've set up long-term credentials, as you correctly noted.\nSources\nLambda function KMS issue | AWS re:Post\nError: User not authorised to perform kms on AWS KMS Resource in Amazon S3 in my CodePipeline Codedeploy | AWS re:Post\nAdministrator user does not have access to KMS which created before | AWS re:Post\n\nI am using an AWS-managed key for Lambda\n\nHello.\nCan you share the Terraform code you're using?\nAlso, is it possible to create a Lambda from the management console and add environment variables?\nAWS-managed KMS keys should be usable if AdministratorAccess is set in IAM within the same account, so if the same error occurs not only from IaC but also from the management console, there may be a problem with the AWS account.\nBy the way, just to be sure, is the IAM user you are using correct?\nAlso, have you set permission boundaries for the IAM user that are denying certain actions?\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html\n\nI have no permission boundary\nThe user is correct\nI can interact and set my variables using the console; 15 functions does not scale well\nhere is the relevant terraform code\ndata \"aws_iam_policy_document\" \"assume\" {\nstatement {\nactions = [\"sts:AssumeRole\"]\nprincipals {\ntype        = \"Service\"\nidentifiers = [\"lambda.amazonaws.com\"]    }  }}\nresource \"aws_iam_role\" \"exec\" {\nname               = \"billing-report-${var.linked_account_id}\"\nassume_role_policy = data.aws_iam_policy_document.assume.json\n}\nresource \"aws_lambda_function\" \"reporter\" {\nfilename      = \"${path.module}/cost_reporter.zip\"\nfunction_name = \"billing-cost-reporter-${var.account_name}\"\nhandler       = \"handler.lambda_handler\"\nruntime       = \"python3.12\"\nrole          = aws_iam_role.exec.arn\ntimeout       = 60\nmemory_size   = 512\nkms_key_arn   = null\nenvironment {\nvariables = {\nSES_FROM_EMAIL    = var.sender_email\nSES_TO_EMAIL      = join(\",\", var.email_recipients)\nLINKED_ACCOUNT_ID = var.linked_account_id\nACCOUNT_NAME      = var.account_name    }  } }\nresource \"aws_lambda_permission\" \"allow_events\" {\nstatement_id  = \"Allow${var.linked_account_id}FromEvents\"\naction        = \"lambda:InvokeFunction\"\nfunction_name = aws_lambda_function.reporter.function_name\nprincipal     = \"events.amazonaws.com\"\nsource_arn    = aws_cloudwatch_event_rule.schedule.arn\n}"
}