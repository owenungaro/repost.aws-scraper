{
  "body": "This post discusses how to generate kafka.client.keystore.jks for connecting AWS MSK cluster with mTLS Authentication from AWS Glue.\n\nIntroduction:\nSecuring communication between AWS Glue and Amazon Managed Streaming for Apache Kafka (MSK) using mutual TLS (mTLS) authentication is a critical requirement for many enterprise applications. This guide walks through the step-by-step process of generating a Kafka client keystore (JKS) using AWS Certificate Manager Private Certificate Authority (ACM PCA) on an Amazon Linux EC2 instance. The resulting keystore enables secure, authenticated connections from AWS Glue jobs to your MSK cluster, ensuring data transmission security and compliance with security protocols.\nPrerequisites:\nAmazon Linux EC2 instance or cloudshell\nAWS CLI with aws-pca configuration\nJava keytool utility\nActive AWS MSK cluster with ACM PCA configured\nSteps:\nCreate the initial truststore by copying the Java cacerts:\ncp\n/etc/pki/java/cacerts client.truststore.jks\nGenerate a new keystore with your client certificate:\nkeytool -genkey -keystore kafka.client.keystore.jks\n\\\n-validity\n100\n\\\n-storepass\n<\nyour-store-password\n>\n\\\n-keypass\n<\nyour-key-password\n>\n\\\n-dname\n\"CN=<your-common-name>\"\n\\\n-alias kafkaprivateCA\n\\\n-storetype pkcs12\nCreate a certificate signing request:\nkeytool -keystore kafka.client.keystore.jks\n\\\n-certreq -file client-cert-sign-request\n\\\n-alias kafkaprivateCA\n\\\n-storepass\n<\nyour-store-password\n>\n\\\n-keypass\n<\nyour-key-password\n>\nFix the certificate request format: The certificate should start with\n-----BEGIN CERTIFICATE REQUEST-----\nand end with\n-----END CERTIFICATE REQUEST-----\nsudo\nsed\n-i -e\n's!BEGIN NEW!BEGIN!g'\nclient-cert-sign-request\nsudo\nsed\n-i -e\n's!END NEW!END!g'\nclient-cert-sign-request\nIssue the certificate using ACM PCA:\naws acm-pca issue-certificate\n\\\n--certificate-authority-arn\n<\nYOUR_ACM_PCA_ARN\n>\n\\\n--csr fileb://client-cert-sign-request\n\\\n--signing-algorithm\n\"SHA256WITHRSA\"\n\\\n--validity\nValue\n=\n100\n,Type\n=\n\"DAYS\"\n\\\n--region us-east-1\nRetrieve the signed certificate:\naws acm-pca get-certificate\n\\\n--certificate-authority-arn\n<\nYOUR_ACM_PCA_ARN\n>\n\\\n--certificate-arn\n<\nYOUR_ACM_PCA_CERTIFICATE_ARN\n>\n\\\n--region us-east-1\nCreate the signed certificate file:\nCreate a new file named\nsigned-certificate-from-acm\nCopy the Certificate string from the previous command's output\nAppend the CertificateChain string below it\nReplace all\n\\n\nwith actual newlines\nImport the signed certificate into the keystore:\nkeytool -keystore kafka.client.keystore.jks\n\\\n-import -file signed-certificate-from-acm\n\\\n-alias kafkaprivateCA\n\\\n-storepass\n<\nyour-store-password\n>\n\\\n-keypass\n<\nyour-key-password\n>\nVerify the keystore contents:\nkeytool -list -v -keystore kafka.client.keystore.jks -storepass\n<\nyour-store-password\n>\nConfigure the connection:\nUpload\nkafka.client.keystore.jks\nto your S3 bucket.\nConfigure the certificate in your AWS Glue Kafka Connection > Choose TLS client authentication for Authentication method, pass the s3 location of\nkafka.client.keystore.jks\nin form field\nKafka client keystore location\nand other details\nKafka client keystore password\nand\nKafka client key password\nNote:\nReplace placeholder values (marked with < >) with your actual values before executing the commands.\nConclusion:\nBy following these steps, you've successfully created and configured a Kafka client keystore for secure mTLS authentication between AWS Glue and MSK. This security implementation ensures that only authorized Glue jobs can connect to your MSK cluster, preventing unauthorized access and maintaining data security. Remember to store your keystore files securely, manage passwords carefully, and regularly rotate certificates according to your organization's security policies. The generated kafka.client.keystore.jks file, when properly configured in your AWS Glue Kafka Connection, establishes a secure foundation for your streaming data workflows."
}