{
  "body": "I've created the cloud formation template which  launches the ec2 instance and the s3 bucket. I've changed the resource properties for the ec2 instance where I've used the different AMI. I didn't use the deletion policy or update policy and i knew it will delete the ec2 instance which is mentioned here:\nhttps://repost.aws/knowledge-center/delete-cf-stack-retain-resources/n\nBut when I change the logicalResourceID for the s3 bucket the old bucket got deleted and there was no UPDATE_COMPLETE for this action in the cloud formation event history. May I know why ? Can anyone please let me know.\n1st template:\nAWSTemplateFormatVersion: '2010-09-09'\nResources:\nMyEC2Instance:\nType: AWS::EC2::Instance\nProperties:\nImageId: imageID1\nInstanceType: t2.micro\nTags:\n- Key: Name\nValue: MyEC2Instance\nMyBucket:\nType: AWS::S3::Bucket\nUpdatedTemplate\nAWSTemplateFormatVersion: '2010-09-09'\nResources:\nMyEC2Instance:\nType: AWS::EC2::Instance\nProperties:\nImageId: imageID2\nInstanceType: t2.micro\nTags:\n- Key: Name\nValue: MyEC2Instance\nMyBucket1:\nType: AWS::S3::Bucket\n\nWhen you change the resource's logical ID  within the template, it initiates a replacement update. Please refer the document that explains LogicalId stability:\nhttps://docs.aws.amazon.com/cdk/v2/guide/identifiers.html#identifiers-logical-ids\nLogical ID stability\nAvoid changing the logical ID of a resource after it has been created. AWS CloudFormation identifies resources by their logical ID. Therefore, if you change the logical ID of a resource, AWS CloudFormation creates a new resource with the new logical ID, then deletes the existing one. Depending on the type of resource, this might cause service interruption, data loss, or both.\nIn your case, when you changed the Logical ID of the S3 bucket from \"MyBucket\" to \"MyBucket1\", CloudFormation treated this as a instruction to delete the original bucket and create a new one with the updated Logical ID. This is why you didn't see an UPDATE_COMPLETE action for the S3 bucket in the CloudFormation event history, but rather a deletion of the old bucket and creation of a new one.\nExample:\n1). Creation of S3 bucket using below template.\nResources:  \n  S3Bucket: #Logical ID of the Resource  \n    Type: AWS::S3::Bucket\n2). Now you are updating the stack S3 bucket logical Id as mentioned below:\nResources:  \n  S3NewBucket: #The changed Logical ID of the Resource  \n    Type: AWS::S3::Bucket\nSince you changed the LogicalId, CloudFormation treats this as a instruction to delete the original bucket and create a new one with the updated Logical ID. This is why you do not observe an UPDATE_COMPLETE action for the S3 bucket in the CloudFormation event as the UniqueId itself has lost its identity in the template.\nAlso you do not have DeletionPolicy or UpdateReplacePolicy set to Retain, the old bucket will be deleted and the new S3 bucketwith logical Id with\"S3NewBucket\"  will be created.\nIn order to save old resources, please use  DeletionPolicy attribute set to \"Retain\" or  UpdateReplacePolicy to \"Retain on resources you want to keep even if their Logical ID changes. Please refer the document:\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html#aws-attribute-updatereplacepolicy-example.yaml\nReference:\n[1].\nhttps://repost.aws/knowledge-center/delete-cf-stack-retain-resources/n\n\nWhen you change or remove the Logical ID of a resource in a CloudFormation template, CloudFormation interprets this as a request to delete the existing resource and create a new one. This behavior occurs because the Logical ID is how CloudFormation uniquely identifies resources within a stack.\nIn your case, when you changed the Logical ID of the S3 bucket from \"MyBucket\" to \"MyBucket1\", CloudFormation treated this as a instruction to delete the original bucket and create a new one with the updated Logical ID. This is why you didn't see an UPDATE_COMPLETE action for the S3 bucket in the CloudFormation event history, but rather a deletion of the old bucket and creation of a new one.\nFor the EC2 instance, changing the AMI triggers a replacement of the instance, which is why you saw it being deleted and recreated. This is expected behavior for properties that require replacement.\nTo prevent unintended deletions when changing Logical IDs, you have a few options:\nAvoid changing Logical IDs unless absolutely necessary.\nIf you need to rename a resource, use a two-step process: First, create the new resource with the desired name alongside the old one. Then, in a separate update, remove the old resource.\nUse the DeletionPolicy attribute set to \"Retain\" on resources you want to keep even if their Logical ID changes.\nRemember, CloudFormation uses Logical IDs to track resources across stack updates. Changing a Logical ID essentially tells CloudFormation to treat it as a completely new resource, leading to the behavior you observed.\nSources\nRecreate a resource deleted outside CloudFormation | AWS re:Post\nUpdate your stack template - AWS CloudFormation\nUnderstand update behaviors of stack resources - AWS CloudFormation"
}