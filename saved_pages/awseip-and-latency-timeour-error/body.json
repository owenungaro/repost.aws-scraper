{
  "body": "Hello,\ni'm trying to move a Elastic IP from a EC2 instance to another using Pacemaker and Corosync. The problem is:\nTimed Out: Resource agent did not complete within 30s\nAnd the resource is blocked. I have to delete the resource and configure newly. 3-4 months ago, same configuration y no problem so I think is a AWS related problem.\nAny hint?\nRegards\n\nThis timeout issue when moving an Elastic IP between EC2 instances using Pacemaker and Corosync is likely related to API latency or connection issues.\nWhen you're experiencing the \"Resource agent did not complete within 30s\" error, it indicates that the operation to reassign the Elastic IP is taking longer than Pacemaker's default timeout allows. This could be happening for several reasons:\nIncreased API latency in AWS services - The AWS API calls to disassociate and reassociate the Elastic IP might be taking longer than they did 3-4 months ago.\nNetwork connectivity issues - There might be network performance problems between your instances and AWS API endpoints.\nSocket timeout configuration - If you're using the AWS Java SDK in your implementation, the default socket timeout is 30 seconds, which might be insufficient for EIP operations.\nTo resolve this issue, you could:\nIncrease the timeout value in your Pacemaker resource configuration. You can modify the operation timeout for the specific resource to allow more time for the EIP reassignment to complete.\nCheck your instances' network performance metrics in CloudWatch to identify any bandwidth or connectivity issues.\nIf your implementation uses the AWS SDK, consider increasing the socket timeout value to accommodate potentially longer API response times.\nVerify that your instances have the proper IAM permissions to modify Elastic IP associations.\nTry bypassing any load balancers or proxies when making the API calls to rule out additional latency sources.\nIf the issue persists, you might want to implement a more resilient approach with automatic retries or consider using AWS-native solutions like Auto Scaling groups with load balancers instead of managing EIP movements directly.\nSources\nSolving 'Read Timed Out' Error and High Latencies in Amazon Bedrock with AWS Java SDK Client | AWS re:Post\nTroubleshoot high response times and ECS latency issues | AWS re:Post\nTroubleshoot latency on calls or requests to Amazon ECS tasks | AWS re:Post"
}