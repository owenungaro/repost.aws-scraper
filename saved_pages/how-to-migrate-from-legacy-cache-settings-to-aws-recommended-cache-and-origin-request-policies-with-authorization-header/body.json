{
  "body": "We are currently using the Legacy Cache Settings. In this configuration, we have the Authorization header included and Query Strings = ALL.\nNow, I want to move to the AWS-recommended Cache Policy and Origin Request Policy.\nI successfully created a Cache Policy that includes the Authorization header. However, when I try to include the Authorization header in the Origin Request Policy, I get the following error:\n\"The parameter Headers contains Authorization that is not allowed.\"\nI have two main questions:\n1: In the Legacy Cache Settings, is the Authorization header being forwarded to the cache, the origin, or both? How can I verify this?\n2: What is the correct way to migrate to the new AWS-recommended policies while continuing to use the Authorization header?\nI attached the Screenshot below:\n\nConsidering this:\nUse \"All Viewer Headers\" in Origin Request Policy \u2013 This ensures the Authorization header is forwarded, but it may introduce performance trade-offs.\nInclude Authorization in Cache Policy \u2013 If you add the Authorization header to the cache key, CloudFront automatically forwards it to the origin.\nUse Signed Cookies or Query Strings \u2013 Instead of relying on Authorization headers, consider using signed cookies or query strings for authentication.\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html\n\nUsing \"All Viewer Headers\" in the origin request policy would forward all headers to the origin, which is not what I want.\nI believe that including the Authorization header in the cache policy is the best solution for my use case, as it ensures only the necessary header is forwarded without impacting cache performance.\nThank you very much for the guidance."
}