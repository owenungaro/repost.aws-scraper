{
  "body": "I want to automate the process of creating permission sets and assigning to users.\ni thought of using lambda in master account,\nbut the problem is few other developers also have access to lambda in master account\nso if i grant permission for lambda to create permission set and assign it to users someone can modify it use as they want. is there a better way to habdle this\n\nLet me suggest a few secure approaches to handle permission set automation in AWS:\nUse AWS Organizations Service Control Policies (SCPs):\nCreate SCPs that restrict who can modify the Lambda function\nApply strict IAM permissions on the Lambda role itself\nThis provides an additional security layer at the organization level\nUse AWS CloudFormation StackSets:\nCreate permission sets as Infrastructure as Code\nDeploy across multiple accounts from a delegated administrator account\nBetter change control through version control\nRequires approval workflows for changes\nUse AWS Control Tower:\nLeverage Account Factory\nImplement customized guardrails\nMaintain compliance through preventive and detective controls\nImplement CI/CD Pipeline:\nStore permission set configurations in a source code repository\nRequire pull request approvals for changes\nUse AWS CodePipeline/CodeBuild with strict IAM roles\nImplement automated testing before deployment\nBest Practice Recommendations:\nKeep the automation code in version control\nImplement approval workflows for changes\nUse separate accounts for development and production\nMaintain audit logs of all changes\nImplement least privilege access\nThe most secure approach would be combining CloudFormation StackSets with a CI/CD pipeline, as it provides:\nVersion control\nChange approval process\nAudit trail\nSeparation of duties\nScalable deployment across accounts\nThis way, developers can propose changes through pull requests, but can't directly modify production permissions."
}