{
  "body": "I've spent hours and days debugging API gateway integrations with Lambda, Cognito & other API gateways. None of your systems work.\nCloudwatch logging often doesn't appear when it should.\nAPI gateway authorizers think they're using IAM when they're configure for Cognito.\nWiring up Lambda function is a major pain.\nWhy would anyone build their company on AWS? The only thing that works consistently is EC2.\n\nI understand your frustration with AWS integrations. These challenges are common when working with API Gateway, Lambda, and Cognito integrations.\n\n    For API Gateway and Lambda integration issues:\n    - 404 errors often indicate route configuration problems. Your local route (e.g., /api/Supplier/GetTotal) needs to match exactly what's configured in API Gateway.\n    - After making changes to API Gateway, you need to deploy the API for changes to take effect.\n    - Lambda permissions are critical - API Gateway needs explicit permission to invoke your Lambda functions. This is often missed when setting up integrations through CloudFormation or OpenAPI specifications.\n\n    For Cognito integration issues:\n    - OAuth Scopes configuration can cause 4xx errors if misconfigured. Leave it blank for identity token authorization or configure it properly for access token authorization.\n    - 401 Unauthorized errors are common with Cognito integrations and often require specific troubleshooting.\n    - Pre-token generation Lambda triggers can cause HTTP 500 errors if they fail.\n\n    For debugging:\n    - Enable CloudWatch logging for your API Gateway to see detailed error information.\n    - Check for integration error messages by adding appropriate logging variables.\n    - Sometimes toggling between proxy/non-proxy integration settings can resolve issues.\n\n    While these services can be challenging to integrate, they do work reliably once properly configured. The initial setup complexity is the trade-off for the scalability and managed service benefits that AWS provides beyond EC2.\nSources\nAWS Gateway: API does not respond in Postman | AWS re:Post\nApi Gateway is not sending Cognito data to Lambda | AWS re:Post\nCreating api gateway api from openapi specification with lambda integration does not create triggers | AWS re:Post\nTroubleshooting issues with HTTP API Lambda integrations - Amazon API Gateway\nCreate and troubleshoot Cognito and API Gateway integrations | AWS re:Post\n\nOk, but the docs don't match the options. For example, in this link\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enable-cognito-user-pool.html\nit states:\nTo use an access token, do the following:\na. For Authorization Scopes, enter one or more full names of a scope that has been configured when the Amazon Cognito user pool was created. For example, following the example given in Create an Amazon Cognito user pool for a REST API, one of the scopes is\nhttps://my-petstore-api.example.com/cats.read\n.\nAt runtime, the method call succeeds if any scope that's specified on the method in this step matches a scope that's claimed in the incoming token. Otherwise, the call fails with a 401 >Unauthorized response.\nb. Choose Save.\n...but no such \"Authorization Scopes\" field exists.\n\nNot to mention that the documentation is 50% headers with wordy but utterly useless content.\n\nhey there! sorry that you are having issues, let me help you with those by using AWS CloudFormation - an AWS service for Infrastructure as Code (IaC) where you can define your needed resources and deploy them easily without going through the Management Console.\nhere is the CF template which your can use to create an API Gateway with implemented Cognito Authorizer and one Lambda which is protected by the mentioned authorizer:\nAWSTemplateFormatVersion\n:\n'2010-09-09'\nTransform\n:\n'AWS::Serverless-2016-10-31'\nDescription\n:\n>\nExample of CloudFormation Template\nParameters\n:\nUserPoolArn\n:\nType\n:\nString\nDescription\n:\nUser Pool ARN from the Auth stack\nResources\n:\nRestApi\n:\nType\n:\nAWS\n:\n:\nServerless\n:\n:\nApi\nProperties\n:\nStageName\n:\nProd\nAuth\n:\nDefaultAuthorizer\n:\nCognitoAuthorizer\nAuthorizers\n:\nCognitoAuthorizer\n:\nUserPoolArn\n:\n!Ref\nUserPoolArn\nIdentity\n:\nHeader\n:\nAuthorization\nAddDefaultAuthorizerToCorsPreflight\n:\nfalse\nCors\n:\nAllowMethods\n:\n\"'*'\"\nAllowHeaders\n:\n\"'*'\"\nAllowOrigin\n:\n\"'*'\"\n# Lambda Functions\nYourLambda\n:\nType\n:\nAWS\n:\n:\nServerless\n:\n:\nFunction\nProperties\n:\nRuntime\n:\npython3.12\nHandler\n:\nlambda_handler.lambda_handler\nCodeUri\n:\n./\nPolicies\n:\n-\nAWSLambdaBasicExecutionRole\nEvents\n:\nGetEvents\n:\nType\n:\nApi\nProperties\n:\nRestApiId\n:\n!Ref\nRestApi\nPath\n:\n/your\n-\nneeded\n-\nroute\nMethod\n:\nget\nfor deploying this template, you will need AWS Serverless Application Model -\nhttps://aws.amazon.com/serverless/sam/\n. take a look into the documentation, i had no issues using it and learning it when i installed it for the first time.\nif you are interested in seeing how to define other resources inside the same template, i've created a project with multiple Lambdas covered by API Gateway + Cognito Authorizer and multiple other services like DynamoDB, CloudFront and S3 -\nhttps://github.com/mate329/eventspark/blob/master/aws/EventsStack/template.yaml\n.\nlet me know if you have any other questions and if i can help you in any other way :)"
}