{
  "body": "HI\nI am trying to spin up an ECS cluster to run a Docker image hosted on AWS ECR. However, there is no apparent error besides\nservice <xyz> was unable to place a task because no container instance met all of its requirements. Reason: No Container Instances were found in your cluster.\nI also executed the AWSSupport-TroubleshootECSContainerInstance runbook to get AWS System Managers to run a test for this which did not find any issue.\nFew things that I double checked\nAMI being used is the an ECS-Optimized AMI (ami-05b458f59b6df9a7a & ami-01fed81ccabd6c52a)\nSubnet has access to Internet\nEC2 has the required role AmazonEC2ContainerServiceforEC2Role to communicate with ECS Service\nEC2 userdata has required code to register (see yaml below) and is populated with correct cluster name when in Running.\nResults of the YAML are\nClusters and its service gets created\nECS service is in ACTIVE state and deployment stays in  in progress status\nAutoscaling group gets created\nEC2 instance is created and in Running state (no ECS related log in System logs though)\nFew odds I noticed that might give hint to what is wrong with the set up\nStack gets stuck at ECSService CONSISTENCY_CHECK and take at least an hour to execute (possible stuck in a loop). Probably retrying the task again and again.\nECS service has an event\nservice <xyz> was unable to place a task because no container instance met all of its requirements. Reason: No Container Instances were found in your cluster. For more information\nECS service health and metrics tab shows \"x Failed task / 0 Completed tasks\" where x increases every few minutes\nECS Service deployment status stays in 'in progress'\nECS Server - container, capacity tables are empty\nRDP to EC2 instance - There is no\nProgramData\nfolder in C drive, No service that looks like ECS is running.\nYAML\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Deploys Docker image on ECS EC2 (Windows Server 2022).\nParameters:\n  ProjectName:\n    Description: Name prefix for shared resources.\n    Type: String\n    Default: test-project-1\n    AllowedPattern: ^[^\\s]+$\n  KeyName:\n    Description: EC2 KeyPair\n    Type: AWS::EC2::KeyPair::KeyName\n  ImageUrl:\n    Description: Docker image URL\n    Type: String\n  AWSRegion:\n    Description: AWS Region\n    Type: String\n    AllowedValues:\n      - eu-west-2\n      - eu-west-3\n  VpcId:\n    Description: VPC ID\n    Type: AWS::EC2::VPC::Id\n  SubnetIds:\n    Description: Subnet IDs (comma-separated)\n    Type: List<AWS::EC2::Subnet::Id>\n  RdsSgId:\n    Description: Security Group ID for RDS\n    Type: AWS::EC2::SecurityGroup::Id\nResources:\n  ECSCluster:\n    Type: AWS::ECS::Cluster\n  ECSInstanceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ec2.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role\n        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n        - arn:aws:iam::aws:policy/AmazonRDSFullAccess\n        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\n      Policies:\n        - PolicyName: AllowECRPull\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ecr:GetAuthorizationToken\n                  - ecr:BatchCheckLayerAvailability\n                  - ecr:GetDownloadUrlForLayer\n                  - ecr:BatchGetImage\n                Resource: '*'\n  ECSInstanceProfile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Roles:\n        - !Ref ECSInstanceRole\n  ECSInstanceSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Security group for ECS EC2 instances\n      VpcId: !Ref VpcId\n      SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: 22\n          ToPort: 22\n          CidrIp: 0.0.0.0/0\n        - IpProtocol: tcp\n          FromPort: 80\n          ToPort: 80\n          CidrIp: 0.0.0.0/0\n  RDSIngressRule:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      GroupId: !Ref RdsSgId\n      IpProtocol: tcp\n      FromPort: 1433\n      ToPort: 1433\n      SourceSecurityGroupId: !Ref ECSInstanceSecurityGroup\n  ECSLaunchTemplate:\n    Type: AWS::EC2::LaunchTemplate\n    Properties:\n      LaunchTemplateData:\n        ImageId: ami-05b458f59b6df9a7a\n        InstanceType: t3.medium\n        KeyName: !Ref KeyName\n        IamInstanceProfile:\n          Arn: !GetAtt ECSInstanceProfile.Arn\n        SecurityGroupIds:\n          - !Ref ECSInstanceSecurityGroup\n        UserData: !Base64\n          Fn::Sub: |-\n            <powershell>\n              echo \"ECS_CLUSTER=${ECSCluster}\" > C:\\ProgramData\\Amazon\\ECS\\ecs.config\n              Start-Service -Name AmazonECS\n            </powershell>\n  ECSAutoScalingGroup:\n    Type: AWS::AutoScaling::AutoScalingGroup\n    Properties:\n      VPCZoneIdentifier: !Ref SubnetIds\n      LaunchTemplate:\n        LaunchTemplateId: !Ref ECSLaunchTemplate\n        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber\n      MinSize: 1\n      DesiredCapacity: 1\n      MaxSize: 1\n  ECSTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    Properties:\n      RequiresCompatibilities:\n        - EC2\n      Cpu: 512\n      Memory: 1024\n      NetworkMode: bridge\n      ContainerDefinitions:\n        - Name: test\n          Image: !Ref ImageUrl\n          Essential: true\n          Memory: 512\n          PortMappings:\n            - ContainerPort: 80\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-group: !Sub /ecs/${ProjectName}/test\n              awslogs-region: !Ref AWSRegion\n              awslogs-stream-prefix: ecs\n  ECSService:\n    Type: AWS::ECS::Service\n    Properties:\n      Cluster: !Ref ECSCluster\n      TaskDefinition: !Ref ECSTaskDefinition\n      DesiredCount: 1\n      LaunchType: EC2\nOutputs:\n  ClusterName:\n    Description: ECS Cluster Name\n    Value: !Ref ECSCluster\n  ServiceName:\n    Description: ECS Service Name\n    Value: !Ref ECSService\n\nBased on your userdata, I suspect this is an windows AMI. The security group is incorrect as you opening port 22 (ssh port), however, that's not causing the error. (\nAlso, make sure the AMI is ECS optimised\n)\nFor the error, can you check your check your EC2 security group and make sure it had outbound rule 443 to 0.0.0.0/0. It should use the default rule based on your cloudformation but it can also be overwritten / removed by other automation.\nTo troubleshoot, login to the EC2. Then run your userdata commands and see if those work or fails.\nGo to the instance \u2192 Connect with RDP.\nOpen Services \u2192 check that AmazonECS is running.\nOpen PowerShell \u2192 run Get-Content C:\\ProgramData\\Amazon\\ECS\\log\\ecs-agent.log\nAlso, you have AWSRegion parameter with multiple regions allowed. Make sure, the related parameters like ECR repository is also in the same region. Confirm that the ECR repository exist and contains the image.\n\nI got the AMI using this command. The AMI has docker pre-installed\naws ssm get-parameters --names \"/aws/service/ami-windows-latest/Windows_Server-2022-English-Full-ECS_Optimized\" --region eu-west-2\n.\nRe-troubleshoot: That concerns me as the EC2 neither has\nProgramData\ndirectory (so no logs) nor it has AmazonECS service (tried running it but got not found error) I wonder why? As ECS Optmized AMI it should have ECS agent.\nYes, everything is in eu-west-2.\nI did get ECR related issue but resolved by adding required permissions.\n443 outbound rule - I read by default EC2 allows all outbound traffic - I will verify anyway\nYeah.. that 22 port is a copy paste issue.\n\nThe issue you're experiencing with your Windows EC2 instance not registering to your ECS cluster is likely related to the ECS agent configuration or initialization on your Windows instance. Here are several potential causes and solutions:\nWindows ECS Agent Configuration: The UserData script in your template might not be correctly configuring the ECS agent. For Windows instances, the PowerShell commands need to ensure the ECS agent is properly configured and started.\nWindows-specific ECS Configuration: Your UserData script is creating the ecs.config file, but you mentioned there's no ProgramData folder in the C drive. This suggests the ECS agent might not be initializing properly on your Windows instance.\nNetwork Connectivity: Even though your subnet has access to the internet, there might be security group rules, network ACLs, or routing issues preventing the EC2 instance from communicating with the ECS service endpoints.\nWindows ECS-Optimized AMI: Ensure you're using the correct Windows ECS-optimized AMI for your region. The AMIs you mentioned (ami-05b458f59b6df9a7a & ami-01fed81ccabd6c52a) should be verified as the latest Windows ECS-optimized AMIs.\nIAM Role Permissions: While you've attached the AmazonEC2ContainerServiceforEC2Role policy, there might be additional permissions needed for Windows instances.\nRecommended actions:\nModify your UserData script to include more robust ECS agent initialization:\n<powershell>\n# Create the ECS config directory if it doesn't exist\nNew-Item -Path \"C:\\ProgramData\\Amazon\\ECS\" -ItemType Directory -Force\n# Set the cluster name\n[System.IO.File]::WriteAllText(\"C:\\ProgramData\\Amazon\\ECS\\ecs.config\", \"ECS_CLUSTER=${ECSCluster}\")\n# Restart the ECS service\nRestart-Service AmazonECS -Force\n</powershell>\nCheck the Windows Event Logs on the instance for any ECS agent errors.\nVerify network connectivity from the instance to the ECS service endpoints.\nConsider adding a VPC endpoint for ECS if your instances are in a private subnet.\nIf possible, try using a Linux-based ECS instance first to verify your overall cluster configuration is working correctly.\nSources\nECS cluster starts an EC2 instance, but it still says \"Container instances 0\" | AWS re:Post\nEC2 instance does not show up at ECS container instance | AWS re:Post\nEC2 scale from auto scaling group not start ecs agent | AWS re:Post"
}