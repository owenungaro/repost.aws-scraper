{
  "body": "I was asked to do an assignment as a part of an interview and they decided to not go futher with my application without giving any feedback.\nAssignment was to Build a Terraform module to deploy a simple containerized service to an AWS EKS Kubernetes cluster.\nI dont understand what went wrong with my structure. Can anyone help me to understand if there\u2019s something wrong with it? Github -\nhttps://github.com/neverscores/terraform-eks-deployment.git\n\nBased on the information provided, I'll analyze potential issues with your EKS Terraform module structure.\nLooking at the error messages in the sources, there are several common issues that could have affected your EKS deployment:\nService Quota Limitations\n: One common error is hitting service quotas, particularly with EC2 Fleet Requests when creating node groups. The error \"You've reached your quota for maximum Fleet Requests for this account\" is common when working with EKS, especially in new accounts or accounts with limited quotas.\nProvider Configuration\n: For EKS deployments, proper configuration of multiple providers is critical. Your module should include properly configured AWS, Kubernetes, and Helm providers. The Kubernetes and Helm providers should reference the EKS cluster endpoint and certificate authority data.\nAdd-on Management\n: EKS add-ons like CoreDNS, kube-proxy, and vpc-cni need proper version compatibility with your Kubernetes version. The \"DEGRADED\" state for CoreDNS mentioned in the sources is a common issue.\nNode Group Configuration\n: Your node group configuration might have issues with launch templates, capacity types (SPOT vs ON_DEMAND), or subnet configuration.\nIAM Role Setup\n: Proper IAM roles and policies are essential for EKS clusters, including service roles and worker node roles with appropriate permissions.\nKubernetes Version Compatibility\n: With newer Kubernetes versions (like 1.30), there are specific changes required for configurations like OIDC identity providers.\nWithout seeing your specific code, I'd recommend reviewing these areas in your module. A well-structured EKS module typically includes:\nClear separation of cluster, node groups, and add-on resources\nProper provider configurations\nIAM role and policy setup\nNetwork configuration (VPC, subnets)\nAppropriate outputs for cluster access\nFor production-grade clusters, consider using established patterns like the EKS Blueprints approach, which includes best practices for cluster setup, add-on management, and access control.\nSources\nEKS cluster creation using Terraform | AWS re:Post\nStreamline production grade clusters with Amazon AFT and Terraform EKS Blueprints | Containers\nUnderstanding Terraform providers - AWS Prescriptive Guidance\nGuidance for Automated Provisioning of Amazon Elastic Kubernetes Service (EKS) using Terraform\nWith AWS EKS Kubernetes version 1.30, Terraform aws_eks_identity_provider_config times out | AWS re:Post"
}