{
  "body": "I'm facing a critical and perplexing issue with Amazon SES in us-east-2 (Ohio) that's preventing my Lambda function from sending emails, despite successful console tests.\nI'm developing a contact form using AWS Lambda (Node.js 18.x) and SES. My Lambda function calls ses.send(new SendEmailCommand(params)) to send emails.\nThe Core Problem: My Lambda function consistently receives a SESServiceException [ValidationError]: Value at 'source' failed to satisfy constraint: Member must not be null. This causes my Lambda to return a 500 Internal Server Error to the frontend, and emails are NOT sent when triggered by Lambda.\nObservation: When I send a test email directly from the SES console the email is successfully delivered (it arrived in spam, but delivery was confirmed). This indicates the email is functional and verified.\nWhat I've already tried (and confirmed):\nFROM_EMAIL and TO_EMAIL environment variables are correctly read within Lambda logs.\nThe FromEmailAddress parameter in the SendEmailCommand is indeed the same email(confirmed via console.log of the params object just before the send call).\nDeleted and re-verifiedmy email in SES identities (us-east-2).\nChecked SES suppression list (email is not listed).\nConfirmed Lambda's IAM role (LambdaSesRole) has AmazonSESFullAccess, and specifically the SES action Resource is \"*\" (meaning it should allow sending from ANY verified identity). There are no explicit Deny statements.\nGiven that direct console sends work, but Lambda-initiated sends fail with this specific validation error, it strongly suggests a nuanced issue related to the SES sandbox's interaction with IAM roles for sending identities.\nMy Questions: Could you please investigate why this ValidationError is occurring specifically when Lambda attempts the send, despite the console test working and comprehensive IAM permissions? Should I proceed with requesting production access, and is this a known sandbox behavior?\nThank you for your time and assistance.\nBest regards\n\nRoot Cause\nThe error: SESServiceException [ValidationError]: Value at 'source' failed to satisfy constraint: Member must not be null means the Source (i.e., the FromEmailAddress) is undefined or null when passed to SES, despite your Lambda logging the correct value.\nThis is not an IAM issue or a sandbox limit (yet).\nMost Likely:\nThe FROM_EMAIL environment variable might be missing, misnamed, or have an invisible character (like a space or newline).\nconsole.log() might show a value, but that doesn\u2019t mean it\u2019s valid when passed into the actual SDK call.\nSES needs an explicit, non-empty string for the Source field; even one small issue can break it.\nCross Check:\nYour Lambda is running in the same region as SES (us-east-2 in your case)\nThe FROM_EMAIL is verified in SES\nYou\u2019re using the correct name in your Lambda env vars; even a typo or case difference can silently fail\n\nBased on the CloudWatch logs I've reviewed, I can confidently rule out the FROM_EMAIL environment variable being undefined, null, misnamed, or containing invisible characters at the point of the SES SDK call.\nHere's why:\nLambda Init Logs: Early in the Lambda's execution, the logs clearly showed: INFO Lambda Init - FROM_EMAIL: my-correct email This confirms the process.env.FROM_EMAIL variable was correctly read by my Lambda runtime.\nMore critically, the console.log statement I added directly before await ses.send(new SendEmailCommand(params)); showed the exact params object being passed to the AWS SDK.\nThis situation strongly suggests that the issue is external to Lambda's code:\nIt points back to a behavior within the AWS SES service itself, specifically when operating in the sandbox mode. The fact that sending from the SES console works, but sending from your Lambda (with correct IAM permissions and correct parameters + clearly verified email on the console) does not, highlights a distinction in how SES processes requests originating from different sources in the sandbox.\nI was thinking that the ValidationError message might be misleading in this context, as the value for source is clearly not null.\n\nBased on the information provided, it appears you're encountering a validation error in your Lambda function when trying to send emails via Amazon SES, despite successful tests from the SES console.\nThe error message \"Value at 'source' failed to satisfy constraint: Member must not be null\" specifically indicates that the 'source' parameter (which is the sender's email address) is either missing or null when your Lambda function attempts to send the email.\nHere are some potential causes and solutions:\nEnvironment Variable Issues\n: While you mentioned that your environment variables are correctly read in Lambda logs, there might be an issue with how they're being accessed or processed in your code. Double-check that the FROM_EMAIL value is properly assigned to the 'source' field in your SendEmailCommand parameters.\nCode Execution Flow\n: There might be a conditional statement or asynchronous operation in your code that's causing the source parameter to be undefined when the SendEmailCommand is executed. Ensure that your environment variables are fully loaded before attempting to send the email.\nParameter Structure\n: Verify that your params object is correctly structured according to the SES API requirements. The 'source' field needs to be properly defined in the SendEmailCommand parameters.\nLambda Execution Context\n: Lambda functions can sometimes behave differently than local environments due to the execution context. Make sure your code handles any potential race conditions or timing issues.\nSES Sandbox Restrictions\n: While in the SES sandbox, you can only send emails to verified addresses. Ensure that both your sender and recipient addresses are verified in SES. This is different from the console test, which might have different verification requirements.\nTo troubleshoot further:\nAdd more detailed logging right before the SendEmailCommand call to verify the exact structure of your params object\nTry hardcoding the source email address directly in your code (temporarily) to see if that resolves the issue\nCheck if there are any transformations or manipulations of the environment variables that might be causing the source to become null\nEnsure your Lambda function has enough execution time and memory allocated\nIf these steps don't resolve the issue, requesting production access might help, but it's important to fix the underlying validation error first, as it suggests a code or configuration issue rather than a sandbox limitation.\nSources\nsending email from lambda function within private subnet in vpc | AWS re:Post\nGetting \"Unverified\" when sending emails with AWS SES using a verified email with my company domain | AWS re:Post\nSend Mail on AWS Lambda NodeJS with Nodemailer | AWS re:Post\n\nI agree, the logs show that FROM_EMAIL is being read and passed correctly. But from past experience, SES\u2019s \"ValidationError: source must not be null\" error can still happen in cases where the value looks right but fails internal validation especially if:\nThe email isn\u2019t verified in the same region (us-east-2)\nThe SDK request silently fails due to encoding issues or invisible characters\nThe SES sandbox enforces more strict validation via the SDK/API than what the Console UI does\nEven if the email is technically present, SES may be rejecting it before it hits the sending phase.\nTo move forward, I\u2019d suggest testing:\nWrapping process.env.FROM_EMAIL in .trim() (just in case)\nConfirming the email is verified in us-east-2\nTrying sendRawEmail() instead of sendEmail() , that sometimes helps isolate whether the issue is with request structure vs. SES identity checks.\nTotally understand where you're coming from, and agree the error message is misleading."
}