{
  "body": "I lost the connection to my Amazon Elastic Compute Cloud (Amazon EC2) instance, and I want to restore access.\n\nShort description\nFirst, troubleshoot the EC2 instance based on the instance and system statuses.\nIf you still can't connect, then restore your SSH, EC2 Instance Connect, or Session Manager, a capability of AWS Systems Manager, connection. Or, use the EC2 Serial Console to try to restore your connection.\nNote:\nTypically, you use the EC2 Serial Console only to troubleshoot issues, not to perform standard processes.\nIf your connection method isn't working, then use another connection method to access your instance and troubleshoot issues.\nIf you still can't restore your connection, then use a rescue instance to check the affected instance's logs for errors.\nResolution\nNote:\nIf you receive errors when you run AWS Command Line Interface (AWS CLI) commands, then see\nTroubleshooting errors for the AWS CLI\n. Also, make sure that\nyou're using the most recent AWS CLI version\n.\nCheck your instance and system status\nUse the Amazon EC2 console\nto check whether\nSystem status\nand\nInstance status\nboth show\nOK\n. You can also\nuse Amazon CloudWatch metrics\nto check the status of your instance and identify issues that affect connectivity.\nNote:\nIt's a best practice to check for\nscheduled maintenance\nand other events that can affect the instance connectivity.\nIf\nSystem status\nisn't\nOK\n, then the issue might be the AWS infrastructure. To resolve this issue, see\nWhy did my EC2 Linux instance fail a system status check?\nIf the\nInstance status\nisn't\nOK\n, then\nreboot your instance\n. An instance reboot typically resolves minor issues. If you still can't connect, then\nstop and start your instance\nto migrate the instance to a healthy hardware.\nNote:\nWhen you stop and start an instance, the instance's public IP address changes. It's a best practice to\nuse an Elastic IP address\nto route external traffic to your instance instead of a public IP address.\nRestore your SSH connection\nReview your security group rules\nMake sure that inbound security group rules allow access to port 22 from your IP address. To check your security group rules, run the following\ndescribe-security-groups\nAWS CLI command:\naws ec2 describe-security-groups --group-ids SG-IDs\nNote:\nReplace\nSG-IDs\nwith your security group IDs.\nIf you can't access port 22, then run the following\nauthorize-security-group-ingress\ncommand to update your rules to allow access:\naws ec2 authorize-security-group-ingress --group-id SG-ID --protocol tcp --port 22 --cidr SOURCE-IP/32\nNote:\nReplace\nSG-ID\nwith your security group ID and\nSOURCE-IP\nwith your source IP address. If the source IP address is a public IP address, you can use the\ncheckip.amazonaws\ntool to identify the IP address.\nReview your network ACLs\nBy default,\nnetwork access control lists (network ACLs) allow all inbound and outbound traffic\n. Make sure that your network ACLs allow inbound SSH access to the instance and outbound access to ephemeral ports (1024-65535). If the network ACLs block port 22, then\nadd a new rule\nto allow the traffic. For public IP addresses, make sure that the\nroute table has an entry that routes traffic to an internet gateway\n.\nReview your username and IP address settings\nMake sure that you use the\ncorrect username\nfor your instance. Then, connect to the instance from a public IP address.\nNote:\nIf you connect from a private IP address, then make sure that you have a working network connection to the destination instance.\nCheck the SSH server status\nTo check the status of the SSH server, use\nSession Manager\n,\nEC2 Instance Connect\nor the\nEC2 Serial Console\nto connect to the instance.\nRun the following command to check the status of the SSH service based on your distribution:\nSystems that use systemd:\nsudo systemctl status sshd\nUbuntu or Debian systems:\nsudo systemctl status ssh\nLegacy systems, such as CentOS 6:\nsudo service sshd status\nIf the SSH service status is\nStopped\n, then run the following command to start the service based on your distribution:\nSystems that use systemd:\nsudo systemctl start sshd\nUbuntu or Debian systems:\nsystemctl start ssh\nLegacy systems, such as CentOS 6:\nsudo service sshd start\nReview your private key file permissions\nMake sure that your\nprivate key file has the read-only permission\n.\nTest network connectivity\nTo test connectivity to port 22, run one of the following commands from your client:\nnc -zv Host 22\n-or-\ntelnet Host 22\nNote:\nReplace\nHost\nwith your IP address or the fully qualified domain name (FQDN).\nThen, run the following command to use SSH connect to your instance in verbose mode:\nssh -i key_pair.pem user@Host -vvv\nNote:\nReplace\nHost\nwith your IP address or the FQDN.\nTo troubleshoot connection issues, see,\nHow do I troubleshoot \"Connection refused\" or \"Connection timed out\" errors when I use SSH to connect to my EC2 instance?\nand\nTroubleshoot issues connecting to your Amazon EC2 Linux instance\n.\nRestore your EC2 Instance Connect connection\nFirst, use\nSSH\n,\nSession Manager\nor the\nEC2 Serial Console\nto connect to your instance to make sure that you\ninstalled EC2 Instance Connect\n. Then,\nuse EC2 Instance Connect to connect to the instance\n.\nIf you experience issues when you use EC2 Instance Connect, then take the following actions:\nMake sure that you\nallow inbound SSH traffic\non port 22 for the\ncom.amazonaws.region.ec2-instance-connect\nprefix list name.\nVerify that your AWS Identity and Access Management (IAM) user's policy includes the\nec2-instance-connect:SendSSHPublicKey\naction.\nIf you still experience issues, then see\nHow do I troubleshoot issues when I use EC2 Connect to connect to my EC2 instance?\nUse the EC2 Serial Console to restore connection\nPrerequisite:\nConfigure\naccess to the EC2 Serial Console\n.\nTo use the EC2 Serial Console to connect to your instance, you can use the\nAmazon EC2 console\nor\nSSH\n. For more information, see\nHow do I access the EC2 Serial Console of an unreachable or inaccessible Linux instance?\nAfter you connect,\ntroubleshoot your instance\nfor boot, network configuration, or other issues.\nIf you experience issues when you use EC2 Serial Console, then make sure that your IAM policy includes the\nec2-instance-connect:SendSerialConsoleSSHPublicKey\naction.\nAfter you use the EC2 Serial Console to connect to your instance, you can\nuse GRUB to troubleshoot\n.\nRestore your Session Manager connection\nSession Manager manages authentication only through IAM roles and permissions instead of through SSH keys. Before you use Systems Manager, make sure that you adhere to the\nprerequisites for Session Manager\n. Then, use\nSession Manager to connect to your instance\n.\nIf you experience issues when you use Session Manager, then take the following actions.\nCheck your IAM roles\nConfirm that the instance has an IAM role with the\nAmazonSSMManagedInstanceCore\npolicy attached.\nOr, make sure that the role has the following required permissions:\nssmmessages:CreateControlChannel\nssmmessages:CreateDataChannel\nssmmessages:OpenControlChannel\nssmmessages:OpenDataChannel\nYou can\nadd the required Session Manager permissions\nto an existing role.\nNote:\nIf you use\nDefault Host Management Configuration to manage your instances\n, then you don't need to create an IAM instance profile to manage instances.\nIf you update the permissions, then\ndetach and reattach the IAM role\n. Wait for couple of minutes, and then\nstart AWS Systems Manager Agent (SSM Agent)\nor\nstart the instance\n.\nTroubleshoot the SSM Agent status\nVerify that you installed SSM Agent on the instance\n.\nUse\nSSH\n,\nEC2 Serial Console\n, or\nEC2 Instance Connect\nto connect to your instance, and then run the following commands for systems that use systemd:\nsudo systemctl status amazon-ssm-agent\nsudo systemctl start amazon-ssm-agent  # if stopped\nFor Debian or Ubuntu systems, run the following commands:\nsudo systemctl status snap.amazon-ssm-agent.amazon-ssm-agent.service\nsudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service  # if stopped\nTo verify that SSM Agent is running,\ncheck the system log\n.\nIt's a best practice to use the latest version of SSM Agent. To check whether you have the latest version, see\namazon-ssm-agent/RELEASENOTES\non the GitHub website. If you don't have the latest version, then\ninstall an updated SSM Agent based on your operating system (OS)\n.\nTo further troubleshoot, check the\n/var/log/amazon/ssm/amazon-ssm-agent.log\nlogs\nfor errors. Or, see\nTroubleshooting SSM Agent\n.\nVerify network connectivity\nMake sure that your network ACLs and security groups allow an outbound connection to the Systems Manager endpoint on port 443.\nIf your instance doesn't appear in Session Manager, then see\nWhy isn't Systems Manager showing my Amazon EC2 instance as a managed instance?\nFor private instances,\ncreate virtual private cloud (VPC) endpoints\n. For\nService name\n, select\ncom.amazonaws.REGION.ssm\nand\ncom.amazonaws.REGION.ssmmessages\n.\nNote:\nReplace\nREGION\nwith your AWS Region.\nThe security group that you attach to the VPC endpoints must allow inbound traffic on port 443.\nFor more information, see\nUnable to connect to SSM endpoints\n.\nCheck for missing prerequisites\nUse\nSSH\n,\nEC2 Serial Console\n, or\nEC2 Instance Connect\nto connect to your instance, and then run the following command to\ntroubleshoot managed node availability\n:\nsudo ssm-cli get-diagnostics --output table\nCheck the output for Session Manager prerequisites that you're missing.\nOr,\nrun one of the following Systems Manager runbooks\nto automatically check for missing prerequisites:\nRun\nAWSSupport-TroubleshootManagedInstance\nto check your VPC configuration, including security group rules, VPC endpoints, network ACL rules, route tables, and IAM profiles.\nRun the\nAWSSupport-TroubleshootSessionManager\nto check whether you adhere to\nSession Manager prerequisites\n.\nCheck instance console logs\nIf you can't use the preceding methods to connect to your instance, then run the following\nuser data\nscript to restore the Session Manager connection:\nContent-Type: multipart/mixed; boundary=\"//\"\nMIME-Version: 1.0\n--//\nContent-Type: text/cloud-config; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"cloud-config.txt\"\n#cloud-config\ncloud_final_modules:\n- [scripts-user, always]\n--//\nContent-Type: text/x-shellscript; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nContent-Disposition: attachment; filename=\"userdata.txt\"\n\n#!/bin/bash\n\nsudo ssm-cli get-diagnostics --output table >> /dev/console\n# or\nsudo ssm-cli get-diagnostics --output table >> /dev/ttyS0\nThen, check the\ninstance console output\nto identify the connection step that's failing. After you troubleshoot the failing step,\nuse Session Manager to test your connection\n.\nIf you still can't connect, then\nuse a rescue instance to troubleshoot boot issues\n.\nRelated information\nWhy can't I connect to my EC2 instance?"
}