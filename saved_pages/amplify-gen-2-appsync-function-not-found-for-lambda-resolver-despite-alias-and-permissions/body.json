{
  "body": "Hi AWS Community,\nI'm encountering a persistent ResourceNotFoundException in my Amplify Gen 2 project when AppSync tries to resolve a GraphQL mutation by invoking a Lambda function. The error specifically states Function not found: arn:aws:lambda:us-east-2:ACCOUNT_ID:function:stripeCheckout, even though the Lambda exists, has an alias named \"stripeCheckout\", and I believe permissions are correctly set.\nProject Setup:\nFramework: AWS Amplify Gen 2 (using TypeScript with CDK for backend definitions)\nRegion: us-east-2\nGoal: Integrate Stripe for subscriptions. The createStripeCheckoutSession mutation is failing.\nError Message from Client (via AppSync):\n{\n  \"data\": {\n    \"createStripeCheckoutSession\": null\n  },\n  \"errors\": [\n    {\n      \"path\": [\n        \"createStripeCheckoutSession\"\n      ],\n      \"data\": null,\n      \"errorType\": \"Lambda:IllegalArgument\",\n      \"errorInfo\": null,\n      \"locations\": [/* ... */],\n      \"message\": \"software.amazon.awssdk.services.lambda.model.ResourceNotFoundException: Function not found: arn:aws:lambda:us-east-2:970547380883:function:stripeCheckout (Service: Lambda, Status Code: 404, Request ID: <some-uuid>) (SDK Attempt Count: 1)\"\n    }\n  ]\n}\nRelevant amplify/data/resource.ts (GraphQL Schema Definition):\nimport { a, defineData } from \"@aws-amplify/backend\";\n\nconst dataSchema = a.schema({\n  // ... other models ...\n\n  CreateStripeCheckoutSessionInput: a.customType({\n    subscriptionTierId: a.string().required(),\n    successUrl: a.string().required(),\n    cancelUrl: a.string().required(),\n  }),\n\n  StripeCheckoutSessionPayload: a.customType({\n    sessionId: a.string(),\n    sessionUrl: a.string(),\n    error: a.string(),\n  }),\n\n  // ... other types and models ...\n\n  createStripeCheckoutSession: a\n    .mutation()\n    .arguments({ input: a.ref(\"CreateStripeCheckoutSessionInput\").required() })\n    .returns(a.ref(\"StripeCheckoutSessionPayload\"))\n    .authorization((allow) => [allow.authenticated()])\n    .handler(a.handler.function(\"stripeCheckout\")), // <--- Logical handler name\n\n  // Example of another (working) function handler:\n  getCurrentUserSubscription: a\n    .query()\n    .returns(a.ref(\"UserSubscription\"))\n    .authorization((allow) => [allow.authenticated()])\n    .handler(a.handler.function(\"getUserSubFunc\")),\n\n  // ... other mutations/queries ...\n});\n\nexport const data = defineData({\n  schema: dataSchema,\n  authorizationModes: { /* ... */ }\n});\nRelevant amplify/backend.ts (CDK Backend Definition):\nimport { defineBackend } from \"@aws-amplify/backend\";\nimport { data } from \"./data/resource\"; // Imports the schema above\nimport { stripeCheckoutFunc } from \"./functions/stripeCheckout/resource\"; // Definition of the Lambda\nimport { getCurrentUserSubscriptionFunc } from \"./functions/getCurrentUserSubscription/resource\";\n// ... other function imports ...\nimport { Alias, CfnPermission } from \"aws-cdk-lib/aws-lambda\";\nimport { Stack } from \"aws-cdk-lib\";\n\nconst backend = defineBackend({\n  data: data,\n  stripeCheckoutFunc: stripeCheckoutFunc,\n  getCurrentUserSubscriptionFunc: getCurrentUserSubscriptionFunc,\n  // ... other functions ...\n});\n\nconst dataStack = Stack.of(backend.data as any);\n\n// Alias for stripeCheckoutFunc\nconst stripeCheckoutFuncAlias = new Alias(dataStack, \"stripeCheckoutFuncAlias\", {\n  aliasName: \"stripeCheckout\", // Alias is NAMED \"stripeCheckout\"\n  version: backend.stripeCheckoutFunc.resources.lambda.latestVersion,\n});\n\n// Alias for a working function (example)\nconst getUserSubFuncAlias = new Alias(dataStack, \"getUserSubFuncAlias\", {\n  aliasName: \"getUserSubFunc\",\n  version: backend.getCurrentUserSubscriptionFunc.resources.lambda.latestVersion,\n});\n\n// Permission for AppSync to invoke the stripeCheckout ALIAS\nnew CfnPermission(dataStack, 'StripeCheckoutFuncAliasAppSyncInvoke', {\n  action: 'lambda:InvokeFunction',\n  principal: 'appsync.amazonaws.com',\n  functionName: stripeCheckoutFuncAlias.functionArn, // Using Alias ARN\n  sourceArn: backend.data.resources.cfnResources.cfnGraphqlApi.attrArn\n});\n\n// Permission for a working function (example)\nnew CfnPermission(dataStack, 'GetUserSubFuncAppSyncInvoke', {\n  action: 'lambda:InvokeFunction',\n  principal: 'appsync.amazonaws.com',\n  functionName: getUserSubFuncAlias.functionArn, // Using Alias ARN\n  sourceArn: backend.data.resources.cfnResources.cfnGraphqlApi.attrArn\n});\n\n// ... other permissions and configurations ...\nLambda Function Details:\nThe actual deployed Lambda for Stripe checkout has a physical name like\namplify-greeetsamplify-gr-stripeCheckoutlambdaA793-mAz1cJj8xyzt\n.\nIt has an alias named\nstripeCheckout\nwhich points to\n$LATEST\n.\nWhat I've Tried/Verified:\nAlias Exists: The \"stripeCheckout\" alias for the Lambda is correctly created and points to the latest version.\nCfnPermission\nTargets Alias ARN: The\nCfnPermission\n(\nStripeCheckoutFuncAliasAppSyncInvoke\n) uses\nstripeCheckoutFuncAlias.functionArn\nto grant AppSync permission to invoke the specific alias.\nComparison with Working Function: Other functions (e.g.,\ngetCurrentUserSubscriptionFunc\nwith alias\ngetUserSubFunc\n) are defined with a similar pattern in\ndata/resource.ts\n(using a logical name like \"\ngetUserSubFunc\n\" in\na.handler.function())\nand backend.ts (alias creation and\nCfnPermission\ntargeting the alias ARN), and they work correctly. AppSync seems to resolve their logical names to the correct alias ARNs.\nNo Typos: The logical name \"stripeCheckout\" in a.handler.function(\"stripeCheckout\") matches the aliasName: \"stripeCheckout\" for stripeCheckoutFuncAlias.\nThe Puzzle:\nWhy is AppSync attempting to invoke\narn:aws:lambda:us-east-2:ACCOUNT_ID:function:stripeCheckout\n(using the short, logical name as the function's physical name) instead of the actual physical Lambda ARN or, preferably, the\nstripeCheckoutFuncAlias\n.\nfunctionArn\nfor the\ncreateStripeCheckoutSession\nmutation? This behavior is inconsistent with other working Lambda resolvers in the same project.\nIs there an edge case or a specific nuance in Amplify Gen 2's\na.handler.function\n(\"logicalName\") resolution when the logical name might be too simple, or perhaps when it exactly matches an alias name, that could cause it to form an incorrect ARN for the AppSync data source? How can I ensure Amplify correctly configures the AppSync data source for\ncreateStripeCheckoutSession\nto use the\nstripeCheckoutFuncAlias.functionArn\n?\nAny insights or suggestions on how to debug or resolve this AppSync data source misconfiguration within the Amplify Gen 2 framework would be greatly appreciated!\n\nBased on your description, it appears you're encountering an issue with AWS AppSync trying to invoke a Lambda function using an incorrect ARN format. This is likely related to how AppSync resolves the function name in your GraphQL resolver configuration.\n\nWhen you use `a.handler.function(\"stripeCheckout\")` in your schema definition, AppSync is looking for a Lambda function with the exact name \"stripeCheckout\" rather than resolving to your Lambda alias. This is why you're seeing the error message indicating that the function `arn:aws:lambda:us-east-2:ACCOUNT_ID:function:stripeCheckout` cannot be found.\n\nIn AWS AppSync, when configuring Lambda resolvers, the system needs to know the exact ARN of the Lambda function or alias to invoke. The logical name you provide in `a.handler.function()` needs to map correctly to the actual Lambda resource.\n\nHere are some potential solutions:\n\n1. Make sure the Lambda function's name or alias is correctly referenced in your AppSync configuration. The function name in your handler should match how AppSync is configured to find that function.\n\n2. Check if there's a mismatch between how the Lambda data source is defined in AppSync and how you're referencing it in your resolver. AppSync needs to have a data source that correctly points to your Lambda function or alias.\n\n3. Verify that the IAM permissions are correctly set up not just for the Lambda function but also for the specific alias you're trying to use. The permission should explicitly allow AppSync to invoke the function using the alias ARN.\n\n4. Consider checking if there's a specific way in Amplify Gen 2 to reference Lambda aliases in GraphQL resolvers that differs from your current approach.\n\n5. If you're using pipeline resolvers, ensure that each function in the pipeline is correctly configured to use the appropriate Lambda function or alias.\n\nSince you mentioned that other Lambda resolvers are working correctly in your project, it might be helpful to compare the configurations between the working resolvers and the problematic one to identify any subtle differences.\nSources\nAWS::Serverless::GraphQLApi - AWS Serverless Application Model\nUsing AWS Lambda resolvers in AWS AppSync - AWS AppSync\nAWS AppSync JavaScript resolver function reference for Lambda - AWS AppSync\nAWS AppSync resolver mapping template reference for Lambda - AWS AppSync"
}