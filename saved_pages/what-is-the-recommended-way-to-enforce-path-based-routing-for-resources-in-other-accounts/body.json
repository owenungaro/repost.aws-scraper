{
  "body": "I have several ECS services each in their own account (B, C, etc.), and I have my domain and DNS records hosted in another account (A) that is separate from the service accounts. I need a way to enforce path-based routing to my services using a single domain. Any requests made to company.com/api/v1/* should go to service account B, and any requests made to company.com/* or company.com/api/v1/web/* should go to account C. This seems like a very common use case, but I am struggling to find a solution for some reason.\nOne thing I have tried is creating an HTTP API Gateway in account A, NLBs in accounts B and C, and using PrivateLink to create an Interface Endpoint between account A and accounts B and C. The issue I faced here was that there does not appear to be a way to create an integration for the VPC Endpoint. When I choose HTTP URI as the integration type and add my VPC Endpoint's DNS name as the URL, I get the error\nInvalid hostname. VPC endpoints cannot be referenced directly. Create a vpcLink and set the ConnectionType and ConnectionId instead.\nIt seems that you must have the NLB in the same account as the gateway. Perhaps I am mistaken, but if not, is there another way to achieve this?\n\nYes, you can implement path-based routing for resources across multiple AWS accounts. There are a few approaches to solve this:\nOption 1: HTTP API with VPC Links\nFor HTTP APIs, you can create VPC Links in account A (where your API Gateway resides) that connect to your services in accounts B and C. The key is that the VPC Link must exist in the same account as the API Gateway. You have three options for the VPC Link target:\nApplication Load Balancer (ALB)\nNetwork Load Balancer (NLB)\nAWS Cloud Map\nYou would then set up path-based routing in your API Gateway to direct traffic to the appropriate VPC Link based on the URL path.\nOption 2: AWS PrivateLink with API Gateway\nYou can use AWS PrivateLink to establish private connectivity between your accounts. In this setup:\nCreate a VPC endpoint (Interface Endpoint) for API Gateway in account A\nSet up Private REST APIs in accounts B and C\nAdd resource policies to the Private APIs to allow access from the VPC endpoint in account A\nConfigure Route 53 private hosted zones to properly resolve the Private API Gateway endpoints\nOption 3: AWS Migration Hub Refactor Spaces\nFor a more managed solution, AWS Migration Hub Refactor Spaces can help orchestrate the necessary AWS infrastructure for routing API calls across multiple accounts. It automatically configures API Gateway, Network Load Balancer, and IAM policies across your AWS accounts. You would only need to configure the service endpoint and the route, and Refactor Spaces would handle the API Gateway-Lambda integration and creation of Lambda resource policies.\nOption 4: Cross-account ALB with VPC Link\nYou can create an ALB in account A that points to the VPC endpoint private IP addresses of the PrivateLink connections to accounts B and C. Then create a VPC Link in account A that connects to this ALB. This allows your API Gateway in account A to route to services in accounts B and C based on path patterns.\nFor all these options, ensure you have proper IAM permissions set up to allow cross-account access, and that security groups and route tables are configured to allow traffic between the VPCs and endpoints.\nSources\nCan a vpc Link be used for a HTTP API (Account A) to trigger a private rest api in account B through a VPC endpoint using Cloud Map | AWS re:Post\nCan we associate Centralize VPC endpoint (execute API) with Private Rest API gateway | AWS re:Post\nHTTP API - Best Practices for Designing Amazon API Gateway Private APIs and Private Integration\nStrangler fig pattern - AWS Prescriptive Guidance\n\nYou're absolutely right, this is a common setup, but the path to get it working across accounts isn\u2019t obvious.\nThe key point is: API Gateway does not support using VPC Endpoints or PrivateLink directly as integration targets. That\u2019s why you\u2019re seeing the Invalid hostname. VPC endpoints cannot be referenced directly error.\n****\nRecommended Architecture for Cross-Account Path-Based Routing:\nKeep API Gateway and domain (e.g., company.com) in Account A\nDeploy your ECS services behind NLBs in accounts B and C\nUse AWS Resource Access Manager (RAM) to share those NLBs (and their VPCs) with Account A\nIn Account A:\n--> Create VPC Links to the shared NLBs from B and C\n--> Create path-based routes in API Gateway pointing to the correct VPC Link for each service\n--> /api/v1/* \u2192 service in Account B\n\n            --> /api/v1/web/* and / \u2192 service in Account C\nUse a custom domain mapping in API Gateway to serve company.com\nThis avoids the need for PrivateLink and works cleanly with API Gateway\u2019s supported integration types.\nNote:\nThis model scales well if you add more service accounts later\nYou can add authentication, WAF, caching, or rate limiting at the API Gateway layer\n\nAPI Gateway does not support integrating with VPC links in a different account. The solution is to use an NLB in your own account that somehow connects to the service in the other account.\nOne option is to front the other services with a private API and then create a VPC Endpoint to API Gateway in your own account. Forward the NLB to that Endpoint, which can access private APIs in other accounts. You can find information about it\nhere\n, specifically in the Regional API Gateway to private API Gateway cross-account section. You can also find information\nhere\n.\nAnother option is to route the NLB to the a LB in the other account by using VPC peering or VPC Endpoints with Endpoint Service."
}