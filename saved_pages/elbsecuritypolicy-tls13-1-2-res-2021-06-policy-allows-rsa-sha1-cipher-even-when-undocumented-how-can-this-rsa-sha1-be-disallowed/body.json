{
  "body": "Hi,\nIt appears that using the recommended  ELBSecurityPolicy-TLS13-1-2-Res-2021-06 ELB policy still allows for a deprecated algorithm signature: RSA+SHA1. Given that RSA1 is now considered deprecated and the recommendation is to stop allowing it, how can this one be disallowed? This signature is also not documented as allowed in the link here:\nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/application/describe-ssl-policies.html\nThis can be checked using testssl as below:\ndocker run --rm  drwetter/testssl.sh -f\nhttps://example-website-with-this-policy.com\nTesting robust forward secrecy (FS) -- omitting Null Authentication/Encryption, 3DES, RC4\n\n FS is offered (OK)           TLS_AES_256_GCM_SHA384\n                              TLS_CHACHA20_POLY1305_SHA256\n                              ECDHE-RSA-AES256-GCM-SHA384\n                              TLS_AES_128_GCM_SHA256\n                              ECDHE-RSA-AES128-GCM-SHA256\n Elliptic curves offered:     prime256v1 secp384r1 secp521r1 X25519\n TLS 1.2 sig_algs offered:    RSA-PSS-RSAE+SHA256 RSA-PSS-RSAE+SHA384\n                              RSA-PSS-RSAE+SHA512 RSA+SHA256 RSA+SHA384\n                              RSA+SHA512 RSA+SHA224 RSA+SHA1\n TLS 1.3 sig_algs offered:    RSA-PSS-RSAE+SHA256 RSA-PSS-RSAE+SHA384\n                              RSA-PSS-RSAE+SHA512\nNotice the last sig offered for TLS 1.2 to be RSA+SHA1\nUPDATE: Indeed, the documentation describes just the encryption cyphers, and it would appear that SHA1 is not allowed as an encryption cypher, but allowed as a signature algorithm:\nThe below command can verify that (assuming that your open_ssl client has rsa_pkcs1_sha1 as supported algorithm)\nopenssl s_client -connect\n<HOST>\n:443 -tls1_2 -sigalgs rsa_pkcs1_sha1 -cipher 'ECDHE-RSA-AES256-GCM-SHA384'\nwill contain the following:\nPeer signing digest: SHA1\nPeer signature type: RSA\n\nA cipher suite is a collection of algorithms that define how TLS will secure a connection.\nSignatures in TLS are used during the handshake phase to authenticate participants and ensure the integrity of exchanged messages\nThe one in question are specified using signature_algorithms during TLS negotiation (separate from the cipher suite).\nHow They Work Together\nThe cipher suite might specify ECDHE_RSA, meaning key exchange is done with ECDHE, and the certificate is authenticated using an RSA key.\nThe signature algorithm (e.g., rsa_pss_rsae_sha256) tells how exactly the RSA key signs handshake messages.\nThey must be compatible, but are negotiated and specified separately.\nThe AWS documentation only list Ciper Suites\n\nThanks Gary, does that mean that actually SHA1 is allowed as a signing algorithm, but not as part of the cipher suite?\n\nYou're right \u2014>RSA+SHA1 should ideally not appear in a modern security policy like ELBSecurityPolicy-TLS13-1-2-Res-2021-06, especially since SHA1 is deprecated and considered insecure.\nI assume this is What\u2019s happening:\nWhile AWS documentation doesn't explicitly list RSA+SHA1 in the TLS 1.2 sig_algs, OpenSSL-based scanners (like testssl.sh) still show RSA+SHA1 in the signature algorithm negotiation for TLS 1.2. This doesn\u2019t necessarily mean the cipher is used \u2014 just that it\u2019s advertised as available during handshake negotiation.\nAWS currently doesn\u2019t allow you to customize or remove individual sig_algs from managed policies like ELBSecurityPolicy-TLS13-1-2-Res-2021-06. This is a limitation in how the policies are provisioned.\nHow to mitigate or disallow RSA+SHA1:\nOption 1: Use TLS 1.3 only (where supported)\nTLS 1.3 does not use SHA1 anywhere in its handshake or cipher negotiation.\nRestrict your listener to TLS 1.3 only via the AWS CLI or console (note: not all clients support this yet).\nOption 2: Use a custom security policy (if feasible)\nWhile AWS Application Load Balancer does not support fully custom cipher suites, if you're using Network Load Balancer with TLS, you can define a custom TLS security policy.\nBut with ALBs, you're limited to AWS-managed policies \u2014 so the best you can do is:\nOption 3: Enforce stronger client cipher preference\nClients like modern browsers and APIs will prefer RSA-PSS or SHA2-based signatures first.\nWeak options like RSA+SHA1 will only be negotiated with outdated clients.\nOption 4: Log and block outdated clients\nUse AWS WAF or CloudFront headers to identify user-agents or TLS versions and block legacy traffic manually.\nOr at a minimum, raise visibility for connections using legacy sig_algs.\nNote: There is no way to remove it from AWS-managed ALB policies today.\nTo fully eliminate SHA1 exposure, use TLS 1.3-only listener or use NLB with a custom policy.\n\nLiviu, Yes, SHA1 can still appear in the TLS handshake:\nEven though SHA1 is not in any AWS-documented cipher suite, it can still show up as a supported signature algorithm (RSA+SHA1) during the TLS 1.2 handshake negotiation.\nThis is because:\nCipher suites define encryption, key exchange, and MAC.\nSignature algorithms (like RSA+SHA1, RSA-PSS+SHA256) are negotiated separately via the signature_algorithms extension in TLS 1.2+.\nAWS only lists cipher suites, not signature algorithms \u2014 so SHA1's presence is undocumented, but real.\nNote:\nCustom NLB TLS policy: Only NLB (not ALB) allows fine-grained cipher control via custom security policies.\nTerminate TLS upstream (e.g., CloudFront or nginx) if you want full control"
}