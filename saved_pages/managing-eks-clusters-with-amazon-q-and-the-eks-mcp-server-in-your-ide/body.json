{
  "body": "This guide provides step-by-step instructions for configuring and using the Amazon EKS Model Context Protocol (MCP) Server, sourced from https://awslabs.github.io/mcp/servers/eks-mcp-server/, with Amazon Q Developer in your Integrated Development Environment (IDE). It enables conversational management of Amazon Elastic Kubernetes Service (EKS) clusters and Kubernetes resources, streamlining infrastructure tasks directly within your editor.\n\nOverview\nThe Amazon EKS MCP Server is an open-source tool that integrates Amazon Q Developer with your EKS environment. It translates natural language prompts into AWS and Kubernetes API calls, providing real-time insights into cluster status, logs, and events, enhancing development and operational workflows.\nThe Problem\nManaging EKS clusters often involves context-switching between the AWS Management Console, CLI tools like\nkubectl\nor\neksctl\n, and writing Infrastructure as Code (IaC). This disrupts productivity. While generative AI can produce Kubernetes manifests or IaC templates, it often lacks real-time awareness of your EKS environment, leading to generic or outdated outputs.\nThe Solution: The Amazon EKS MCP Server\nThe EKS MCP Server is a lightweight, local tool that runs in your IDE via Amazon Q. It leverages the AWS Labs EKS MCP Server (\nawslabs.eks-mcp-server\n) to interact with EKS and Kubernetes APIs, enabling context-aware management through natural language.\nKey Features\nConversational Management\n: Create, describe, update, or delete EKS clusters and Kubernetes resources using English prompts.\nEnvironment Discovery\n: Query active EKS clusters, nodes, pods, or other resources (e.g., \"list all pods in my cluster\").\nTroubleshooting Support\n: Retrieve logs, events, or search the EKS Troubleshoot Guide (e.g., \"why is my pod crashing?\").\nManifest and Template Generation\n: Generate Kubernetes manifests or CloudFormation templates based on interactions.\nSecure Operations\n: Uses AWS authentication and Kubernetes RBAC, with configurable read-only modes.\nPrerequisites\nPython 3.10+\n: Install Python 3.10 or higher (\npython.org\nor\nbrew install python@3.10\non macOS).\nuv Package Manager\n: Install\nuv\nto use the\nuvx\ncommand (\nbrew install uv\non macOS or follow\ninstructions\n).\nAWS CLI\n: Install and configure with credentials (\naws configure\n) or set environment variables (\nAWS_ACCESS_KEY_ID\n,\nAWS_SECRET_ACCESS_KEY\n,\nAWS_DEFAULT_REGION\n).\nIAM Permissions\n: Attach the following policies to your IAM user or role:\nRead-Only Operations\n:\n{\n\"Version\"\n:\n\"2012-10-17\"\n,\n\"Statement\"\n:\n[\n{\n\"Effect\"\n:\n\"Allow\"\n,\n\"Action\"\n:\n[\n\"eks:DescribeCluster\"\n,\n\"cloudformation:DescribeStacks\"\n,\n\"cloudwatch:GetMetricData\"\n,\n\"logs:StartQuery\"\n,\n\"logs:GetQueryResults\"\n,\n\"iam:GetRole\"\n,\n\"iam:GetRolePolicy\"\n,\n\"iam:ListRolePolicies\"\n,\n\"iam:ListAttachedRolePolicies\"\n,\n\"iam:GetPolicy\"\n,\n\"iam:GetPolicyVersion\"\n]\n,\n\"Resource\"\n:\n\"*\"\n}\n]\n}\nWrite Operations\n(use only in trusted environments):\nFor write operations, we recommend the following IAM policies to ensure successful deployment of EKS clusters using the CloudFormation template in\n/awslabs/eks_mcp_server/templates/eks-templates/eks-with-vpc.yaml\n:\nIAMFullAccess\n: Enables creation and management of IAM roles and policies required for cluster operation\nAmazonVPCFullAccess\n: Allows creation and configuration of VPC resources including subnets, route tables, internet gateways, and NAT gateways\nAWSCloudFormationFullAccess\n: Provides permissions to create, update, and delete CloudFormation stacks that orchestrate the deployment\nEKS Full Access (provided below)\n: Required for creating and managing EKS clusters, including control plane configuration, node groups, and add-ons\n{\n\"Version\"\n:\n\"2012-10-17\"\n,\n\"Statement\"\n:\n[\n{\n\"Effect\"\n:\n\"Allow\"\n,\n\"Action\"\n:\n\"eks:*\"\n,\n\"Resource\"\n:\n\"*\"\n}\n]\n}\nImportant Security Note\n: Users should exercise caution when\n--allow-write\nand\n--allow-sensitive-data-access\nmodes are enabled with these broad permissions, as this combination grants significant privileges to the MCP server. Only enable these flags when necessary and in trusted environments. For production use, consider creating more restrictive custom policies.\nExample of the user/role with Read & Write access:\nKubernetes API Access\n:\nYour IAM principal must have created the EKS cluster or have an EKS Access Entry configured (\naws eks create-access-entry --cluster-name <name> --principal-arn <your-arn>\n).\nConfigure\nkubectl\n:\naws eks update-kubeconfig --name <cluster-name> --region us-west\n-2\nIDE with Amazon Q\n: Use Visual Studio Code or JetBrains with the latest AWS Toolkit and Amazon Q extension installed.\nConfiguration Steps\nFollow these steps to configure the EKS MCP Server in Visual Studio Code.\nOpen MCP Server Settings\n:\nOpen VS Code and access the sidebar (\nCtrl+B\nor\nCmd+B\n).\nClick the AWS Toolkit icon (AWS logo) in the sidebar.\nIn the AWS Toolkit panel, select the Amazon Q\nChat\ntab.\nClick the\ntools\nicon (gear or wrench) to open the MCP Servers configuration screen.\nAdd a New Server\n:\nClick the plus (+) icon to add a new MCP server.\nConfigure the following:\nScope\n: Select \"Global\" for all projects or \"This workspace\" for the current workspace.\nName\n:\nEKSMCPserver\nTransport\n:\nstdio\n(only supported protocol).\nCommand\n:\nuvx\nArguments\n:\nAdd:\nawslabs.eks-mcp-server@latest\n(Optional for safety): Add\n--allow-write\nonly for write operations.\nEnvironment Variables\n:\nAdd\nAWS_PROFILE\nwith your profile name (e.g.,\ndefault\n), or\nAWS_ACCESS_KEY_ID\nand\nAWS_SECRET_ACCESS_KEY\n.\nClick\nSave\n.\nThis generates the following JSON in\n~/.aws/amazonq/mcp.json\n(global) or\n.amazonq/mcp.json\n(workspace):\n{\n  \"mcpServers\": {\n    \"awslabs.eks-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"awslabs.eks-mcp-server@latest\",\n        \"--allow-write\",\n        \"--allow-sensitive-data-access\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"AWS_PROFILE\": \"default\",\n        \"AWS_REGION\": \"us-west-2\"\n      },\n      \"autoApprove\": [],\n      \"disabled\": false\n    }\n  }\n}\nIf you see:\nMCP: server 'EKSMCPserver' failed to connect: Command 'uvx' not found\nInstall\nuv\n(\nbrew install uv\n) and verify with `uvx --version\nVerifying the connection\n:\nAfter saving, Amazon Q displays the server\u2019s tools  (e.g.,\nmanage_eks_staks\n,\nlist_k8s_resources\n,\nget_pod_logs\netc).\nAll the list of available tools can be found at -\nhttps://awslabs.github.io/mcp/servers/eks-mcp-server/#tools\nUsage Examples\n> List the Clusters\n> Lists all available API versions in the specified Kubernetes cluster\n> Create Cluster\nBest Practices and Security\nRead-Only Mode\n: Omit\n--allow-write\nand\n--allow-sensitive-data-access\nfor inspection tasks. Create a separate server configuration for write operations.\nLeast Privilege\n: Use the read-only IAM policy for daily tasks. Restrict write policies (\nIAMFullAccess\n,\nAmazonVPCFullAccess\n, etc.) to sandbox environments.\nSensitive Data\n: Avoid including secrets in prompts or generated files. Do not use the server to create Kubernetes Secrets.\nNew Conversations\n: Start a new Amazon Q chat for clean operations to avoid history influencing results.\nCloudTrail Auditing\n: Enable CloudTrail to track API calls.\nIAM Access Analyzer\n: Review and remove unused permissions regularly.\nKubernetes Access\n: Ensure your IAM principal has an EKS Access Entry or created the cluster to avoid authorization errors.\nLimitations and Considerations\nAPI Support\n: Limited to EKS and Kubernetes resources supported by AWS SDK and Kubernetes APIs. Verify regional availability.\nComplex Dependencies\n: Creating clusters with dependencies (e.g., VPCs, subnets) may require multiple prompts.\nPerformance\n: Dependent on AWS and Kubernetes API response times. Large operations may hit rate limits.\nTemplate Output\n: Generated templates are for importing existing resources and may need manual edits for new deployments.\nConclusion\nThe Amazon EKS MCP Server, sourced from\nhttps://awslabs.github.io/mcp/servers/eks-mcp-server/\n, enables AI-driven, conversational management of EKS clusters within your IDE. It boosts productivity by integrating real-time context and automation, simplifying Kubernetes workflows on AWS.\nReferences\nAWS Labs EKS MCP Server:\nhttps://awslabs.github.io/mcp/servers/eks-mcp-server/\nAmazon Q:\nhttps://docs.aws.amazon.com/amazonq/"
}