{
  "body": "I have two identical buckets (I compared them with\naws cloudcontrol get-resource\ncommand) , one for local environment and one for dev environment.\nThe only difference between them is CORS configuration:\nThe one for dev environment:\n'CorsConfiguration': {\n        'CorsRules': [\n            {\n                'AllowedHeaders': ['*'],\n                'AllowedMethods': ['GET', 'PUT', 'POST'],\n                'AllowedOrigins': ['https://dev.mydomain.eu'],\n            },\n        ],\n    },\nThe one for local environment:\n'CorsConfiguration': {\n        'CorsRules': [\n            {\n                'AllowedHeaders': ['*'],\n                'AllowedMethods': ['GET', 'PUT', 'POST'],\n                'AllowedOrigins': [\n                    'http://localhost:8000',\n                    'http://192.168.50.106:8000',\n                ],\n            },\n        ],\n    },\nI'm generating presigned urls on the backend side and later uploading the data from the frontend.\nIt is working in general, but only using one of the buckets - the one for dev environment. Its not an issue with the local environment, because if I add\nhttp://localhost:8000\nto AllowedOrigins in dev bucket and hook it up in local environment, uploading works fine.\nOnly if I use bucket for the local environment I'm getting an error:\nIt seems to me that for some reason preflight request fails for this bucket only. Note that the status code is 500 which doesn't seem to be valid either.\nAny ideas?\n\nThis issue appears to be related to how your CORS configuration is being applied to the S3 buckets. The 500 error in the preflight request suggests a server-side issue rather than a simple CORS misconfiguration.\nHere are a few things to check:\nVerify that the CORS configuration has been properly applied to your local environment bucket. You can use the AWS CLI command\naws s3api get-bucket-cors --bucket your-bucket-name\nto confirm the current CORS settings.\nMake sure your CORS configuration is properly formatted. The configuration you've shared looks correct, but sometimes there can be subtle issues. For example, ensure there are no trailing commas or syntax errors.\nConsider simplifying your CORS configuration for testing purposes. You could try using a wildcard for origins temporarily:\n{\n\"AllowedHeaders\": [\"*\"],\n\"AllowedMethods\": [\"GET\", \"PUT\", \"POST\"],\n\"AllowedOrigins\": [\"*\"]\n}\nCheck if there are any bucket policies or IAM permissions that might be interfering with the CORS settings on your local environment bucket.\nEnsure that the S3 bucket for the local environment is properly configured to handle the presigned URLs. The 500 error could indicate an issue with how the bucket processes the request.\nIf the issue persists after these checks, it might be worth recreating the CORS configuration from scratch for the problematic bucket, as sometimes configuration changes don't apply correctly.\nSources\nEnable email for your Amazon Connect instance - Amazon Connect\nGetBucketCors - Amazon Simple Storage Service\nAmazon S3 examples using AWS CLI - AWS SDK Code Examples\n\nThanks guys, I didn't touch it since I created this question and now it just works. I assume it has been a bug or a delay on AWS side. My advice to anyone having the same issue (CORS error with status 500) is unfortunately to just wait. I don't know when it started to work but I wasted a couple of hours trying to make it work.\n\nThe Real Cause (Likely):\nYour local bucket\u2019s CORS config is not actually applied or active \u2014 despite appearing correct in the AWS CLI or console.\nReapply the CORS configuration using the AWS CLI, even if it looks correct.\naws s3api put-bucket-cors --bucket your-local-bucket --cors-configuration file://cors.json\nYour cors.json should look like this:\n{\n\"CORSRules\": [\n{\n\"AllowedHeaders\": [\"*\"],\n\"AllowedMethods\": [\"GET\", \"PUT\", \"POST\"],\n\"AllowedOrigins\": [\n\"http://localhost:8000\",\n\"\nhttp://192.168.50.106:8000\n\"\n]\n}\n]\n}\nS3 has no versioning or validation for CORS configs, it\u2019s possible for it to look correct but not actually apply until you explicitly re-save it.\nAlso double-check:\nThe bucket region matches what your backend uses to generate pre-signed URLs. A mismatch there can break preflight requests.\naws s3api get-bucket-location --bucket your-local-bucket\nRun a quick OPTIONS test with curl to validate CORS preflight responses:\ncurl -i -X OPTIONS\nhttps://your-bucket.s3\n.\n<region>\n.amazonaws.com/your-key\n-H \"Origin:\nhttp://localhost:8000\n\"\n-H \"Access-Control-Request-Method: PUT\"\nIf you don\u2019t see a proper Access-Control-Allow-Origin in the response, the config isn\u2019t active and reapplying it usually fixes it immediately.\n\nSince you are getting error with status code 500, I think the issue is not with CORS setting but with something else. Do you have other processing before reaching the S3 bucket?\nAre both the buckets and your application in the same AWS region? Can you try generating a presigned URL with a longer expiration time to rule out timeout issues.\n\nI kind of agree with Shajam answer.\nWhat I do know is you may need to add OPTIONS to your cors policy for preflight checks."
}