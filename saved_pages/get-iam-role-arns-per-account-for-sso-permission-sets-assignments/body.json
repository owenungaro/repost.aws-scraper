{
  "body": "For background, I'll give an example set up of resources/accounts so that I can better ask the question.\nI have an account\nidentity\nwhich contains the root IAM Identity Center installation, and other accounts that are granted access via IAM IDC. To make things simple, let's pretend I am creating IdentityStore users/groups, let's not involve SAML or external IdP. I have a permission set\nmyorg-infra-admin\n, and this is assigned to the\ninfra-admins\ngroup and is assigned to all accounts. We'll use\ndev\nand\nprod\nas the example account names.\nIn Terraform, this resolves to something like the following:\nresource aws_identitystore_group infra_admins {\nname = \"infra-admins\"\n  # ...\n}\n\nresource aws_sso_permission_set infra_admin {\n  name = \"myorg-infra-admin\"\n  # ....\n}\n\n# assign it to the accounts\nresource aws_ssoadmin_account_assignment infra_admin {\n  for_each = toset([var.prod_account_id, var.dev_account_id])\n  \n  permission_set_arn = aws_ssoadmin_permission_set.infra_admin.arn\n  principal_id = aws_identitystore_group.infra_admins.group_id\n  principal_type = \"GROUP\"\n  target_type = \"AWS_ACCOUNT\"\n  target_id = each.value\n  instance_arn = data.aws_ssoadmin_instances.default.identity_store_ids[0]\n}\nThis all works great, and if we visit each of these accounts, we will see the following roles created:\narn:aws:iam::${DEV_ACCOUNT_ID}:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_myorg-infra-admin_98a0550b39dffd16\narn:aws:iam::${PROD_ACCOUNT_ID}:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_myorg-infra-admin_5f0bab926aff8946\nProblem\nOne shortcoming I have encountered is that at least within Terraform, there seems to be no way of automatically discovering the ARNs of these \"mounted roles\" from the\naws_ssoadmin_account_assignment\nresource.\nRather, what I have to resort to is fuzzy-finding them on a per-account basis:\ndata aws_iam_role sso_infra_admin {\nname_regex = \"^AWSReservedSSO_(?P<name>myorg-infra-admin)_(?P<slug>[0-9a-f]{16})$$\"\n  path_prefix = \"/aws-reserved/sso.amazonaws.com/\"\n}\nIt would be much more convenient if there were a way to get each account's IAM role arn from the\naws_ssoadmin_account_assignment\nresource so I don't have to fuzzy find them.\nIs this currently possible through an AWS API so that the Terraform provider can be extended?\n\nIn AWS IAM Identity Center, when you create permission sets and assign them to accounts, IAM roles are automatically created in each target account. However, there is currently no direct API method to retrieve these role ARNs from the\naws_ssoadmin_account_assignment\nresource.\nThe role names are generated using a specific pattern:\nAWSReservedSSO_[permission-set-name]_[unique-id]\nand are placed under the path\n/aws-reserved/sso.amazonaws.com/\n. The unique ID portion is not deterministically derivable from the permission set information alone, which is why you're currently using the regex approach to find these roles.\nWhen IAM Identity Center creates these roles in target accounts, it uses role chaining behind the scenes, but the API doesn't expose a method to directly map from a permission set assignment to the resulting role ARN.\nYour current approach of using a name regex pattern to find the roles is the recommended way to handle this situation. While not ideal from an automation perspective, it's the most reliable method available since the unique identifier in the role name is generated by IAM Identity Center and not exposed through the assignment APIs.\nIf you need to work with these roles programmatically across accounts, you would need to:\nContinue using the regex pattern matching in each account\nOr maintain a mapping of permission sets to their corresponding role ARNs in each account\nThis is a known limitation when working with IAM Identity Center permission sets and their corresponding IAM roles across accounts.\nSources\nDelegate permission set administration - AWS IAM Identity Center\nAPI for creating permission sets in Identity store | AWS re:Post\nExport CloudWatch log data to Amazon S3 using the console | AWS re:Post"
}