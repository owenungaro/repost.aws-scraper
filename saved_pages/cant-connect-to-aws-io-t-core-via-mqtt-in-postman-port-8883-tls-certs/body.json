{
  "body": "Hi everyone, I\u2019m currently working on a project using AWS IoT Core, and I want to test MQTT messages using Postman\u2019s new MQTT client.\nI\u2019ve followed the AWS IoT setup:\nCreated a thing\nAttached policy\nDownloaded certificate, private key, and root CA\nI\u2019m using the following config in Postman:\nHost: ........-ats.iot.ap-southeast-1.amazonaws.com\nPort: 8883\nProtocol: mqtts\nClient cert and key: uploaded correctly\nCA: Amazon Root CA 1\nBut I keep getting this error in Postman:\n\u201cError: Connection refused\u201d\nI\u2019ve confirmed it works in MQTT.fx with the same credentials, so I\u2019m wondering:\nDoes Postman MQTT support TLS mutual authentication with AWS IoT Core? If so, what\u2019s the correct way to set it up in Postman?\n\nIf i understood your question correctly:\nPostman\u2019s new MQTT client does not currently support mutual TLS authentication (mTLS), which is a requirement for AWS IoT Core connections. Although you can upload certificates and keys in Postman, it seems that these are not correctly utilized for mTLS authentication like they are in MQTT.fx (which explicitly supports mTLS).\nThat\u2019s why:\nYour connection works in MQTT.fx (it fully supports mTLS).\nYour connection\nfails in Postman\n(Postman\u2019s MQTT implementation doesn\u2019t support mTLS for client authentication yet).\nWhat you can do instead:\nUse MQTT.fx (or other mTLS-supported clients like\nmosquitto_pub\n/\nmosquitto_sub\n) for testing AWS IoT Core.\nUse AWS IoT Core\u2019s MQTT test client (via AWS Console) for simple testing.\nUse the AWS CLI with\niot-data\ncommands for quick payload tests (though this bypasses the MQTT protocol).\nPostman\u2019s MQTT client is great for plain username/password or unsecured MQTT brokers, but not for AWS IoT Core\u2019s strict mutual TLS setup."
}