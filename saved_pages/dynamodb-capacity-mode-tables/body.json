{
  "body": "I want to change the capacity mode for multiple Amazon DynamoDB tables at the same time.\n\nShort description\nWhen you change the capacity mode of multiple DynamoDB tables, you must specify either provisioned capacity mode or on-demand capacity mode. Before you change the capacity mode, see\nConsiderations when switching capacity modes in DynamoDB\n.\nTo change the capacity mode of multiple DynamoDB tables at the same time, use one of the following methods:\nAWS Command Line Interface (AWS CLI)\nAWS CloudFormation\nPython\nResolution\nBest practices\nWhen you change the capacity mode of multiple DynamoDB tables, use the following best practices:\nBefore you initiate the change, configure the appropriate AWS CLI credentials.\nMake sure that you have appropriate AWS Identity and Access Management (IAM) permissions.\nDeploy your changes to a non-production environment first.\nAllow several minutes for each table to complete the switch.\nSwitch capacity modes only once every 24 hours for each table.\nAnalyze usage patterns to select the appropriate capacity mode, and adjust for AWS Regional requirements.\nMonitor costs after the switch to make sure that you have the appropriate provisioned capacity.\nAWS CLI\nNote:\nIf you receive errors when you run AWS Command Line Interface (AWS CLI) commands, then see\nTroubleshooting errors for the AWS CLI\n. Also, make sure that\nyou're using the most recent AWS CLI version\n.\nProvisioned mode\nTo use the AWS CLI to change the capacity mode of multiple DynamoDB tables to provisioned mode, complete the following steps:\nOpen your text editor, and enter the following code to create a new shell script:\n#!/bin/bash\n# Set the AWS region\nAWS_REGION=[REGION] # Change this to your desired region\n\n# OPTION1: List of table names you want to switch\nTABLES=(\"table1\" \"table2\" \"table3\")\n\n# OPTION2: Get all table names in the account\nTABLES=$(aws dynamodb list-tables \u2014region $AWS_REGION \u2014query 'TableNames[]' \u2014output text)\n\n# Default provisioned capacity units\nREAD_CAPACITY=READ_CAPACITY_VALUE\nWRITE_CAPACITY=WRITE_CAPACITY_VALUE\n\necho \"Using AWS Region: $AWS_REGION\"\n\nfor TABLE_NAME in $TABLES\ndo\n# Check current billing mode\nCURRENT_MODE=$(aws dynamodb describe-table \u2014region $AWS_REGION \u2014table-name $TABLE_NAME \u2014query 'Table.BillingModeSummary.BillingMode' \u2014output text)\n\nif [ \"$CURRENT_MODE\" = \"PAY_PER_REQUEST\" ]; then\necho \"Processing table: $TABLE_NAME\"\n\n# Get GSI configurations\nGSI_CONFIG=\"\"\nGSI_LIST=$(aws dynamodb describe-table \u2014region $AWS_REGION \u2014table-name $TABLE_NAME \u2014query 'Table.GlobalSecondaryIndexes[*].IndexName' \u2014output text)\n\nif [ ! -z \"$GSI_LIST\" ]; then\necho \"Found GSIs: $GSI_LIST\"\n\n# Build GSI provisioned throughput configuration\nGSI_CONFIG=\"\u2014global-secondary-index-updates\u201c\nfor GSI_NAME in $GSI_LIST\ndo\nif [ -z \"$FIRST_GSI\" ]; then\nGSI_CONFIG=\"$GSI_CONFIG [{\\\"Update\\\":{\\\"IndexName\\\":\\\"$GSI_NAME\\\",\\\"ProvisionedThroughput\\\":{\\\"ReadCapacityUnits\\\":$READ_CAPACITY,\\\"WriteCapacityUnits\\\":$WRITE_CAPACITY}}}\"\nFIRST_GSI=\"false\"\nelse\nGSI_CONFIG=\"$GSI_CONFIG,{\\\"Update\\\":{\\\"IndexName\\\":\\\"$GSI_NAME\\\",\\\"ProvisionedThroughput\\\":{\\\"ReadCapacityUnits\\\":$READ_CAPACITY,\\\"WriteCapacityUnits\\\":$WRITE_CAPACITY}}}\"\nfi\ndone\nGSI_CONFIG=\"$GSI_CONFIG]\"\nfi\n\n# Update table and GSIs\nif [ ! -z \"$GSI_CONFIG\" ]; then\necho \"Updating table and GSIs...\"\naws dynamodb update-table \\\n--region $AWS_REGION \\\n--table-name $TABLE_NAME \\\n--billing-mode PROVISIONED \\\n--provisioned-throughput ReadCapacityUnits=$READ_CAPACITY,WriteCapacityUnits=$WRITE_CAPACITY \\\n$GSI_CONFIG\nelse\necho \"Updating table (no GSIs)...\"\naws dynamodb update-table \\\n--region $AWS_REGION \\\n--table-name $TABLE_NAME \\\n--billing-mode PROVISIONED \\\n--provisioned-throughput ReadCapacityUnits=$READ_CAPACITY,WriteCapacityUnits=$WRITE_CAPACITY\nfi\n\necho \"Request submitted for $TABLE_NAME\"\nelse\necho \"Skipping $TABLE_NAME - already in PROVISIONED mode\"\nfi\n\n# Reset GSI tracking for next table\nFIRST_GSI=\"\"\necho \"----------------------------------------\"\n\ndone\nTo change the capacity mode of all DynamoDB tables to on-demand mode, remove the following section of code:\n#OPTION1: List of table names you want to switch\nTABLES=(\"table1\" \"table2\" \"table3\")\nTo change the capacity mode of specific DynamoDB tables to on-demand mode, replace\n\"table1\" \"table2\" \"table3\"\nwith your table names. Then, remove the following section of code:\n#OPTION2: Get all table names in the account\nTABLES=$(aws dynamodb list-tables \u2014query 'TableNames[]' \u2014output text)\nNote:\nReplace\nREAD_CAPACITY_VALUE\nand\nWRITE_CAPACITY_VALUE\nwith your read and write capacity values.\nSave the file with the name,\nswitch-all-tables-with-gsi-to-provisioned.sh\n.\nTo make the file executable, open the terminal and run the following command:\nchmod +x switch-all-tables-with-gsi-to-provisioned.sh\nTo run the shell script in the terminal, run the following command:\n./switch-all-tables-with-gsi-to-provisioned.sh\nOn-demand mode\nTo use the AWS CLI to change the capacity mode of multiple DynamoDB tables to on-demand mode, complete the following steps:\nOpen your text editor, and then enter the following code to create a new shell script:\n#!/bin/bash\n# Set the AWS region\nAWS_REGION=[REGION] # Change this to your desired region\n\n# OPTION1: List of table names you want to switch\nTABLES=(\"table1\" \"table2\" \"table3\")\n\n# OPTION2: Get all table names in the account\n#TABLES=$(aws dynamodb list-tables --region $AWS_REGION --query 'TableNames[]' --output text)\n\nfor TABLE_NAME in $TABLES\ndo\n    # Check current billing mode\n    CURRENT_MODE=$(aws dynamodb describe-table --region $AWS_REGION --table-name $TABLE_NAME --query 'Table.BillingModeSummary.BillingMode' --output text)\n    \n    if [ \"$CURRENT_MODE\" = \"PROVISIONED\" ]; then\n        echo \"Processing table: $TABLE_NAME\"\n        # Check if table has any GSIs\n        GSI_LIST=$(aws dynamodb describe-table --region $AWS_REGION --table-name $TABLE_NAME --query 'Table.GlobalSecondaryIndexes[*].IndexName' --output text)\n        \n        if [ ! -z \"$GSI_LIST\" ]; then\n            echo \"Table has GSIs: $GSI_LIST\"\n            echo \"Note: GSIs will automatically switch to On-Demand with the table\"\n        fi\n\n        # Update table to On-Demand\n        echo \"Switching $TABLE_NAME to PAY_PER_REQUEST mode...\"\n        aws dynamodb update-table \\\n            --region $AWS_REGION \\\n            --table-name $TABLE_NAME \\\n            --billing-mode PAY_PER_REQUEST\n        \n        echo \"Request submitted for $TABLE_NAME\"\n    else\n        echo \"Skipping $TABLE_NAME - already in PAY_PER_REQUEST mode\"\n    fi\n    echo \"----------------------------------------\"\ndone\nTo change the capacity mode of all DynamoDB tables to on-demand mode, remove the following section of code:\n#OPTION1: List of table names you want to switch\nTABLES=(\"table1\" \"table2\" \"table3\")\nTo change the capacity mode of specific DynamoDB tables to on-demand mode, replace\n\"table1\" \"table2\" \"table3\"\nwith your table names. Then, remove the following section of code:\n`#OPTION2: Get all table names in the account`\nTABLES=$(aws dynamodb list-tables \u2014region $AWS\\_REGION \u2014query 'TableNames\\[\\]' \u2014output text)\nNote:\nReplace\nREGION\nwith your\nRegion\n. Use the Region's code, such as\nus-east-1\n.\nTo make the file executable, open the terminal and run the command:\nchmod +x switch-all-tables-with-gsi-to-ondemand.sh\nTo run the shell script in the terminal, run the command:\n./switch-all-tables-with-gsi-to-ondemand.sh\nCloudFormation\nUse the following best practices:\nSet AWS Lambda templates to use the Python 3.9 runtime.\nMonitor Amazon CloudWatch Logs to track the Lambda function's progress.\nNote:\nBefore you start, configure your AWS credentials. Run the following\nconfigure\nAWS CLI command:\naws configure\nProvisioned mode\nTo use CloudFormation to change the capacity mode of multiple DynamoDB tables to provisioned mode, complete the following steps:\nOpen your text editor and enter the following code to create a new YAML file:\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Switch specific DynamoDB tables from On-Demand to Provisioned capacity mode'\n\nParameters:\n  ReadCapacityUnits:\n    Type: Number\n    Default: 5\n    Description: Read Capacity Units for tables and GSIs\n  \n  WriteCapacityUnits:\n    Type: Number\n    Default: 5\n    Description: Write Capacity Units for tables and GSIs\n  \n  TableNames:\n    Type: CommaDelimitedList\n    Description: Comma-separated list of DynamoDB table names to update\n\nResources:\n  DynamoDBTableUpdates:\n    Type: Custom::DynamoDBTableUpdates\n    Properties:\n      ServiceToken: !GetAtt UpdateTablesFunction.Arn\n      ReadCapacityUnits: !Ref ReadCapacityUnits\n      WriteCapacityUnits: !Ref WriteCapacityUnits\n      TableNames: !Ref TableNames\n\n  UpdateTablesFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Runtime: python3.9\n      Handler: index.handler\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Code:\n        ZipFile: |\n          import boto3\n          import cfnresponse\n          \n          def handler(event, context):\n              try:\n                  if event['RequestType'] in ['Create', 'Update']:\n                      dynamodb = boto3.client('dynamodb')\n                      \n                      # Get parameters\n                      read_capacity = event['ResourceProperties']['ReadCapacityUnits']\n                      write_capacity = event['ResourceProperties']['WriteCapacityUnits']\n                      table_names = event['ResourceProperties']['TableNames']\n                      \n                      for table_name in table_names:\n                          try:\n                              # Get table details\n                              table = dynamodb.describe_table(TableName=table_name)['Table']\n                              current_mode = table.get('BillingModeSummary', {}).get('BillingMode', '')\n                              \n                              if current_mode == 'PAY_PER_REQUEST':\n                                  # Prepare GSI updates if any\n                                  gsi_updates = []\n                                  if 'GlobalSecondaryIndexes' in table:\n                                      for gsi in table['GlobalSecondaryIndexes']:\n                                          gsi_updates.append({\n                                              'Update': {\n                                                  'IndexName': gsi['IndexName'],\n                                                  'ProvisionedThroughput': {\n                                                      'ReadCapacityUnits': int(read_capacity),\n                                                      'WriteCapacityUnits': int(write_capacity)\n                                                  }\n                                              }\n                                          })\n                                  \n                                  # Update table\n                                  update_params = {\n                                      'TableName': table_name,\n                                      'BillingMode': 'PROVISIONED',\n                                      'ProvisionedThroughput': {\n                                          'ReadCapacityUnits': int(read_capacity),\n                                          'WriteCapacityUnits': int(write_capacity)\n                                      }\n                                  }\n                                  \n                                  if gsi_updates:\n                                      update_params['GlobalSecondaryIndexUpdates'] = gsi_updates\n                                      \n                                  dynamodb.update_table(**update_params)\n                                  print(f\"Switching {table_name} to PROVISIONED mode\")\n                              else:\n                                  print(f\"Table {table_name} is not in PAY_PER_REQUEST mode. Skipping.\")\n                              \n                          except Exception as e:\n                              print(f\"Error processing table {table_name}: {str(e)}\")\n                              continue\n                              \n                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n                  else:\n                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n                      \n              except Exception as e:\n                  print(f\"Error: {str(e)}\")\n                  cfnresponse.send(event, context, cfnresponse.FAILED, {})\n\n  LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Policies:\n        - PolicyName: DynamoDBAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - dynamodb:DescribeTable\n                  - dynamodb:UpdateTable\n                Resource: '*'\nSave the file with the name,\nswitch-to-provisioned.yaml\n.\nRun the following\ncreate-stack\nAWS CLI command:\n# For Provisioned mode\naws cloudformation create-stack \\\n  --stack-name switch-to-provisioned \\\n  --template-body file://switch-to-provisioned.yaml \\\n  --capabilities CAPABILITY_IAM \\\n  --region [REGION] \\ \n  --parameters  ParameterKey=TableNames,ParameterValue=\"Table1,Table2,Table3\" \\ \n              ParameterKey=ReadCapacityUnits,ParameterValue=[RCU_VALUE] \\\n              ParameterKey=WriteCapacityUnits,ParameterValue=[WCU_VALUE]\nNote:\nReplace\n\"Table1,Table2,Table3\"\nwith your table names,\nRCU_VALUE\nand\nWCU_VALUE\nwith your RCU and WCU values, and\nREGION\nwith your Region, such as\nus-east-1\n.\nOn-demand mode\nTo use CloudFormation to change the capacity mode of multiple DynamoDB tables to on-demand mode, complete the following steps:\nOpen your text editor and enter the following code to create a new YAML file:\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Switch specific DynamoDB tables from Provisioned to On-Demand capacity mode'\n\nParameters:\n  TableNames:\n    Type: CommaDelimitedList\n    Description: Comma-separated list of DynamoDB table names to update\n\nResources:\n  DynamoDBTableUpdates:\n    Type: Custom::DynamoDBTableUpdates\n    Properties:\n      ServiceToken: !GetAtt UpdateTablesFunction.Arn\n      TableNames: !Ref TableNames\n\n  UpdateTablesFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Runtime: python3.9\n      Handler: index.handler\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Code:\n        ZipFile: |\n          import boto3\n          import cfnresponse\n          \n          def handler(event, context):\n              try:\n                  if event['RequestType'] in ['Create', 'Update']:\n                      dynamodb = boto3.client('dynamodb')\n                      \n                      # Get table names from the event\n                      table_names = event['ResourceProperties']['TableNames']\n                      \n                      for table_name in table_names:\n                          try:\n                              # Get table details\n                              table = dynamodb.describe_table(TableName=table_name)['Table']\n                              current_mode = table.get('BillingModeSummary', {}).get('BillingMode', '')\n                              \n                              if current_mode == 'PROVISIONED':\n                                  # Update table to On-Demand\n                                  dynamodb.update_table(\n                                      TableName=table_name,\n                                      BillingMode='PAY_PER_REQUEST'\n                                  )\n                                  print(f\"Switching {table_name} to PAY_PER_REQUEST mode\")\n                              else:\n                                  print(f\"Table {table_name} is not in PROVISIONED mode. Skipping.\")\n                              \n                          except Exception as e:\n                              print(f\"Error processing table {table_name}: {str(e)}\")\n                              continue\n                              \n                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n                  else:\n                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n                      \n              except Exception as e:\n                  print(f\"Error: {str(e)}\")\n                  cfnresponse.send(event, context, cfnresponse.FAILED, {})\n\n  LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Policies:\n        - PolicyName: DynamoDBAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - dynamodb:DescribeTable\n                  - dynamodb:UpdateTable\n                Resource: '*'\nSave the file, with the name,\nswitch-to-ondemand.yaml\n.\nRun the following\ncreate-stack\nAWS CLI command:\n# For On-Demand mode\naws cloudformation create-stack \\\n  --stack-name switch-to-ondemand \\\n  --template-body file://switch-to-ondemand.yaml \\\n  --capabilities CAPABILITY_IAM \\\n  --region [REGION] \\ \n  --parameters ParameterKey=TableNames,ParameterValue=\"Table1,Table2,Table3\"\nNote:\nReplace\n\"Table1,Table2,Table3\"\nwith your table names and\nREGION\nwith your Region.\nPython\nYou can use an Amazon Elastic Compute Cloud (EC2) instance, Lambda, or your own desktop to run a Python script. Before you change the capacity mode, make sure that you installed Python, pip, and boto3.\nBefore you start, configure your AWS credentials. Run the following\nconfigure\nAWS CLI command:\naws configure\nProvisioned mode\nTo use a Python script to change the capacity mode of all DynamoDB tables in a specific Region to provisioned mode, complete the following steps:\nOpen Python and enter the following code to create a new file:\nimport boto3\nimport time\nfrom botocore.exceptions import ClientError\n\ndef switch_to_provisioned(read_capacity=5, write_capacity=5, region=None):\n    \"\"\"\n    Switch all DynamoDB tables from On-Demand to Provisioned capacity mode\n    \"\"\"\n    # Initialize DynamoDB client\n    dynamodb = boto3.client('dynamodb', region_name=region)\n    \n    # Get all table names\n    tables = []\n    paginator = dynamodb.get_paginator('list_tables')\n    for page in paginator.paginate():\n        tables.extend(page['TableNames'])\n    \n    print(f\"Found {len(tables)} tables\")\n    \n    for table_name in tables:\n        try:\n            # Get table details\n            response = dynamodb.describe_table(TableName=table_name)\n            table = response['Table']\n            current_mode = table.get('BillingModeSummary', {}).get('BillingMode', '')\n            \n            if current_mode == 'PAY_PER_REQUEST':\n                print(f\"\\nProcessing table: {table_name}\")\n                \n                # Prepare GSI updates if any\n                gsi_updates = []\n                if 'GlobalSecondaryIndexes' in table:\n                    print(f\"Found GSIs for table {table_name}\")\n                    for gsi in table['GlobalSecondaryIndexes']:\n                        gsi_updates.append({\n                            'Update': {\n                                'IndexName': gsi['IndexName'],\n                                'ProvisionedThroughput': {\n                                    'ReadCapacityUnits': read_capacity,\n                                    'WriteCapacityUnits': write_capacity\n                                }\n                            }\n                        })\n                \n                # Prepare update parameters\n                update_params = {\n                    'TableName': table_name,\n                    'BillingMode': 'PROVISIONED',\n                    'ProvisionedThroughput': {\n                        'ReadCapacityUnits': read_capacity,\n                        'WriteCapacityUnits': write_capacity\n                    }\n                }\n                \n                if gsi_updates:\n                    update_params['GlobalSecondaryIndexUpdates'] = gsi_updates\n                \n                # Update table\n                print(f\"Switching {table_name} to PROVISIONED mode...\")\n                dynamodb.update_table(**update_params)\n                print(f\"Update request submitted for {table_name}\")\n                \n            else:\n                print(f\"\\nSkipping {table_name} - already in PROVISIONED mode\")\n            \n        except ClientError as e:\n            if e.response['Error']['Code'] == 'LimitExceededException':\n                print(f\"\\nError: Cannot update {table_name}. You can only switch between billing modes once per 24 hours.\")\n            else:\n                print(f\"\\nError processing table {table_name}: {str(e)}\")\n            continue\n        except Exception as e:\n            print(f\"\\nUnexpected error processing table {table_name}: {str(e)}\")\n            continue\n        \n        # Small delay to avoid API throttling\n        time.sleep(1)\n\nif __name__ == \"__main__\":\n    # You can modify these values\n    READ_CAPACITY = [RCU_VALUE]\n    WRITE_CAPACITY = [WCU_VALUE]\n    REGION = [REGION]  # Change to your desired region\n    \n    switch_to_provisioned(\n        read_capacity=READ_CAPACITY,\n        write_capacity=WRITE_CAPACITY,\n        region=REGION\n    )\nNote:\nReplace\nRCU_VALUE\nand\nWCU_VALUE\nwith your RCU AND WCU values and\nREGION\nwith your Region, such as\nus-east-1\n.\nSave the file with the\nswitch_to_provisioned.py\nname.\nOpen the terminal and run the following command to run the Python script:\npython switch_to_provisioned.py\nOn-demand mode\nTo use a Python script to change the capacity mode of all DynamoDB tables in a specific Region to on-demand mode, complete the following steps:\nOpen Python and enter the following code to create a new file:\nimport boto3\nimport time\nfrom botocore.exceptions import ClientError\n\ndef switch_to_ondemand(region=None):\n    \"\"\"\n    Switch all DynamoDB tables from Provisioned to On-Demand capacity mode\n    \"\"\"\n    # Initialize DynamoDB client\n    dynamodb = boto3.client('dynamodb', region_name=region)\n    \n    # Get all table names\n    tables = []\n    paginator = dynamodb.get_paginator('list_tables')\n    for page in paginator.paginate():\n        tables.extend(page['TableNames'])\n    \n    print(f\"Found {len(tables)} tables\")\n    \n    for table_name in tables:\n        try:\n            # Get table details\n            response = dynamodb.describe_table(TableName=table_name)\n            table = response['Table']\n            current_mode = table.get('BillingModeSummary', {}).get('BillingMode', '')\n            \n            if current_mode == 'PROVISIONED':\n                print(f\"\\nProcessing table: {table_name}\")\n                \n                # Check for GSIs\n                if 'GlobalSecondaryIndexes' in table:\n                    print(f\"Table {table_name} has GSIs - they will automatically switch to On-Demand\")\n                \n                # Update table\n                print(f\"Switching {table_name} to PAY_PER_REQUEST mode...\")\n                dynamodb.update_table(\n                    TableName=table_name,\n                    BillingMode='PAY_PER_REQUEST'\n                )\n                print(f\"Update request submitted for {table_name}\")\n                \n            else:\n                print(f\"\\nSkipping {table_name} - already in PAY_PER_REQUEST mode\")\n            \n        except ClientError as e:\n            if e.response['Error']['Code'] == 'LimitExceededException':\n                print(f\"\\nError: Cannot update {table_name}. You can only switch between billing modes once per 24 hours.\")\n            else:\n                print(f\"\\nError processing table {table_name}: {str(e)}\")\n            continue\n        except Exception as e:\n            print(f\"\\nUnexpected error processing table {table_name}: {str(e)}\")\n            continue\n        \n        # Small delay to avoid API throttling\n        time.sleep(1)\n\ndef check_table_status(table_name, region=None):\n    \"\"\"\n    Check the current billing mode of a specific table\n    \"\"\"\n    dynamodb = boto3.client('dynamodb', region_name=region)\n    try:\n        response = dynamodb.describe_table(TableName=table_name)\n        mode = response['Table'].get('BillingModeSummary', {}).get('BillingMode', 'Unknown')\n        print(f\"Table {table_name} is in {mode} mode\")\n        return mode\n    except Exception as e:\n        print(f\"Error checking table {table_name}: {str(e)}\")\n        return None\n\nif __name__ == \"__main__\":\n    REGION = [REGION]   # Change to your desired region\n    \n    switch_to_ondemand(region=REGION)\nNote:\nReplace\nREGION\nwith your Region.\nSave the file with the name,\nswitch_to_ondemand.py\n.\nOpen the terminal and run the following command to run the Python script:\npython switch_to_ondemand.py\nRelated information\nDynamoDB throughput capacity"
}