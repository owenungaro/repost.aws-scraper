{
  "body": "Hi,\nI\u2019m running an EKS cluster where nodes are in public subnets, each with a fixed Elastic IP. The nodegroup uses the standard EC2 IAM role (NodeInstanceRole) attached to the instances via instance profiles.\nI\u2019m seeing recurring GetCallerIdentity events in CloudTrail that originate from this role, with user agent Go-http-client/1.1. Based on discussions with AWS support, I now understand these calls likely originate from the EKS control plane \u2014 probably for internal identity validation.\nStill, what surprises me is this:\nThe pods that trigger these events run on EC2 nodes with Elastic IPs, and I expected the sourceIPAddress in CloudTrail to match the instance\u2019s EIP.\nYet, the IPs reported in the events do not match any of the known public-facing resources I control (ENIs, EIPs, NAT, etc.)\nI understand this might be standard behavior, but I'm looking for a precise explanation of:\nWhy the sourceIPAddress does not reflect the EC2 instance's EIP, even though the pod runs on it.\nAny insights or official references would be appreciated.\nThanks.\n\nThe sourceIPAddress in CloudTrail logs for GetCallerIdentity calls from EKS pods doesn't match your EC2 instance's Elastic IP because these calls aren't actually going through your EC2 instance's network interface.\nWhen pods in an EKS cluster use IAM roles (whether through the EC2 instance role or through EKS Pod Identity), the authentication flow works differently than you might expect. The GetCallerIdentity API calls you're seeing with the Go-http-client/1.1 user agent are likely coming from the EKS control plane or the EKS Pod Identity Agent.\nFor EKS Pod Identity specifically, the system uses a special metadata service endpoint (169.254.170.23) rather than the standard EC2 instance metadata service (169.254.169.254). This is part of how EKS manages identity and credentials for pods.\nThe sourceIPAddress you're seeing in CloudTrail is likely the IP address of AWS's internal service infrastructure that's making the actual STS calls on behalf of your pods, not your EC2 instances themselves. This is why it doesn't match any of your known public-facing resources.\nThis behavior is by design - the credential vending and identity verification process for EKS pods is handled through AWS's infrastructure, which is why the source IP appears to be from AWS's internal network rather than from your EC2 instances' Elastic IPs.\nSources\nWhen this AWS \"GetCallerIdentity\" API Call will get triggred | AWS re:Post\nUnsupported Host for AWS CLI and Boto3 inside an EKS cluster | AWS re:Post\n\nGreat question,we've run into similar observations in EKS setups.\nWhy the sourceIPAddress in CloudTrail doesn't match the EC2 EIP:\nEven though your pods are running on EC2 instances with Elastic IPs (EIPs), the actual network call to sts:GetCallerIdentity may not originate directly from your node\u2019s public IP. Here\u2019s why:\nEC2 instance metadata proxying (IMDSv2 + EKS):\nPods using the instance role (via default service account or IRSA fallback) access the role credentials via the instance metadata service (IMDS). When a pod makes an STS call like GetCallerIdentity, the request may use the default network route and not necessarily go through the EIP. It might route through the primary ENI, or even use the control plane path (EKS-managed components).\nNAT and control plane activity:\nIf the node has access to a NAT Gateway, or if certain calls are relayed or initiated by the EKS control plane (e.g., kubelet heartbeat checks or identity sync), the originating IP can come from AWS-owned IP space \u2014 not your public EIP. That explains the unknown IPs you see in CloudTrail.\nGo-http-client/1.1 user agent = kubelet or container SDKs:\nThat user agent is common with requests coming from:\nThe AWS SDK for Go, which many Kubernetes components use\nKubelet running on nodes\nSidecar containers or internal EKS agents\nIn short Summary:\nThis behavior is expected and does not indicate compromise.\nThe sourceIPAddress field in CloudTrail doesn\u2019t always reflect the EC2 instance's EIP, especially for STS calls inside EKS.\nIf you want more deterministic IP behavior, you'd need to route pod traffic through a NAT Gateway or an Egress-only setup with known IPs, but that defeats some of the simplicity of public subnet nodes.\nLet me know if you want help tracing specific IPs, you can often look them up in the AWS IP ranges JSON to confirm they're owned by AWS.\nhttps://ip-ranges.amazonaws.com/ip-ranges.json"
}