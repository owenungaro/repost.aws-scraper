{
  "body": "I'd like to give a user/role somewhat narrow permissions to create & manage an EKS cluster. However, it seems like the permissions needed to do so are quite broad. Some needed so far:\nability to spin up EC2 instances (expected)\nability to tag resources\nability to create roles\nThe last one here is the most problematic - the ability to create roles. As if I give the user IAMFullAccess, then what's to stop them from giving their own role admin access, or creating another role with admin access & swapping to it?\nFrom some googling I found this\nreddit post\nwhich linked to this blogpost about IAM permissions boundaries:\nhttps://aws.amazon.com/blogs/security/when-and-where-to-use-iam-permissions-boundaries/\nBut I don't really understand how this works yet & I'm guessing this is a fairly common problem. If someone has a sample policy json for creating EKS clusters that would be ideal.\n\nI agree, the IAM role is a big problem. You can implement permission boundary for IAM role that will help. The IAM permission boundary is an IAM policy that defines the maximum permission a role, user can have. In the permission boundary, you can, for example, have a policy that says Deny deleteVPC, etc. Even if your main role allows deleting VPC, it will not succeed.\nNow, how can you enforce the use permission boundary. You have to make sure the user or service role that's creating this policy must attach the permission boundary.\nHere's an example\n- Sid: IAMPermission\n            Effect: Allow\n            Action:\n              - 'iam:*'\n            Resource: 'arn:aws:iam::*:role/*'\n            Condition:\n              'ForAllValues:ArnEquals':\n                'iam:PermissionsBoundary': 'arn:aws:iam::*:policy/MyPermissionBoundary'\nIn this example, the user or service role that has \"IAMPermission\" policy can only create an IAM role when the specified permission boundary is attached.\n\nTo create and manage an Amazon EKS cluster with narrower permissions, you need to address several permission requirements while maintaining security.\nFor creating an EKS cluster, you need:\nEKS-specific permissions\n: The user needs permissions to create and manage EKS clusters.\nIAM role creation permissions\n: This is necessary because EKS requires a cluster IAM role with the AmazonEKSClusterPolicy. When creating a cluster, you need to:\nCreate a role with EKS as the trusted entity\nAttach the AmazonEKSClusterPolicy to this role\nEC2 permissions\n: For managing worker nodes and related resources.\nTagging permissions\n: For resource organization and management.\nInstead of granting IAMFullAccess (which is too broad), you can use permissions boundaries to limit what the user can do with their role creation abilities. A permissions boundary is an IAM policy that sets the maximum permissions an IAM entity can have, regardless of what permissions are granted to them.\nHere's how to implement this approach:\nCreate a permissions boundary policy that defines the maximum allowed permissions\nAllow the user to create roles, but only with this permissions boundary attached\nEnsure the boundary policy doesn't include permissions to modify boundaries or create admin-level access\nThis way, even if the user creates new roles, those roles cannot exceed the permissions defined in the boundary. The user won't be able to escalate privileges by creating roles with broader permissions than what you've allowed in the boundary policy.\nFor EKS specifically, you would:\nAllow creation of the EKS cluster role with the specific trust relationship to eks.amazonaws.com\nAllow attaching only the AmazonEKSClusterPolicy to this role\nUse conditions in your IAM policies to restrict which services can be trusted by created roles\nThis approach provides the necessary permissions for EKS cluster creation while preventing privilege escalation through role creation.\nSources\nAmazon EKS cluster IAM role - Amazon EKS\nUsing roles for Amazon EKS clusters - Amazon EKS\nHow to Give AWS EKS IAM user access....? | AWS re:Post\n\nanswer is ok but just not specific enough"
}