{
  "body": "\u4f60\u597d\u6784\u5efa\u4e86opensearch \u96c6\u5408\u670d\u52a1\u540e\uff0c\u521b\u5efa\u4e86\u76f8\u5e94\u7684access key id, \u548csecreat key, \u4f7f\u7528boto3\u4ee3\u7801\u8bbf\u95ee\u6301\u7eed\u51fa\u73b0\u4e0b\u9762\u7684error:\nopensearchpy.exceptions.AuthorizationException: AuthorizationException(403, 'security_exception', 'OpenSearch exception [type=authorization_exception, reason=User does not have permissions for the requested resource]')\nData access \u5df2\u7ecf\u663e\u793a\u6709\u4e0b\u9762\u7684principal:\nPrincipals\narn:aws:iam::????:role/????\narn:aws:iam::????:user/????\n\u5df2\u7ecf\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n`import boto3\nfrom opensearchpy import OpenSearch, RequestsHttpConnection\nfrom requests_aws4auth import AWS4Auth\nInitialize a session using Boto3\nsession = boto3.Session()\nRetrieve credentials\ncredentials = session.get_credentials()\nregion = 'us-east-2'  # e.g., 'us-west-2'\nCreate AWS4Auth object for OpenSearch Serverless\nawsauth = AWS4Auth(\ncredentials.access_key,\ncredentials.secret_key,\nregion,\n'aoss',  # Changed from 'es' to 'aoss' for OpenSearch Serverless\nsession_token=credentials.token\n)\nclient = OpenSearch(\nhosts=[{'host': '????', 'port': 443}],\nhttp_auth=awsauth,\nuse_ssl=True,\nverify_certs=True,\nconnection_class=RequestsHttpConnection\n)\nTest basic connectivity\ntry:\nprint(\"Testing basic connectivity...\")\nresponse = client.cat.health()\nprint(\"Health check passed:\", response)\nexcept Exception as e:\nprint(\"Health check failed:\", e)\nTest listing indices\ntry:\nprint(\"\\nTesting list indices...\")\nindices = client.cat.indices()\nprint(\"Existing indices:\", indices)\nexcept Exception as e:\nprint(\"List indices failed:\", e)\nTest creating index (might fail due to permissions)\ntry:\nprint(\"\\nTesting create index...\")\nclient.indices.create(index=\"test-index\")\nprint(\"Index created successfully\")\nexcept Exception as e:\nprint(\"Create index failed:\", e)`\n\u8bf7\u95ee\u6211\u540c\u65f6export AWS_ACCESS_KEY_ID=????\nexport AWS_SECRET_ACCESS_KEY=????\n\u8fd9\u4e24\u4e2a\u5c31\u662fIAM\u7ba1\u7406\u6784\u5efa\u7684\u65f6\u5019\u5728access key\u90a3\u4e2a\u6a21\u5757\u90a3\u6784\u5efa\u7684\uff0c\u95ee\u4ec0\u4e48\u8fd8\u662f\u4f1a\u6709\u8bbf\u95eeaccess permission deny\u5462\n\nThe 403 error you're encountering with OpenSearch Serverless is due to missing IAM permissions, even though you've set up the Data Access Policy correctly.\nFor OpenSearch Serverless, having a Data Access Policy that includes your IAM principal (user/role) is necessary but not sufficient. You also need to ensure that the IAM identity you're using has two specific IAM permissions:\naoss:APIAccessAll\n- For accessing OpenSearch Serverless data plane APIs\naoss:DashboardsAccessAll\n- For accessing OpenSearch Dashboards\nWithout these permissions, you'll continue to receive 403 errors even if your principal is listed in the Data Access Policy.\nTo fix this issue:\nAttach an IAM policy to your user or role that includes these permissions:\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": [\n\"aoss:APIAccessAll\",\n\"aoss:DashboardsAccessAll\"\n],\n\"Resource\": \"*\"\n}\n]\n}\nAfter adding these permissions, your boto3 script should be able to connect successfully.\nIf you continue to experience issues after adding these permissions, verify that your AWS credentials are correct and that your network policy allows access from your location (public access or VPC endpoint as appropriate).\nSources\nTroubleshoot OpenSearch Serverless errors | AWS re:Post\nData access control for Amazon OpenSearch Serverless - Amazon OpenSearch Service\n\nAuthorizationException(403, 'security_exception', 'OpenSearch exception [type=authorization_exception, reason=User does not have permissions for the requested resource]\nsame issue here"
}