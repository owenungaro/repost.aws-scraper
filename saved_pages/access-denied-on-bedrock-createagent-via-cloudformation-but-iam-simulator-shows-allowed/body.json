{
  "body": "Hello, community.\nI'm facing what seems to be an impossible IAM permission issue when trying to create an Amazon Bedrock Agent via CloudFormation, and I've exhausted all standard debugging steps.\nThe Problem:\nA CloudFormation stack that tries to create a minimal AWS::Bedrock::Agent resource fails with the error: Resource handler returned message: \"Access denied for operation 'AWS::Bedrock::Agent'.\"\nThe Evidence and The Paradox:\nWe have proven the following facts, which create a contradiction:\nWe are using a minimal test template to isolate the problem. It only creates the agent, with no custom roles or action groups (so iam:PassRole is not involved in this specific test).\nYAML\nAWSTemplateFormatVersion: '2010-09-09'\nResources:\nMinimalTestAgent:\nType: AWS::Bedrock::Agent\nProperties:\nAgentName: minimal-repost-test-agent\nFoundationModel: \"anthropic.claude-3-5-sonnet-20240620-v1:0\"\nInstruction: \"This is a test instruction with more than 40 characters to pass initial validation.\"\nThe IAM User's policy explicitly allows the action. The user (arn:aws:iam::556958795518:user/Gitlab) running the deployment has a managed policy attached with the following statement:\nJSON\n{\n\"Effect\": \"Allow\",\n\"Action\": \"bedrock:CreateAgent\",\n\"Resource\": \"\n\"\n}\n(Note: The full policy also includes all other necessary permissions like cloudformation:\n, etc., which are working correctly).\nThe IAM Policy Simulator confirms the permission. When simulating the bedrock:CreateAgent action for this user, the simulator's final result is allowed. It shows no explicit or implicit deny.\nThere is an anomaly in our AWS Organization console. I am the administrator for the organization (o-oc7n7fewif). When logged in as the root user of the management account:\nThe Settings page confirms \"all features\" are enabled.\nHowever, the Policies page does not show \"Service Control Policies\" as an available policy type.\nTrying to access the SCP page via its direct URL redirects me to the Organizations home page.\nMy Question:\nGiven that the user's identity-based policy allows the action, and the IAM Policy Simulator confirms this permission, what could be causing a final Access Denied result during the real-world execution?\nHow can an SCP be denying this action if the interface to manage SCPs is inaccessible even to the root user of the management account? Is there any other \"hidden\" policy layer or account state that could be causing this block?\nI have already confirmed there is no Permissions Boundary set on the user. Any insight into this discrepancy would be greatly appreciated.\n\nBased on your description, there appears to be a discrepancy between what the IAM Policy Simulator shows and the actual permissions when executing CloudFormation operations to create a Bedrock Agent. Here are several potential causes and solutions:\nService Role Requirements for Bedrock Agents\n:\nAmazon Bedrock Agents may have specific naming requirements for service roles. For example, the role name might need to use the prefix\nAmazonBedrockExecutionRoleForAgents_\nand have a specific path like\n/service-role/\n. Even though your minimal template doesn't explicitly create a role, CloudFormation might be attempting to use or create a default role with incorrect naming conventions.\nMissing Permissions in the Policy\n:\nWhile your policy includes\nbedrock:CreateAgent\n, creating an agent through CloudFormation might require additional permissions that aren't explicitly listed in your policy. The IAM Policy Simulator might not accurately reflect all the permissions needed for the complete operation. Consider adding more comprehensive Bedrock permissions such as:\nbedrock:ListFoundationModels\nbedrock:GetFoundationModel\nbedrock:TagResource\nAnd other Bedrock-related permissions\nInference Profile vs Foundation Model\n:\nIf you're using an inference profile rather than a foundation model, you might need additional permissions like:\nbedrock:GetInferenceProfile\nbedrock:ListInferenceProfiles\nbedrock:UseInferenceProfile\nHidden Service Control Policies (SCPs)\n:\nEven though you can't see SCPs in the Organizations console, there might still be SCPs applied to your account. The unusual behavior in the Organizations console could indicate an issue with your organization's configuration. SCPs can override identity-based policies even when the simulator shows permissions as allowed.\nRegion-specific Permissions\n:\nEnsure that the model you're trying to use is available in the region where you're deploying the CloudFormation stack. Some models are only available in specific regions.\nCloudFormation Service Role\n:\nThe CloudFormation service itself might be using a role that doesn't have the necessary permissions to create Bedrock resources.\nTo troubleshoot:\nTry creating the Bedrock Agent directly through the AWS CLI instead of CloudFormation to isolate whether the issue is with CloudFormation or with Bedrock permissions.\nCheck CloudTrail logs for the specific denied action to see more details about why the permission is being denied.\nTemporarily grant broader permissions (like\nAdministratorAccess\n) to test if it's a permission issue.\nContact AWS Support about the anomaly in your Organizations console, as this might indicate a deeper issue with your account configuration.\nSources\nI can create Bedrock Agent using console, but can't using CLI. | AWS re:Post\nCDK - Resource handler returned message: \"Access denied for operation 'AWS::Bedrock::Agent'.\" when creating an agent with foundationModel set as inference-profile. | AWS re:Post\nHow do I troubleshoot when User: arn is no authorized to perform Create * or Delete * or Update * on resource(s) because no identity- policy allows the actions | AWS re:Post\nIdentity-based policy examples for Amazon Bedrock Agents - Amazon Bedrock\n\nHello.\nAn IAM user with the IAM policy described in the following document was able to deploy the CloudFormation template you created.\nhttps://docs.aws.amazon.com/bedrock/latest/userguide/security_iam_id-based-policy-examples-agent.html\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"test\",\n            \"Effect\": \"Allow\",\n            \"Action\": [  \n                \"bedrock:ListFoundationModels\",\n                \"bedrock:GetFoundationModel\",\n                \"bedrock:TagResource\", \n                \"bedrock:UntagResource\", \n                \"bedrock:ListTagsForResource\", \n                \"bedrock:CreateAgent\", \n                \"bedrock:UpdateAgent\", \n                \"bedrock:GetAgent\", \n                \"bedrock:ListAgents\", \n                \"bedrock:DeleteAgent\",\n                \"bedrock:CreateAgentActionGroup\", \n                \"bedrock:UpdateAgentActionGroup\", \n                \"bedrock:GetAgentActionGroup\", \n                \"bedrock:ListAgentActionGroups\", \n                \"bedrock:DeleteAgentActionGroup\",\n                \"bedrock:GetAgentVersion\",\n                \"bedrock:ListAgentVersions\", \n                \"bedrock:DeleteAgentVersion\",\n                \"bedrock:CreateAgentAlias\", \n                \"bedrock:UpdateAgentAlias\",               \n                \"bedrock:GetAgentAlias\",\n                \"bedrock:ListAgentAliases\",\n                \"bedrock:DeleteAgentAlias\",\n                \"bedrock:AssociateAgentKnowledgeBase\",\n                \"bedrock:DisassociateAgentKnowledgeBase\",\n                \"bedrock:ListAgentKnowledgeBases\",\n                \"bedrock:GetKnowledgeBase\",\n                \"bedrock:ListKnowledgeBases\",\n                \"bedrock:PrepareAgent\",\n                \"bedrock:InvokeAgent\",\n                \"bedrock:AssociateAgentCollaborator\",\n                \"bedrock:DisassociateAgentCollaborator\",\n                \"bedrock:GetAgentCollaborator\",\n                \"bedrock:ListAgentCollaborators\",\n                \"bedrock:UpdateAgentCollaborator\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]   \n}"
}