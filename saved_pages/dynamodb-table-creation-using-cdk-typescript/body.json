{
  "body": "I am implementing a solution in AWS CDK to conditionally create a DynamoDB table only if it does not already exist. Below is the code snippet I am using:\nIssue:\nIf the table exists, tableExistenceCheck.getResponseField(\"Table.TableName\") correctly returns the table name, and tableExists is true.\nHowever, if the table does not exist, the call to getResponseField(\"Table.TableName\") throws an error because the \"Table.TableName\" field does not exist in the response.\nI need to implement a solution to conditionally create the DynamoDB table only if it does not already exist, and otherwise reference the existing table.\nconst transactionTableName = `MailPolicyUpdatesTable`;\n\n    // Custom Resource to check if the table exists\n    const tableExistenceCheck = new cr.AwsCustomResource(this, \"TransactionTableExistenceCheck\", {\n      onUpdate: { \n        service: \"DynamoDB\",\n        action: \"describeTable\",\n        parameters: {\n          TableName: transactionTableName,\n        },\n        physicalResourceId: cr.PhysicalResourceId.of(Date.now().toString()),\n        ignoreErrorCodesMatching: \"*ResourceNotFoundException*\"\n      },\n      policy: cr.AwsCustomResourcePolicy.fromSdkCalls({ resources: cr.AwsCustomResourcePolicy.ANY_RESOURCE }),\n    });\n    \n    // Check if the table exists by looking at the response \n    const tableExists = tableExistenceCheck.getResponseField('Table.TableName') !== undefined;\n\n    // Conditionally create or reference the table\n    const transactionTable = tableExists\n      ? dynamodb.TableV2.fromTableName(this, \"ExistingTransactionTable\", transactionTableName)\n      : new dynamodb.TableV2(this, \"MailPolicyUpdatesTable\", {\n          tableName: transactionTableName,\n          partitionKey: { name: \"id\", type: dynamodb.AttributeType.STRING },\n          removalPolicy: cdk.RemovalPolicy.RETAIN,\n          pointInTimeRecovery: true,\n          globalSecondaryIndexes: [\n            {\n              indexName: \"date_index\",\n              partitionKey: { name: \"date\", type: dynamodb.AttributeType.STRING },\n            },\n          ],\n        });\n\nTo implement a solution that conditionally creates a DynamoDB table only if it doesn't already exist, you can modify your approach slightly. Instead of relying on the\ngetResponseField\nmethod, which throws an error when the table doesn't exist, you can use the\ngetCapturedResponse\nmethod of the AwsCustomResource. This method returns the entire response, allowing you to check for the existence of the table more safely.\nHere's an improved version of your code:\nconst\ntransactionTableName\n=\n`\nMailPolicyUpdatesTable\n`\n;\n// Custom Resource to check if the table exists\nconst\ntableExistenceCheck\n=\nnew\ncr\n.\nAwsCustomResource\n(\nthis\n,\n\"TransactionTableExistenceCheck\"\n,\n{\nonUpdate\n:\n{\nservice\n:\n\"DynamoDB\"\n,\naction\n:\n\"describeTable\"\n,\nparameters\n:\n{\nTableName\n:\ntransactionTableName\n,\n}\n,\nphysicalResourceId\n:\ncr\n.\nPhysicalResourceId\n.\nof\n(\nDate\n.\nnow\n(\n)\n.\ntoString\n(\n)\n)\n,\nignoreErrorCodesMatching\n:\n\"ResourceNotFoundException\"\n}\n,\npolicy\n:\ncr\n.\nAwsCustomResourcePolicy\n.\nfromSdkCalls\n(\n{\nresources\n:\ncr\n.\nAwsCustomResourcePolicy\n.\nANY_RESOURCE\n}\n)\n,\n}\n)\n;\n// Check if the table exists by examining the entire response\nconst\nresponse\n=\ntableExistenceCheck\n.\ngetCapturedResponse\n(\n'onUpdate'\n)\n;\nconst\ntableExists\n=\nresponse\n&&\nresponse\n.\nTable\n;\n// Conditionally create or reference the table\nconst\ntransactionTable\n=\ntableExists\n?\ndynamodb\n.\nTableV2\n.\nfromTableName\n(\nthis\n,\n\"ExistingTransactionTable\"\n,\ntransactionTableName\n)\n:\nnew\ndynamodb\n.\nTableV2\n(\nthis\n,\n\"MailPolicyUpdatesTable\"\n,\n{\ntableName\n:\ntransactionTableName\n,\npartitionKey\n:\n{\nname\n:\n\"id\"\n,\ntype\n:\ndynamodb\n.\nAttributeType\n.\nSTRING\n}\n,\nremovalPolicy\n:\ncdk\n.\nRemovalPolicy\n.\nRETAIN\n,\npointInTimeRecovery\n:\ntrue\n,\nglobalSecondaryIndexes\n:\n[\n{\nindexName\n:\n\"date_index\"\n,\npartitionKey\n:\n{\nname\n:\n\"date\"\n,\ntype\n:\ndynamodb\n.\nAttributeType\n.\nSTRING\n}\n,\n}\n,\n]\n,\n}\n)\n;\nIn this updated version:\nWe use\ngetCapturedResponse('onUpdate')\nto get the entire response from the DescribeTable API call.\nWe check if the response exists and has a 'Table' property, which indicates the table exists.\nBased on this check, we either reference the existing table or create a new one.\nThis approach avoids the error when the table doesn't exist and provides a more robust way to conditionally create or reference the DynamoDB table.\nRemember that this method still has a small chance of race conditions in a distributed environment. If absolute consistency is required, you might need to implement additional error handling or use a more robust strategy.\nSources\nCDK TypeScript: Conditional Creation of DynamoDB Table | AWS re:Post\nclass CfnTable (construct) \u00b7 AWS CDK"
}