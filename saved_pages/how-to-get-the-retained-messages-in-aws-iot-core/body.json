{
  "body": "Hello,\nI am using the AWS IoT Device SDK for Embedded C for one of my use case taken from below link.\nhttps://docs.aws.amazon.com/iot/latest/developerguide/iot-embedded-c-sdk.html\nAnd here are my points captured from my test.\nCase 1:\nWhenever i run the application (with retain flag is 0) i can see the data received in the MQTT test client and wireshark application.\nBelow are my policy details and wireshark log.\nCase 2:\nWhenever i run the application (with retain flag is 1) i can not see the data received in the MQTT test client and wireshark application.\nBelow are my policy details and wireshark log.\nI have enabled the Retained Messages from AWS IoT Core like mentioned below but am not receiving any retained messages from the application. And i followed the link mentioned below for this test.\nhttps://aws.amazon.com/blogs/iot/getting-started-mqtt-retained-messages-aws-iot-core/\nAfter this i made changes in the policy that i specifically mentioned the client id and topic also as mentioned in the above link.\nyou\u2019ll need to match the topic filter exactly without the use of any wildcards (i.e. #,\n)\n*\nBut still am unable to see the retained messages in the aws iot core.\nSo, please help on this to capture the retained messages in aws iot core.\nThanks & Regards\nManoj\n\nTo get the Retained Messages in AWS IoT Core, you need to follow these steps:\nEnsure you have the correct permissions: Your AWS IoT Core policy should include the\niot:GetRetainedMessage\naction for the specific topic you're interested in.\nUse the appropriate API: AWS IoT Core provides two main methods to access retained messages:\na. ListRetainedMessages: This action lists summary information about the retained messages stored for your account. It returns only the topic names of the retained messages, not the message payloads.\nb. GetRetainedMessage: This action retrieves the details of a single retained message for a specified topic, including the message payload.\nFor your specific case using the AWS IoT Device SDK for Embedded C, make sure you're using the correct MQTT API calls to publish and subscribe to retained messages.\nWhen publishing a retained message, set the RETAIN flag to 1 (as you've done in Case 2).\nTo receive retained messages, subscribe to the appropriate topic. When you subscribe, you should receive any existing retained messages for that topic immediately.\nIf you're not seeing the retained messages in the MQTT test client, double-check that you're subscribed to the correct topic and that your policy allows you to receive messages on that topic.\nNote that publishing retained messages incurs additional charges. Each retained message publish is metered and charged as both a regular PUBLISH message and an additional RETAINED message charge for storing it.\nFor MQTT 3, retained messages do not expire and are stored until replaced or deleted. For MQTT 5, retained messages expire after the message expiry interval you set.\nIf you're still not receiving retained messages after following these steps, verify that the retained message was successfully published and stored by using the AWS IoT Core console or the AWS CLI to list and get retained messages. This can help you determine if the issue is with publishing or receiving the retained messages.\nRemember to check your AWS IoT Core settings, ensure your policy permissions are correct, and verify that you're using the API correctly in your application.\nSources\nGetRetainedMessage - AWS IoT\nAWS IoT Core policy actions - AWS IoT Core\nRetained message policy examples - AWS IoT Core\nListRetainedMessages - AWS IoT\nPricing for IoT Core MQTT Retained Messages | AWS re:Post\n\nThanks for the detailed breakdown \u2014 this can definitely get confusing when you\u2019re dealing with retained messages in MQTT.\nHere are a few key things to double-check:\nTopic matching must be exact.\nRetained messages in AWS IoT Core are only delivered if the subscription topic exactly matches the retained message's topic \u2014 no wildcards (# or +). It has to be a perfect string match.\nClient must subscribe after the retained message is published.\nIf your device connects before the retained message is published (and isn't subscribed to the topic), it won\u2019t receive anything. Try publishing the retained message first, then reconnect and re-subscribe to test.\nRetain flag matters.\nIt looks like you did set the retain flag to 1 when publishing \u2014 that's good. But make sure the payload isn't empty, otherwise it could actually delete the retained message (per MQTT spec).\nPermissions look mostly fine, but just in case, add:\njson\nCopy\nEdit\n\"Action\": [\n\"iot:Publish\",\n\"iot:Receive\",\n\"iot:Subscribe\",\n\"iot:Connect\",\n\"iot:GetRetainedMessage\",\n\"iot:ListRetainedMessages\"\n]\n...to your policy to be fully covered for retained message testing.\nUse AWS CLI to confirm storage:\nTry:\nbash\nCopy\nEdit\naws iot list-retained-messages\naws iot get-retained-message --topic <your/topic>\nThat way you know for sure if the message is stored.\n\nHello,\nI mentioned everything in my previous message. I followed all the steps from the link below and replicated the example for retained messages, and it's working.\nhttps://aws.amazon.com/blogs/iot/getting-started-mqtt-retained-messages-aws-iot-core/\nAfter making changes to my policy (i did not mentioned any wildcard entries in policy) and testing my application (i had set the retain flag to 1) according to the provided links, I noticed that no messages were being received from the device on the subscribed topic in the MQTT test client.\nhttps://docs.aws.amazon.com/iot/latest/developerguide/retained-message-policy-examples.html\nPlease review this and let me know exactly what I'm missing.\nRegards\nManoj\n\nHi Manoj,\nYou're on the right track with enabling retained messages and setting the retain flag to 1, but here are a few critical troubleshooting tips specific to AWS IoT Core + MQTT retained messages that may help clarify what's going wrong:\nConfirm Retained Message Was Actually Stored\nUse the AWS CLI to verify whether the retained message is stored:\nbash\nCopy\nEdit\naws iot list-retained-messages\naws iot get-retained-message --topic <your/topic>\nIf nothing shows up, the message might not have been retained properly\u2014possibly due to an empty payload or incorrect topic structure.\nMQTT Rules for Retained Messages in AWS IoT Core\nNo Wildcards:\nSubscriptions must exactly match the retained message topic (e.g., devices/device123/data) \u2014 wildcards like # or + will not work.\nRetained = Stored Only on New Publish:\nIf your app connects before the retained message is published, it won't receive it retroactively. The retained message is only pushed at the time of subscription, assuming the message already exists.\nEmpty Payload = Deletion:\nPer MQTT spec, publishing a retained message with an empty payload deletes the retained message for that topic.\nPolicy Permissions Check\nMake sure your IoT policy includes all relevant actions:\njson\nCopy\nEdit\n\"Action\": [\n\"iot:Connect\",\n\"iot:Publish\",\n\"iot:Receive\",\n\"iot:Subscribe\",\n\"iot:GetRetainedMessage\",\n\"iot:ListRetainedMessages\"\n]\nAlso, ensure the resource ARNs are specific (no wildcards like * in subscriptions).\nDebugging Tips\nTry using the MQTT Test Client in AWS IoT Core to manually publish a retained message, then connect your device and subscribe. This helps rule out SDK-related issues.\nIf you're using Wireshark, look for the RETAIN flag in the MQTT publish packets \u2014 that confirms whether it's being set correctly at the protocol level.\nLet me know your results from get-retained-message, and we can narrow this down further.\n\u2014TheQuietBuilder (AWS Community Member)"
}