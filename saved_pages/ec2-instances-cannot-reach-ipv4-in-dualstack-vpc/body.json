{
  "body": "I'm having trouble reaching IPv4 addresses from a dualstack VPC.\nI've created a new VPC and assigned both IPv4 and IPv6 CIDRs. The route table is as follows:\nDestination\nTarget\n10.1.0.0/16\nlocal\nabcd:abcd:abcd:abcd::/56\nlocal\n0.0.0.0/0\nInternet Gateway\n::/0\nInternet Gateway\nLaunched a new EC2 instance and assigned a IPv6 address but not IPv4 public address.\nI'm ABLE to:\nping the instance's IPv6 from the Internet as expected\nSSH into the instance from the Internet using IPv6 as expected\nBut, I'm UNABLE to, from within the instance:\nping any public IPv4 address\nping any local IPv4 address except the gateway (10.1.0.1)\nreach any Internet service that don't has a IPv6 address, e.g., github.com\nFor example, from within the instance:\n$ curl -I -v https://github.com\n* Host github.com:443 was resolved.\n* IPv6: (none)\n* IPv4: 140.82.114.3\n*   Trying 140.82.114.3:443...\n* connect to 140.82.114.3 port 443 from 10.1.0.106 port 58642 failed: Connection timed out\n* Failed to connect to github.com port 443 after 134937 ms: Couldn't connect to server\n* Closing connection\ncurl: (28) Failed to connect to github.com port 443 after 134937 ms: Couldn't connect to server\n\n$ curl -I -v https://google.com\n* Host google.com:443 was resolved.\n* IPv6: 2607:f8b0:4004:c1f::65, 2607:f8b0:4004:c1f::66, 2607:f8b0:4004:c1f::8a, 2607:f8b0:4004:c1f::64\n* IPv4: 172.253.63.139, 172.253.63.138, 172.253.63.101, 172.253.63.113, 172.253.63.100, 172.253.63.102\n*   Trying [2607:f8b0:4004:c1f::65]:443...\n* Connected to google.com (2607:f8b0:4004:c1f::65) port 443\n* ALPN: curl offers h2,http/1.1\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n*  CAfile: /etc/ssl/certs/ca-certificates.crt\n*  CApath: /etc/ssl/certs\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 / X25519 / id-ecPublicKey\n* ALPN: server accepted h2\n* Server certificate:\n*  subject: CN=*.google.com\n*  start date: Jun  2 08:35:30 2025 GMT\n*  expire date: Aug 25 08:35:29 2025 GMT\n*  subjectAltName: host \"google.com\" matched cert's \"google.com\"\n*  issuer: C=US; O=Google Trust Services; CN=WR2\n*  SSL certificate verify ok.\n*   Certificate level 0: Public key type EC/prime256v1 (256/128 Bits/secBits), signed using sha256WithRSAEncryption\n*   Certificate level 1: Public key type RSA (2048/112 Bits/secBits), signed using sha256WithRSAEncryption\n*   Certificate level 2: Public key type RSA (4096/152 Bits/secBits), signed using sha384WithRSAEncryption\n* using HTTP/2\n* [HTTP/2] [1] OPENED stream for https://google.com/\n* [HTTP/2] [1] [:method: HEAD]\n* [HTTP/2] [1] [:scheme: https]\n* [HTTP/2] [1] [:authority: google.com]\n* [HTTP/2] [1] [:path: /]\n* [HTTP/2] [1] [user-agent: curl/8.5.0]\n* [HTTP/2] [1] [accept: */*]\n> HEAD / HTTP/2\n> Host: google.com\n> User-Agent: curl/8.5.0\n> Accept: */*\n>\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* old SSL session ID is stale, removing\n< HTTP/2 301\nHTTP/2 301\n< location: https://www.google.com/\nlocation: https://www.google.com/\n< content-type: text/html; charset=UTF-8\ncontent-type: text/html; charset=UTF-8\n< content-security-policy-report-only: object-src 'none';base-uri 'self';script-src 'nonce-mVD6EMgJCUlgrK64XUwcew' 'strict-dynamic' 'report-sample' 'unsafe-eval' 'unsafe-inline' https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp\ncontent-security-policy-report-only: object-src 'none';base-uri 'self';script-src 'nonce-mVD6EMgJCUlgrK64XUwcew' 'strict-dynamic' 'report-sample' 'unsafe-eval' 'unsafe-inline' https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp\n< date: Sun, 22 Jun 2025 14:46:39 GMT\ndate: Sun, 22 Jun 2025 14:46:39 GMT\n< expires: Tue, 22 Jul 2025 14:46:39 GMT\nexpires: Tue, 22 Jul 2025 14:46:39 GMT\n< cache-control: public, max-age=2592000\ncache-control: public, max-age=2592000\n< server: gws\nserver: gws\n< content-length: 220\ncontent-length: 220\n< x-xss-protection: 0\nx-xss-protection: 0\n< x-frame-options: SAMEORIGIN\nx-frame-options: SAMEORIGIN\n< alt-svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\nalt-svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\n\n<\n* Connection #0 to host google.com left intact\nAs far as I know, the VPC setup is correct. Could it be some OS routing configuration? I've tried Amazon LInux 2023 and Ubuntu 24.04 with exactly the same results.\n\nYou would need to be to use NAT Gateway which supports NAT64 and DNS64.\nhttps://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-nat64-dns64.html\nhttps://docs.aws.amazon.com/whitepapers/latest/ipv6-on-aws/interoperability.html\n\nThe issue you're experiencing is related to how IPv6-only instances handle IPv4 traffic in a dual-stack VPC. When you launch an EC2 instance with only an IPv6 address (no public IPv4 address), the instance cannot natively communicate with IPv4-only destinations on the internet.\nYour route table configuration looks correct, but the problem is that your instance doesn't have a mechanism to translate between IPv6 and IPv4. This is why you can:\nSuccessfully reach IPv6-enabled services like Google (which supports both IPv4 and IPv6)\nCannot reach IPv4-only services like GitHub\nTo solve this issue, you need to implement NAT64 and DNS64 functionality using an Amazon VPC NAT Gateway. This allows IPv6-only instances to communicate with IPv4-only destinations by:\nTranslating IPv6 packets to IPv4 (NAT64)\nSynthesizing AAAA records for IPv4-only destinations (DNS64)\nWithout this translation mechanism, your IPv6-only instance cannot establish connections to IPv4-only destinations, which is why you're seeing the connection timeout errors when trying to reach GitHub.\nAlternatively, you could switch to a dual-stack configuration for your instance by assigning it both IPv6 and public IPv4 addresses, which would allow it to communicate directly with both IPv6 and IPv4 destinations.\nSources\nGithub.com not reachable from an ipv6 only ec2 instance | AWS re:Post\nInteroperability - IPv6 on AWS"
}