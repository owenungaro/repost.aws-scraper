{
  "body": "This article demonstrates a simple and cost-effective approach for bulk migration of container images from Google Artifact Registry to Amazon Elastic Container Registry (ECR)\n\nIntroduction\nWhen organizations migrate their containerized applications and microservices architectures, ensuring a smooth and secure transfer of container images between registries is essential to the overall migration process. While numerous methods are available, this article demonstrates a simple and cost-effective approach for bulk migration of container images from Google Artifact Registry to Amazon Elastic Container Registry (ECR).\nGoogle Cloud customers who wish to migrate their data to another cloud provider or on-premises infrastructure can take advantage of free network data transfer when moving data out of Google Cloud [1].\nImportant:\nEffective March 18, 2025, Google Container Registry is shut down. Google recommends transitioning projects with active Container Registry usage to Artifact Registry repositories [2]. This article assumes Google Artifact Registry as the source for container images.\nPrerequisites\nBefore beginning the migration process, ensure you have:\nAn active AWS account (if you don't have one, follow the\nSetting Up Your Environment\ntutorial)\nContainer images stored in\nGoogle Artifact Registry\nAppropriate permissions in both Google Cloud and AWS environments\nMigration Steps\nLaunch and Connect to an Amazon EC2 Instance\nFollow the\nGet started with Amazon EC2\nguide to launch an Amazon Linux instance. Select\nAmazon Linux 2023\nfor the\nAmazon Machine Image (AMI)\nand\nt3.medium\nfor the\nInstance type\n.\nConnect to your Amazon EC2 instance using Session Manager\n. You can also connect to the instance using\nother available options\n.\nAttach the\nAmazonEC2ContainerRegistryFullAccess\npolicy to the IAM role associated with your EC2 instance. This provides the necessary permissions to interact with Amazon ECR.\nInstall Docker on Amazon EC2 Instance\nAfter connecting to EC2 instance using Session Manager, run\nsudo yum update -y\nto update installed packages and the package cache.\nRun\nsudo yum install -y docker\nto install Docker.\nRun\nsudo service docker start\nto start the Docker service.\nAdd your user to the docker group by running\nsudo usermod -aG docker $(whoami)\n.\nImportant\n: You must terminate your session and reconnect to the EC2 instance for these changes to take effect.\nInstall Google Cloud CLI on Amazon EC2 Instance\nRun\ncd ~\nto switch to the home directory.\nFollow these\ninstructions to install Google Cloud CLI\non your Amazon EC2 Linux instance. The Google Cloud CLI includes the\ngcloud\n,\ngsutil\n, and\nbq\ncommand-line tools [3].\nInitialize the Google Cloud CLI by running\n./google-cloud-sdk/bin/gcloud init\n.\nDuring initialization\n: Follow the prompts to set your default region and Google Cloud project for this migration.\nAfter installation, run\nsource ~/.bashrc\nto refresh your terminal session and enable\ngcloud\ncommands.\nMigration Script\nCreate the migration script by saving the following code as\ngar-to-ecr-migration.sh\nusing a text editor like\nnano\nor\nvim\n.\nNote\n: This script defaults to migrating images from the\ngcr.io\nrepository. If your images are stored in a different location (such as\nus.gcr.io\n,\neu.gcr.io\n, or\nasia.gcr.io\n), update the\nGCP_REPOSITORY\nvariable accordingly.\n#!/bin/bash\n# =============================================================================\n# GAR to ECR Migration Script\n# This script migrates Docker images from Google Artifact Registry (GAR)\n# to Amazon Elastic Container Registry (ECR)\n# =============================================================================\n# AWS Configuration - Automatically detect AWS account and region\nAWS_ACCOUNT\n=\n$(\naws sts get-caller-identity --query Account --output text\n)\n# Get current AWS account ID\nTOKEN\n=\n$(\ncurl\n-X PUT\n\"http://169.254.169.254/latest/api/token\"\n-H\n\"X-aws-ec2-metadata-token-ttl-seconds: 21600\"\n)\n# Get EC2 metadata token for security\nAWS_REGION\n=\n$(\ncurl\n-H\n\"X-aws-ec2-metadata-token:\n${TOKEN}\n\"\nhttp://169.254.169.254/latest/meta-data/placement/region\n)\n# Get current AWS region from EC2 metadata\nECR_DOMAIN\n=\n\"\n${AWS_ACCOUNT}\n.dkr.ecr.\n${AWS_REGION}\n.amazonaws.com\"\n# Construct ECR registry URL\n# Google Configuration - Get current GCP project and set repository\nGCP_PROJECT\n=\n$(\ngcloud config get-value project\n)\n# Get currently configured GCP project\nGCP_REPOSITORY\n=\n\"gcr.io\"\n# GAR repository URL - change to \"us.gcr.io\", \"eu.gcr.io\", or \"asia.gcr.io\" if needed\n# Display current configuration for user verification\necho\n\"=== Configuration Verification ===\"\necho\n\"AWS Account ID:\n${AWS_ACCOUNT}\n\"\necho\n\"AWS Region:\n${AWS_REGION}\n\"\necho\n\"GCP Project:\n${GCP_PROJECT}\n\"\necho\n\"ECR Domain:\n${ECR_DOMAIN}\n\"\necho\n\"GAR Repository:\n${GCP_REPOSITORY}\n/\n${GCP_PROJECT}\n\"\necho\n\"==================================\"\n# Validate that all required configuration values are present\nif\n[\n-z\n\"\n$AWS_ACCOUNT\n\"\n]\n||\n[\n-z\n\"\n$AWS_REGION\n\"\n]\n||\n[\n-z\n\"\n$GCP_PROJECT\n\"\n]\n;\nthen\necho\n\"\u274c Error: Missing required configuration\"\necho\n\"Prerequisites:\"\necho\n\"  - AWS CLI configured and authenticated (run: aws configure)\"\necho\n\"  - GCP CLI configured and authenticated (run: gcloud auth login)\"\necho\n\"  - Docker installed and running\"\nexit\n1\nfi\n# Function to create ECR repository if it doesn't exist\n# This prevents errors when trying to push to non-existent repositories\ncreate_ecr_repo\n(\n)\n{\nlocal\nrepo_name\n=\n$1\necho\n\"  \ud83d\udce6 Checking if ECR repository '\n${repo_name}\n' exists...\"\n# Try to describe the repository; if it fails, create it\naws ecr describe-repositories --repository-names\n\"\n${repo_name}\n\"\n2\n>\n/dev/null\n||\n{\necho\n\"  \u2795 Creating ECR repository:\n${repo_name}\n\"\naws ecr create-repository --repository-name\n\"\n${repo_name}\n\"\n}\n}\n# Step 1: Authenticate with AWS ECR\necho\n\"\ud83d\udd10 Authenticating with AWS ECR...\"\n# Get ECR login token and authenticate Docker with ECR\naws ecr get-login-password --region\n${AWS_REGION}\n|\n\\\ndocker\nlogin --username AWS --password-stdin\n${ECR_DOMAIN}\n# Step 2: Authenticate with Google Artifact Registry\necho\n\"\ud83d\udd10 Authenticating with Google Artifact Registry...\"\n# Configure Docker to use gcloud as credential helper for GAR\ngcloud auth configure-docker\n# Step 3: Get list of all images from GAR\necho\n\"\ud83d\udccb Fetching list of images from GAR repository:\n${GCP_REPOSITORY}\n/\n${GCP_PROJECT}\n...\"\nimages\n=\n$(\ngcloud container images list --repository\n=\n$\n{\nGCP_REPOSITORY\n}\n/$\n{\nGCP_PROJECT\n}\n--format\n=\n\"get(name)\"\n)\n# Step 4: Process each image found in GAR\nfor\nimage\nin\n$images\n;\ndo\necho\n\"\"\necho\n\"\ud83d\udd04 Processing image:\n${image}\n\"\n# Get all tags for the current image (excluding untagged images)\necho\n\"  \ud83d\udccc Fetching tags for\n${image}\n...\"\ntags\n=\n$(\ngcloud container images list-tags $\n{\nimage\n}\n--format\n=\n\"get(tags)\"\n--filter\n=\n\"tags:*\"\n|\ntr\n';'\n'\\n'\n)\n# Extract repository name by removing the GAR prefix\n# Example: gcr.io/my-project/my-app -> my-app\nrepo_name\n=\n$(\necho\n$\n{\nimage\n}\n|\nsed\n\"s|\n${GCP_REPOSITORY}\n/\n${GCP_PROJECT}\n/||g\"\n)\necho\n\"  \ud83d\udcc2 Repository name:\n${repo_name}\n\"\n# Create corresponding ECR repository if it doesn't exist\ncreate_ecr_repo\n\"\n${repo_name}\n\"\n# Process each tag for the current image\nfor\ntag\nin\n$tags\n;\ndo\nif\n[\n!\n-z\n\"\n$tag\n\"\n]\n;\nthen\necho\n\"\"\necho\n\"  \ud83c\udff7\ufe0f  Processing tag:\n${tag}\n\"\necho\n\"    Source:\n${image}\n:\n${tag}\n\"\necho\n\"    Target:\n${ECR_DOMAIN}\n/\n${repo_name}\n:\n${tag}\n\"\n# Step 4a: Pull image from GAR to local Docker\necho\n\"    \u2b07\ufe0f  Pulling from GAR...\"\ndocker\npull\n${image}\n:\n${tag}\n# Step 4b: Tag the image for ECR destination\necho\n\"    \ud83c\udff7\ufe0f  Tagging for ECR...\"\ndocker\ntag\n${image}\n:\n${tag}\n${ECR_DOMAIN}\n/\n${repo_name}\n:\n${tag}\n# Step 4c: Push image to ECR\necho\n\"    \u2b06\ufe0f  Pushing to ECR...\"\ndocker\npush\n${ECR_DOMAIN}\n/\n${repo_name}\n:\n${tag}\n# Step 4d: Clean up local images to save disk space\necho\n\"    \ud83e\uddf9 Cleaning up local images...\"\ndocker\nrmi\n${image}\n:\n${tag}\n2\n>\n/dev/null\n||\ntrue\ndocker\nrmi\n${ECR_DOMAIN}\n/\n${repo_name}\n:\n${tag}\n2\n>\n/dev/null\n||\ntrue\necho\n\"    \u2705 Successfully migrated\n${image}\n:\n${tag}\n\"\nfi\ndone\ndone\necho\n\"\"\necho\n\"\ud83c\udf89 Migration complete!\"\necho\n\"\"\necho\n\"\ud83d\udcca Summary:\"\necho\n\"  - All images have been migrated from GAR to ECR\"\necho\n\"  - ECR repositories created as needed\"\necho\n\"  - Local Docker images cleaned up to save space\"\nRun\nchmod +x gar-to-ecr-migration.sh\nto make it executable.\nRun\n./gar-to-ecr-migration.sh\nto initiate migration process.\nClean Up\nTo avoid ongoing AWS charges, make sure to\nTerminate the EC2 Instance\n.\nGo to the\nEC2 Console\nSelect the instance you created for migration\nChoose\nInstance State\n\u2192\nTerminate instance\nConfirm termination when prompted\nImportant\n: Make sure your container images are successfully migrated and working in your new environment before deleting any resources.\nNext Steps\nAfter completing the migration, take these additional steps to ensure a smooth transition:\nUpdate deployment configurations to reference the new ECR image URLs\nTest your applications thoroughly with the migrated ECR images\nImplement ECR lifecycle policies to optimize storage costs and manage image retention\nUpdate CI/CD pipelines to push new images directly to ECR\nDocument the new image locations for your team\nConclusion\nMigrating container images from Google Artifact Registry to Amazon ECR can be accomplished efficiently and securely using the automated approach outlined in this guide. This migration strategy offers several key benefits:\nCost-effective\n: Leverages Google Cloud's free egress policy for customers migrating away from their services\nAutomated\n: Reduces manual effort and potential errors through scripted migration\nComprehensive\n: Handles bulk migration of multiple images and tags simultaneously\nBy following these steps, development teams can ensure their containerized applications continue operating seamlessly in their new AWS environment while minimizing downtime and migration costs. The provided script serves as a foundation that can be customized for specific organizational needs and extended for more complex migration scenarios.\nReferences\n[1].\nRemoving data transfer fees when moving off Google Cloud\n[2].\nGoogle Container Registry Depreciation\n[3].\nInstall the gcloud CLI"
}