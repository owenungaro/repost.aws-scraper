{
  "body": "This article shows how to develop a cost allocation model to effectively manage Amazon Q Developer subscription costs.\n\nIntroduction\nAmazon Q Developer\nis an interactive, generative AI-powered assistant that can help you understand, build, upgrade, and operate applications on AWS. To support developers across the software development lifecycle, Amazon Q Developer enhances productivity and streamlines workflows.\u00a0Unlike typical resource-based services, its subscription pricing model creates unique cost allocation challenges. This article shows you how to create a cost allocation model to manage your Amazon Q Developer subscription costs.\nTechnical Account Managers (TAMs) help you optimize your costs across your AWS environment. As you adopt generative AI solutions and services, your organizations need strategic guidance to understand subscription-based pricing models and effective cost allocation models.\nAmazon Q Developer pricing and billing\nAmazon Q Developer has two\ndifferent pricing tiers\n-- Free Tier and Pro Tier.\nResource-based costs\nAWS typically calculates your costs based on the consumption of specific resources, such as storage volumes, compute hours, or number of API calls. You can easily track and allocate these resource-based costs because these costs are directly tied to the resources within individual accounts.\nYou can associate each AWS account with an allocation code,\u00a0such as a specific tag or cost category. This helps you track, report, and charge back the charges for a business unit accurately. It's a best practice to separate resources and workloads into\nmultiple AWS accounts\n. AWS accounts act as isolated resource containers. If incidents such as security breaches, misconfigurations, resource exhaustion, or application failures occur, then these containers offer workload categorization and scope of impact reduction. The isolation prevents issues in one account from affecting resources and workloads in other accounts. Customers can also use account separation to allocate costs internally to the appropriate cost centers, business functions, or application groups.\nUser-based subscription costs\nThe Amazon Q Developer pricing model, designed for user-based subscriptions, differs from typical resource-based AWS services. A user-based subscription approach offers organizational flexibility, but requires a specific strategy for detailed cost allocation. For example, a telecom provider with developers across multiple business units needs to accurately distribute the subscription costs to different cost centers. Similarly, a professional services organization wants to allocate costs between their development teams to track spending across different projects.\nAmazon Q Developer Pro requires an AWS Identity and Access Management (IAM) Identity Center instance to subscribe users and groups. If you use an\norganization instance of IAM Identity Center\nto manage and configure Amazon Q Developer Pro, then AWS charges the user-based subscription costs to the payer account.\nThe pricing model for Amazon Q Developer allows developers to access the features of Amazon Q Developer across multiple projects with a single license. This reduces the need to track the usage per individual resource or AWS account. Your organizations can\nprovision\nthe required number of user licenses based on their team size. The model also provides a cohesive billing experience across different subscriptions, such as Amazon Q Business and Amazon QuickSight Q. However, after your organizations provision licenses, they need a mechanism to track and allocate the user-based subscription costs to the appropriate cost allocation codes.\nThe solution in this article provides an effective way to address the challenges related to allocating Amazon Q Developer subscription costs.\nSolution overview\nThis solution uses AWS Cost and Usage Reports (CURs), Amazon Athena, and IAM Identity Center to collect and process subscription data. It also uses AWS Batch to run the cost allocation analysis as a containerized job.\nPrerequisites\nAt the payer level, verify that the exports in AWS Data Exports include a\nCUR 2.0\ndata table with the\nInclude resource IDs\noption turned on. If this export doesn't exist, then create a\nstandard data export\nwith the following options:\nTo use standard SQL to analyze the CUR 2.0 data, set up SQL queries with Athena. For more information, see\nProcessing data exports\n.\nYou need an AWS Fargate job queue in AWS Batch to run the subscription cost analysis as a containerized job. If you don't already have this job queue, then create one. For more information, see\nCreate a Fargate job queue\n. This setup helps you efficiently schedule and run the analysis process.\nInstallation\n1. Clone the\nq-developer-subscription-cost-breakdown\nrepository on the GitHub website. Then, follow the installation instructions to deploy the AWS CloudFormation template and Docker container. The CloudFormation template requires configuration parameters. These parameters include Athena database details, the IAM Identity Center store ID, and the specific user attribute that's designated for subscription cost allocation. After the installation is successful, you get an AWS Batch job to process your subscription costs.\n2. Use the Fargate job queue that you previously created to run the batch job. You can also include the year and month for cost allocation as additional parameters for analyzing historical cost data or reprocessing past allocations. If you don't provide the year and month, then the solution will automatically use the current year and month to get the cost data.\naws batch submit-job \\\n    --job-name q-dev-cost-analysis \\\n    --job-queue {your-job-queue} \\\n    --job-definition q-dev-cost-analyzer \\\n    --parameters '{\"year\":\"yyyy\",\"month\":\"mm\"}'\nYou can use AWS Batch's\nscheduling features\nand configure the job to run automatically on a certain schedule to align with your organization's reporting cycles.\nSolution walkthrough\nCUR includes three key columns that identify Amazon Q Developer subscription details. The\nline_item_usage_type\ncolumn displays the monthly subscription description. The\nline_item_operation\ncolumn displays\nnumber-q-dev-subscriptions\nfor costs that are related to Amazon Q Developer subscription charges. The\nline_item_resource_id\ncolumn contains the IAM Identity Center users' Amazon Resource Names (ARNs) that uniquely identify each user. The\nline_item_unblended_cost\ncolumn contains the subscription cost at the selected time granularity for the CUR, and is prorated as needed.\nThe solution uses this data to retrieve the subscription charges. The following is a high-level architecture diagram of the solution:\nFirst, you can use this query to aggregate the subscription charge per user from the CUR table:\nSELECT line_item_resource_id, sum(line_item_unblended_cost) as per_user_cost\nFROM COST_AND_USAGE_REPORT\nWHERE billing_period=?\nAND line_item_product_code='AmazonQ'\nAND line_item_operation='number-q-dev-subscriptions'\nAND line_item_line_item_type='Usage'\nGROUP BY line_item_resource_id;\nThen, run the query against the Athena table by the job:\nathena_client = boto3.client('athena')\n\ncreate_prepared_statement_response = athena_client.create_prepared_statement(\nStatementName=statement_name,\nWorkGroup=settings.WORK_GROUP,\nQueryStatement=query_string.format(settings.ATHENA_TABLE_NAME))\n\nbilling_period = f\"{year}-{int(month):02d}\"\nexecute_query = f\"EXECUTE {statement_name} USING '{billing_period}'\"\nquery_execution = athena_client.start_query_execution(QueryString=execute_query,\nQueryExecutionContext={'Database': settings.DATABASE_NAME},\nResultConfiguration={'OutputLocation': settings.RESULT_LOCATION})\nYou can retrieve the AWS IAM Identity Center user ID from the\nline_item_resource_id\ncolumn. Then, use the user ID to look up the user details in IAM Identity Center.\nidc_client = boto3.client('identitystore')\n\nuser_details = idc_client.describe_user(\n       IdentityStoreId=settings.IDC_STORE_ID,\n       UserId=user_id)\nThe lookup retrieves detailed user information such as name, email address, and phone number. You can use this data to find out additional details about the users. Check if a custom cost allocation attribute, such as cost center, project code, or business unit code, is available in IAM Identity Center as an extended user attribute. If so, then you can use a signed API call to extract the information.\nNote:\nIf these extended attributes are stored in other systems, then replace the following step with the appropriate lookup mechanism in the\nquery_idc.py\nfile from the repository.\n# Create SigV4 auth with AWS credentials\nsigv4 = SigV4Auth(session.get_credentials(), 'identitystore', region)\n\n# Create and sign request with SigV4\nrequest = AWSRequest(method='POST',\nurl= f'https://up.sso.{region}.amazonaws.com/identitystore/',\ndata=json.dumps({\"IdentityStoreId\": identity_store_id, \"UserIds\": [user_id]}),\nheaders={'Content-Type': 'application/x-amz-json-1.1', 'X-Amz-Target': 'AWSIdentityStoreService.DescribeUsers'})\nsigv4.add_auth(request)\nprepped = request.prepare()\nresponse = requests.post(prepped.url, headers=prepped.headers, data=data, timeout=30)\nThe solution has now aggregated the subscription cost per user with the corresponding cost allocation attribute from IAM Identity Center that you chose during installation. The next step handles the allocation of tax or credit line items. You can use the final output in your organization's existing cost allocation mechanisms.\nThe tax or credit line items corresponding to the subscription cost don\u2019t have the associated user information. The solution adds these line items separately and then distributes them proportionally to the cost allocation attribute.\nSELECT sum(line_item_unblended_cost) as tax_credit_cost\nFROM COST_AND_USAGE_REPORT\nWHERE billing_period=?\nAND line_item_product_code='AmazonQ'\nAND line_item_operation='number-q-dev-subscriptions'\nAND (line_item_line_item_type='Tax' OR line_item_line_item_type='Credit');\nThis step makes sure that the charges are appropriately accounted for and allocated to the relevant entities.\nThe job stores the subscription costs and other charges per user in an Amazon DynamoDB table for downstream reporting and actions.\nCleanup\nDelete the AWS CloudFormation template that you deployed. Remove the entities that you created as part of prerequisites, such as the AWS Batch job queue, Athena tables, and CUR Data Exports.\nConclusion\nThis article provides a cost allocation method to accurately attribute user subscription costs and associated charges for Amazon Q Developer to different organizational entities.\u00a0With accurate cost attribution and allocation, organizations can implement effective chargeback models within their AWS environment.\nThe solution uses CUR 2.0 that's available at no cost, along with Athena, AWS Batch, Fargate, and DynamoDB that incur usage-based charges. When you consider the monthly execution frequency and minimal data processing requirements, the solution's running costs are typically low. Use the\nAWS Pricing Calculator\nto estimate costs based on your usage patterns. To activate subscriptions for your developers, see\nManaging Amazon Q Developer Pro subscriptions\n.\nIf you have an AWS Enterprise Support or Enterprise On-Ramp plan, then your TAM can help you maximize the value of your AWS investments. The TAM provides personalized guidance on cost optimization strategies, architectural reviews, and operational excellence. To learn more about our support plans and how they can benefit your organization, see\nAWS Support\n.\nAbout the authors\nAbout the authors\nSunil Govindankutty\nSunil Govindankutty is a Principal TAM at AWS, where he helps customers operate optimized and secure cloud workloads. With over 20 years of experience in software development and architecture, he helps enterprises build resilient systems and integrate AI-powered assistants into modern development workflows. Outside of work, Sunil enjoys family time, chess, gardening, and solving mysteries both in books and cloud architectures.\nDale Holder\nDale Holder is a Solutions Architect at AWS and brings over 15 years of technology experience to his role. His areas of expertise include infrastructure, migration and modernization, storage, and data analytics. He guides enterprise customers and partners in their cloud adoption journey."
}