{
  "body": "I'm trying to use Glue to detect schema changes in an Aurora PostgresSQL database.  I've set up a Glue crawler against a JDBC connection.  I ran it and successfully populated the relational database tables into the Glue database.\nIn Postgres, I created a table named tmp_deleteme.  I ran the crawler again, and it was added to the Glue database.\nIn Postgres, I dropped the table tmp_deleteme.  I ran the crawler again and the crawler did not detect that the Postgres table was dropped.  It remains in the Glue database.  I've tried this several times with several temp tables and I can't get the crawler to recognize that the table was dropped.\nThe crawler is configured thusly:\n\"RecrawlPolicy\": {\n            \"RecrawlBehavior\": \"CRAWL_EVERYTHING\"\n        },\n        \"SchemaChangePolicy\": {\n            \"UpdateBehavior\": \"UPDATE_IN_DATABASE\",\n            \"DeleteBehavior\": \"DELETE_FROM_DATABASE\"\n        },\n        \"LineageConfiguration\": {\n            \"CrawlerLineageSettings\": \"DISABLE\"\n        },\nI would think the DeleteBehavior setting would cause the expected behavior.  There are no errors in the crawler log or in the RDS database log.\nAm I missing something?\n\nIt sounds like you're experiencing an issue with the AWS Glue crawler not deleting tables from the Glue Data Catalog when they've been dropped from your PostgreSQL database.\n\n    Your configuration looks correct with the SchemaChangePolicy set to \"DeleteBehavior\": \"DELETE_FROM_DATABASE\", which should remove tables from the Glue Data Catalog when they no longer exist in the source database.\n\n    Since the crawler isn't detecting the dropped tables, here are some potential issues to check:\n\n    1. JDBC connection configuration: Ensure your JDBC URL is correctly configured to connect to the right database schema where the tables were dropped.\n\n    2. IAM permissions: Verify that the IAM role used by the crawler has sufficient permissions to both read from the database and update/delete tables in the Glue Data Catalog.\n\n    3. Network connectivity: Check that there are no networking issues preventing proper communication between AWS Glue and your Aurora PostgreSQL database.\n\n    4. Database credentials and permissions: Ensure the database user credentials configured in your connection have the proper permissions to view schema information.\n\n    If the crawler is successfully adding new tables but not removing deleted ones, you might need to manually delete the tables from your Glue Data Catalog using the AWS Glue API or SDK. You can use methods like `delete_table()` with the appropriate database name and table name parameters.\n\n    As a workaround, you could try recreating the crawler or adjusting the include path to be more specific to the tables you want to track.\nSources\nTroublehsoot AWS Glue connection to a JDBC data source | AWS re:Post\nUse DeleteTable with an AWS SDK - AWS Glue\nAWS Glue examples using SDK for Python (Boto3) - AWS SDK Code Examples"
}