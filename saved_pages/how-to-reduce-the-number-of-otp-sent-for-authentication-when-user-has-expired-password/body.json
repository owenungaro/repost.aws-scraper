{
  "body": "AWS Cognito sends 2 OTP whenever password expired\nCurrently authentication workflow uses Lambda triggers and MFA is set optional.\nPre authentication Lambda Trigger\nAttached : lambda-expirationPasswordTimeChecker\nThe provided script is designed to enforce custom password expiration logic for users when password has 3 month old and perform reset password.\nHere's an explanation of its use case and purpose:\nCustom Password Expiration Policy:\nWhile Cognito handles \"Forgot Password\" functionality, it doesn\u2019t natively enforce password expiration for permanent passwords.\nThis script ensures that if a user's password is older than the defined expiration policy (e.g., 90 days), the system resets their password programmatically.\nSecurity Compliance:\nSome organizations or tenants might have regulatory or internal compliance requirements mandating periodic password updates (e.g., every 90 days).\nThe script enables this functionality by leveraging Cognito and maintaining expiration data as a custom attribute in Cognito (custom:expirationDatetime).\nAudit and Tenant-Specific Logic:\nThe script retrieves tenant-specific and user-specific information from DynamoDB tables (TENANT_POOLS_TABLE_NAME and USERS_TABLE_NAME).\nThese data are logged for audit purposes, ensuring administrators can monitor which user's password was reset and which tenant they belong to\nPre token generation Lambda Trigger & Post Confirmation Lambda trigger\nAttached : lambda-expirationPasswordTimeUpdater\nSimilar to above, the provided script is designed to enforce custom password expiration logic for users when change password.\nSet the EXPIRATION_PASSWORD_MONTHS = 3\nKey Differences\nPreAuthentication Lambda Trigger (Cognito)\nPurpose: Runs custom logic as part of the authentication flow in AWS Cognito.\nWhen It Runs:\nExecuted after Cognito verifies a user's credentials but before it issues tokens (ID, access, or refresh tokens).\nAllows you to perform checks (e.g., enforce password expiration policies, account state validation) or log events (like successful logins).\nUse Cases:\nEnforcing business logic like password expiration, account suspension, etc.\nEnhancing security by validating or altering login attempts.\nTracking user-specific attributes or events in an external system (like DynamoDB, for audit purposes).\nLambda Authorizer (API Gateway)\nPurpose: Verifies and validates API requests before granting access to specific resources.\nWhen It Runs:\nExecuted by API Gateway after receiving an API request and before invoking the target service or Lambda function.\nUsually checks a Cognito-issued token (ID or access token) in the API request header to validate a user's access to the API.\nUse Cases:\nValidating JWT tokens and confirming claims (e.g., roles or permissions).\nEnforcing additional resource-level access controls (e.g., tenant isolation or access limits).\nRetrieving and attaching user context (e.g., permissions, tenant info) for the backend to consume.Temporary vs. Permanent Passwords:\nTemporary passwords created via AdminCreateUser or similar functions have a 90-day expiration.\nA new password set through \"Forgot Password\" is permanent and does not have an expiration timeline unless enforced by a custom policy.\n\nWhen a user's password expires in Amazon Cognito and MFA is enabled, you may be experiencing multiple OTP (One-Time Password) messages being sent during the authentication flow. This happens because the system is sending one OTP for the password reset process and another for the MFA verification.\nTo reduce the number of OTPs sent when a user has an expired password, you can implement the following solutions:\nModify your Pre-Authentication Lambda Trigger:\nInstead of forcing an immediate password reset when detecting an expired password, you could set a flag in the user attributes indicating the password needs to be changed at the next successful authentication. This way, the user completes their MFA authentication first, and then is prompted to change their password afterward.\nUse AdminResetUserPassword with care:\nIf your lambda-expirationPasswordTimeChecker is using AdminResetUserPassword to force password resets, consider that this immediately invalidates the user's current authentication attempt and triggers a separate password reset flow, which can result in multiple OTPs.\nConsolidate the authentication flow:\nAdjust your authentication flow to handle both the password reset and MFA verification in a single sequence. You can use custom authentication challenges to manage this process more efficiently.\nConsider using TOTP (Time-based One-Time Password) MFA:\nIf appropriate for your use case, software token MFA (TOTP) using authenticator apps doesn't require sending additional OTPs via SMS or email. Users would generate the code from their authenticator app instead.\nAdjust the password expiration timing:\nYou could modify your EXPIRATION_PASSWORD_MONTHS setting to create a grace period where users are warned about upcoming password expiration but can still authenticate normally for a short time.\nRemember that your custom password expiration implementation using Lambda triggers gives you flexibility to control exactly when and how the password reset occurs in relation to the MFA verification, allowing you to optimize the user experience.\nSources\nCognito_MFA_Reset_or_reconfigure_for_user | AWS re:Post\nAuthentication with Amazon Cognito user pools - Amazon Cognito\nAdding MFA to a user pool - Amazon Cognito\nHow can I enforce password expiration in Amazon Cognito User Pools | AWS re:Post"
}