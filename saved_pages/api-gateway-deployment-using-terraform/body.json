{
  "body": "I have a rest api gateway created using terraform now I need to create a deployment resource using terraform when the body and the resource policy of the api gateway changes i need to deploy the api\n\nTo create an API Gateway deployment using Terraform that automatically deploys when the body or resource policy changes, you'll need to set up a deployment resource that depends on those components.\nHere's how you can approach this:\nFirst, ensure you have your REST API Gateway resource defined in Terraform.\nCreate a deployment resource that references your API Gateway and includes dependencies on the body and resource policy:\nresource\n\"aws_api_gateway_deployment\"\n\"example\"\n{\nrest_api_id\n=\naws_api_gateway_rest_api.example.id\nstage_name\n=\n\"dev\"\n# Or your desired stage name\ndescription\n=\n\"Deployment for API changes\"\n# This triggers redeployment when the API definition changes\ntriggers\n=\n{\n# Include a hash of the API body to detect changes\napi_body_hash\n=\nsha256(jsonencode(aws_api_gateway_rest_api.example.body))\n# Include a hash of the resource policy to detect changes\npolicy_hash\n=\nsha256(jsonencode(aws_api_gateway_rest_api.example.policy))\n}\n# Ensure all resources are created before deployment\ndepends_on\n=\n[\naws_api_gateway_method.example,\naws_api_gateway_integration.example,\n# Include other resources that make up your API\n]\n}\nAlternatively, you can separate the stage from the deployment:\nresource\n\"aws_api_gateway_deployment\"\n\"example\"\n{\nrest_api_id\n=\naws_api_gateway_rest_api.example.id\ndescription\n=\n\"Deployment for API changes\"\ntriggers\n=\n{\napi_body_hash\n=\nsha256(jsonencode(aws_api_gateway_rest_api.example.body))\npolicy_hash\n=\nsha256(jsonencode(aws_api_gateway_rest_api.example.policy))\n}\ndepends_on\n=\n[\n# Your API resources\n]\n}\nresource\n\"aws_api_gateway_stage\"\n\"example\"\n{\ndeployment_id\n=\naws_api_gateway_deployment.example.id\nrest_api_id\n=\naws_api_gateway_rest_api.example.id\nstage_name\n=\n\"dev\"\n}\nThe\ntriggers\nmap is key here - it will cause Terraform to create a new deployment whenever the API body or resource policy changes. The\ndepends_on\nattribute ensures that all API resources are created before the deployment is made.\nRemember that every time you update your API (modifying routes, methods, integrations, authorizers, resource policies, etc.), you need to redeploy it to make those changes available to your users.\nSources\nCreate a deployment for a REST API in API Gateway - Amazon API Gateway\nDeploy REST APIs in API Gateway - Amazon API Gateway"
}