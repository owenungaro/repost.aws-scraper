{
  "body": "In this article, we'll explore an innovative method to remove encryption from Amazon EBS volumes using the 'CreateStoreImageTask' API. This approach leverages AWS infrastructure without requiring additional unencrypted EBS volumes, making it particularly useful in environments with strict security policies.\n\nIntroduction\nWhile the traditional method involves creating a secondary unencrypted EBS volume and copying data using OS-level tools, our approach utilizes AWS services exclusively.\nWe can use AWS CLI to call the \u2018CreateStoreImageTask\u2019 API. Usually this API is used to for copying AMI's across AWS partitions (example from commercial partition to the AWS GovCloud (US) partition). However, we can extend this logic to use it within the same AWS partition instead of using the recommended Copy Image API. This approach offers a streamlined, service-based solution.\nPrerequisites\nAn AMI of the target EC2 instance or encrypted snapshots\nAppropriate IAM permissions including:\nAccess to the KMS key used for encryption.\nChange the key ARN in the policy below\n.\nPermissions for S3, EBS, and EC2 services\nRequired IAM Policy\n{\n\"Version\"\n:\n\"2012-10-17\"\n,\n\"Statement\"\n:\n[\n{\n\"Effect\"\n:\n\"Allow\"\n,\n\"Action\"\n:\n[\n\"s3:DeleteObject\"\n,\n\"s3:GetObject\"\n,\n\"s3:ListBucket\"\n,\n\"s3:PutObject\"\n,\n\"s3:PutObjectTagging\"\n,\n\"s3:AbortMultipartUpload\"\n,\n\"ebs:CompleteSnapshot\"\n,\n\"ebs:GetSnapshotBlock\"\n,\n\"ebs:ListChangedBlocks\"\n,\n\"ebs:ListSnapshotBlocks\"\n,\n\"ebs:PutSnapshotBlock\"\n,\n\"ebs:StartSnapshot\"\n,\n\"ec2:CreateStoreImageTask\"\n,\n\"ec2:DescribeStoreImageTasks\"\n,\n\"ec2:CreateRestoreImageTask\"\n,\n\"ec2:GetEbsEncryptionByDefault\"\n,\n\"ec2:DescribeTags\"\n,\n\"ec2:CreateTags\"\n]\n,\n\"Resource\"\n:\n\"*\"\n}\n,\n{\n\"Effect\"\n:\n\"Allow\"\n,\n\"Action\"\n:\n[\n\"kms:Decrypt\"\n,\n\"kms:DescribeKey\"\n,\n\"kms:CreateGrant\"\n,\n\"kms:GenerateDataKeyWithoutPlaintext\"\n,\n\"kms:ReEncrypt*\"\n]\n,\n\"Resource\"\n:\n\"arn:aws:kms:region:account-id:key/key-id\"\n}\n]\n}\nImplementation Steps\n1. Store the AMI (CreateStoreImageTask)\naws ec2 create-store-image-task --image-id ami-1234567890abcdef0 --bucket amzn-s3-demo-bucket\nNote:\nReplace\nami-1234567890abcdef0\nwith your AMI ID and\namzn-s3-demo-bucket\nwith your S3 bucket name.\nKey Points:\nThe bucket must be in the Region in which the request is being made.\nDecrypts snapshots during storage process\nStores AMI as a single compressed object in S3 with a .bin extension.\nPreserves Metadata: AMI name, AMI description, AMI registration date, AMI owner account, and a timestamp for the store operation.\nThe sum of the sizes of all the AMIs in progress is limited to 1,200 GB of EBS snapshot data per account. Further task creation will be rejected until the tasks in progress are less than the limit. For example, if an AMI with 200 GB of snapshot data and another AMI with 400 GB of snapshot data are currently being stored, another request will be accepted, because the total in progress is 600 GB, which is less than the limit. But if a single AMI with 1,200 GB of snapshot data is currently being stored, further tasks are rejected until the task is completed.\n2. Monitor Progress (DescribeStoreImageTasks)\naws ec2 describe-store-image-tasks\nFeatures:\nShows task status (InProgress/Completed/Failed)\nDisplays progress percentage for ongoing tasks\nLists tasks in reverse chronological order\nViewable for the previous month only\n3. Restore the AMI (CreateRestoreImageTask)\nFirst, disable encryption by default:\naws ec2 disable-ebs-encryption-by-default --region region\nNote:\nReplace\nregion\nwith your AWS region (e.g., us-east-1, eu-west-1).\nThen, restore the AMI:\naws ec2 create-restore-image-task --object-key ami-1234567890abcdef0.bin --bucket amzn-s3-demo-bucket --name\n\"New AMI Name\"\nNote:\nReplace\nami-1234567890abcdef0.bin\nwith your stored AMI object name,\namzn-s3-demo-bucket\nwith your S3 bucket name, and \"New AMI Name\" with your desired AMI name.\nFeatures:\nThe restore task can be performed in the same or a different Region in which the store task was performed.\nThe S3 bucket from which the AMI object will be restored must be in the same Region in which the restore task is requested. The AMI will be restored in this Region.\nThe AMI is restored with its metadata, such as the name, description, and block device mappings corresponding to the values of the stored AMI. The name must be unique for AMIs in the Region for this account. If you do not provide a name, the new AMI gets the same name as the original AMI. The AMI gets a new AMI ID that is generated at the time of the restore process.\nRestoration time depends on the size of the AMI, other InProgress queued tasks.\nSecurity Considerations\nConfigure S3 bucket with appropriate security controls\nDisable public access to the S3 bucket\nConsider enabling Server-Side Encryption for S3 buckets, although not required\nStore and Restore happens over TLS connections, therefore, data in transit and rest is secured as long as the bucket access is kept secured\nReferences\nStore and restore an AMI using S3\nHow AMI store and restore works\nLimitations and Costs"
}